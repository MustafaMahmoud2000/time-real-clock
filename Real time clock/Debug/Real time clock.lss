
Real time clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  000014b0  00001544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080018a  0080018a  0000166e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a83  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000039cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cde  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d1  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000108b  00000000  00000000  000054d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 05 	call	0xb2e	; 0xb2e <main>
      8a:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seven_seg_init>:
#include "DIO.H"
#define cc
void seven_seg_init(char port)
{
vDIO_SET_PORT(port,0Xff);
      92:	6f ef       	ldi	r22, 0xFF	; 255
      94:	0e 94 5f 02 	call	0x4be	; 0x4be <vDIO_SET_PORT>
	
}
      98:	08 95       	ret

0000009a <seven_seg_write>:
void seven_seg_write(char port,char number)
{
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
      9e:	cd b7       	in	r28, 0x3d	; 61
      a0:	de b7       	in	r29, 0x3e	; 62
      a2:	2a 97       	sbiw	r28, 0x0a	; 10
      a4:	0f b6       	in	r0, 0x3f	; 63
      a6:	f8 94       	cli
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	0f be       	out	0x3f, r0	; 63
      ac:	cd bf       	out	0x3d, r28	; 61
unsigned char arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
      ae:	de 01       	movw	r26, r28
      b0:	11 96       	adiw	r26, 0x01	; 1
      b2:	e0 e6       	ldi	r30, 0x60	; 96
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	9a e0       	ldi	r25, 0x0A	; 10
      b8:	01 90       	ld	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	91 50       	subi	r25, 0x01	; 1
      be:	e1 f7       	brne	.-8      	; 0xb8 <seven_seg_write+0x1e>
vDIO_WRITE_PORT(port,arr[number]);
      c0:	fe 01       	movw	r30, r28
      c2:	e6 0f       	add	r30, r22
      c4:	f1 1d       	adc	r31, r1
      c6:	61 81       	ldd	r22, Z+1	; 0x01
      c8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <vDIO_WRITE_PORT>
}
      cc:	2a 96       	adiw	r28, 0x0a	; 10
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	f8 94       	cli
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	0f be       	out	0x3f, r0	; 63
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <seven_seg_bcd_init>:
void seven_seg_bcd_init(unsigned char port)
{
      de:	cf 93       	push	r28
      e0:	c8 2f       	mov	r28, r24
	vDIO_SET_BIT_DIR(port,0,1);
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(port,1,1);
      ea:	8c 2f       	mov	r24, r28
      ec:	61 e0       	ldi	r22, 0x01	; 1
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(port,2,1);
      f4:	8c 2f       	mov	r24, r28
      f6:	62 e0       	ldi	r22, 0x02	; 2
      f8:	41 e0       	ldi	r20, 0x01	; 1
      fa:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(port,3,1);
      fe:	8c 2f       	mov	r24, r28
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
}
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <seven_seg_bcd_write_low>:
void seven_seg_bcd_write_low(unsigned char port,unsigned char value)
{
	vDIO_WRITE_LOW_NIBBLE(port, value);
     10c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <vDIO_WRITE_LOW_NIBBLE>
	
}
     110:	08 95       	ret

00000112 <seven_seg_bcd_write_high>:
void seven_seg_bcd_write_high(unsigned char port,unsigned char value)
{
	
	vDIO_WRITE_HIGH_NIBBLE(port, value);
     112:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
}
     116:	08 95       	ret

00000118 <vDIO_SET_BIT_DIR>:
#include "std_macros.h"
#include "DIO.h"

void vDIO_SET_BIT_DIR(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
     118:	84 34       	cpi	r24, 0x44	; 68
     11a:	09 f4       	brne	.+2      	; 0x11e <vDIO_SET_BIT_DIR+0x6>
     11c:	71 c0       	rjmp	.+226    	; 0x200 <vDIO_SET_BIT_DIR+0xe8>
     11e:	85 34       	cpi	r24, 0x45	; 69
     120:	48 f4       	brcc	.+18     	; 0x134 <vDIO_SET_BIT_DIR+0x1c>
     122:	82 34       	cpi	r24, 0x42	; 66
     124:	99 f1       	breq	.+102    	; 0x18c <vDIO_SET_BIT_DIR+0x74>
     126:	83 34       	cpi	r24, 0x43	; 67
     128:	08 f0       	brcs	.+2      	; 0x12c <vDIO_SET_BIT_DIR+0x14>
     12a:	4d c0       	rjmp	.+154    	; 0x1c6 <vDIO_SET_BIT_DIR+0xae>
     12c:	81 34       	cpi	r24, 0x41	; 65
     12e:	09 f0       	breq	.+2      	; 0x132 <vDIO_SET_BIT_DIR+0x1a>
     130:	83 c0       	rjmp	.+262    	; 0x238 <vDIO_SET_BIT_DIR+0x120>
     132:	0f c0       	rjmp	.+30     	; 0x152 <vDIO_SET_BIT_DIR+0x3a>
     134:	82 36       	cpi	r24, 0x62	; 98
     136:	51 f1       	breq	.+84     	; 0x18c <vDIO_SET_BIT_DIR+0x74>
     138:	83 36       	cpi	r24, 0x63	; 99
     13a:	20 f4       	brcc	.+8      	; 0x144 <vDIO_SET_BIT_DIR+0x2c>
     13c:	81 36       	cpi	r24, 0x61	; 97
     13e:	09 f0       	breq	.+2      	; 0x142 <vDIO_SET_BIT_DIR+0x2a>
     140:	7b c0       	rjmp	.+246    	; 0x238 <vDIO_SET_BIT_DIR+0x120>
     142:	07 c0       	rjmp	.+14     	; 0x152 <vDIO_SET_BIT_DIR+0x3a>
     144:	83 36       	cpi	r24, 0x63	; 99
     146:	09 f4       	brne	.+2      	; 0x14a <vDIO_SET_BIT_DIR+0x32>
     148:	3e c0       	rjmp	.+124    	; 0x1c6 <vDIO_SET_BIT_DIR+0xae>
     14a:	84 36       	cpi	r24, 0x64	; 100
     14c:	09 f0       	breq	.+2      	; 0x150 <vDIO_SET_BIT_DIR+0x38>
     14e:	74 c0       	rjmp	.+232    	; 0x238 <vDIO_SET_BIT_DIR+0x120>
     150:	57 c0       	rjmp	.+174    	; 0x200 <vDIO_SET_BIT_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
     152:	41 30       	cpi	r20, 0x01	; 1
     154:	69 f4       	brne	.+26     	; 0x170 <vDIO_SET_BIT_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
     156:	2a b3       	in	r18, 0x1a	; 26
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	ac 01       	movw	r20, r24
     15e:	02 c0       	rjmp	.+4      	; 0x164 <vDIO_SET_BIT_DIR+0x4c>
     160:	44 0f       	add	r20, r20
     162:	55 1f       	adc	r21, r21
     164:	6a 95       	dec	r22
     166:	e2 f7       	brpl	.-8      	; 0x160 <vDIO_SET_BIT_DIR+0x48>
     168:	ba 01       	movw	r22, r20
     16a:	62 2b       	or	r22, r18
     16c:	6a bb       	out	0x1a, r22	; 26
     16e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
     170:	2a b3       	in	r18, 0x1a	; 26
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	ac 01       	movw	r20, r24
     178:	02 c0       	rjmp	.+4      	; 0x17e <vDIO_SET_BIT_DIR+0x66>
     17a:	44 0f       	add	r20, r20
     17c:	55 1f       	adc	r21, r21
     17e:	6a 95       	dec	r22
     180:	e2 f7       	brpl	.-8      	; 0x17a <vDIO_SET_BIT_DIR+0x62>
     182:	ba 01       	movw	r22, r20
     184:	60 95       	com	r22
     186:	62 23       	and	r22, r18
     188:	6a bb       	out	0x1a, r22	; 26
     18a:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
     18c:	41 30       	cpi	r20, 0x01	; 1
     18e:	69 f4       	brne	.+26     	; 0x1aa <vDIO_SET_BIT_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
     190:	27 b3       	in	r18, 0x17	; 23
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	ac 01       	movw	r20, r24
     198:	02 c0       	rjmp	.+4      	; 0x19e <vDIO_SET_BIT_DIR+0x86>
     19a:	44 0f       	add	r20, r20
     19c:	55 1f       	adc	r21, r21
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <vDIO_SET_BIT_DIR+0x82>
     1a2:	ba 01       	movw	r22, r20
     1a4:	62 2b       	or	r22, r18
     1a6:	67 bb       	out	0x17, r22	; 23
     1a8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
     1aa:	27 b3       	in	r18, 0x17	; 23
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	ac 01       	movw	r20, r24
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <vDIO_SET_BIT_DIR+0xa0>
     1b4:	44 0f       	add	r20, r20
     1b6:	55 1f       	adc	r21, r21
     1b8:	6a 95       	dec	r22
     1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <vDIO_SET_BIT_DIR+0x9c>
     1bc:	ba 01       	movw	r22, r20
     1be:	60 95       	com	r22
     1c0:	62 23       	and	r22, r18
     1c2:	67 bb       	out	0x17, r22	; 23
     1c4:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(dir==1)
     1c6:	41 30       	cpi	r20, 0x01	; 1
     1c8:	69 f4       	brne	.+26     	; 0x1e4 <vDIO_SET_BIT_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
     1ca:	24 b3       	in	r18, 0x14	; 20
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	ac 01       	movw	r20, r24
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <vDIO_SET_BIT_DIR+0xc0>
     1d4:	44 0f       	add	r20, r20
     1d6:	55 1f       	adc	r21, r21
     1d8:	6a 95       	dec	r22
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <vDIO_SET_BIT_DIR+0xbc>
     1dc:	ba 01       	movw	r22, r20
     1de:	62 2b       	or	r22, r18
     1e0:	64 bb       	out	0x14, r22	; 20
     1e2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
     1e4:	24 b3       	in	r18, 0x14	; 20
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	ac 01       	movw	r20, r24
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <vDIO_SET_BIT_DIR+0xda>
     1ee:	44 0f       	add	r20, r20
     1f0:	55 1f       	adc	r21, r21
     1f2:	6a 95       	dec	r22
     1f4:	e2 f7       	brpl	.-8      	; 0x1ee <vDIO_SET_BIT_DIR+0xd6>
     1f6:	ba 01       	movw	r22, r20
     1f8:	60 95       	com	r22
     1fa:	62 23       	and	r22, r18
     1fc:	64 bb       	out	0x14, r22	; 20
     1fe:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
     200:	41 30       	cpi	r20, 0x01	; 1
     202:	69 f4       	brne	.+26     	; 0x21e <vDIO_SET_BIT_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
     204:	21 b3       	in	r18, 0x11	; 17
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	ac 01       	movw	r20, r24
     20c:	02 c0       	rjmp	.+4      	; 0x212 <vDIO_SET_BIT_DIR+0xfa>
     20e:	44 0f       	add	r20, r20
     210:	55 1f       	adc	r21, r21
     212:	6a 95       	dec	r22
     214:	e2 f7       	brpl	.-8      	; 0x20e <vDIO_SET_BIT_DIR+0xf6>
     216:	ba 01       	movw	r22, r20
     218:	62 2b       	or	r22, r18
     21a:	61 bb       	out	0x11, r22	; 17
     21c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
     21e:	21 b3       	in	r18, 0x11	; 17
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	ac 01       	movw	r20, r24
     226:	02 c0       	rjmp	.+4      	; 0x22c <vDIO_SET_BIT_DIR+0x114>
     228:	44 0f       	add	r20, r20
     22a:	55 1f       	adc	r21, r21
     22c:	6a 95       	dec	r22
     22e:	e2 f7       	brpl	.-8      	; 0x228 <vDIO_SET_BIT_DIR+0x110>
     230:	ba 01       	movw	r22, r20
     232:	60 95       	com	r22
     234:	62 23       	and	r22, r18
     236:	61 bb       	out	0x11, r22	; 17
     238:	08 95       	ret

0000023a <vDIO_WRITE_BIT>:
		
	}
}
void vDIO_WRITE_BIT(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
     23a:	84 34       	cpi	r24, 0x44	; 68
     23c:	09 f4       	brne	.+2      	; 0x240 <vDIO_WRITE_BIT+0x6>
     23e:	71 c0       	rjmp	.+226    	; 0x322 <vDIO_WRITE_BIT+0xe8>
     240:	85 34       	cpi	r24, 0x45	; 69
     242:	48 f4       	brcc	.+18     	; 0x256 <vDIO_WRITE_BIT+0x1c>
     244:	82 34       	cpi	r24, 0x42	; 66
     246:	99 f1       	breq	.+102    	; 0x2ae <vDIO_WRITE_BIT+0x74>
     248:	83 34       	cpi	r24, 0x43	; 67
     24a:	08 f0       	brcs	.+2      	; 0x24e <vDIO_WRITE_BIT+0x14>
     24c:	4d c0       	rjmp	.+154    	; 0x2e8 <vDIO_WRITE_BIT+0xae>
     24e:	81 34       	cpi	r24, 0x41	; 65
     250:	09 f0       	breq	.+2      	; 0x254 <vDIO_WRITE_BIT+0x1a>
     252:	83 c0       	rjmp	.+262    	; 0x35a <vDIO_WRITE_BIT+0x120>
     254:	0f c0       	rjmp	.+30     	; 0x274 <vDIO_WRITE_BIT+0x3a>
     256:	82 36       	cpi	r24, 0x62	; 98
     258:	51 f1       	breq	.+84     	; 0x2ae <vDIO_WRITE_BIT+0x74>
     25a:	83 36       	cpi	r24, 0x63	; 99
     25c:	20 f4       	brcc	.+8      	; 0x266 <vDIO_WRITE_BIT+0x2c>
     25e:	81 36       	cpi	r24, 0x61	; 97
     260:	09 f0       	breq	.+2      	; 0x264 <vDIO_WRITE_BIT+0x2a>
     262:	7b c0       	rjmp	.+246    	; 0x35a <vDIO_WRITE_BIT+0x120>
     264:	07 c0       	rjmp	.+14     	; 0x274 <vDIO_WRITE_BIT+0x3a>
     266:	83 36       	cpi	r24, 0x63	; 99
     268:	09 f4       	brne	.+2      	; 0x26c <vDIO_WRITE_BIT+0x32>
     26a:	3e c0       	rjmp	.+124    	; 0x2e8 <vDIO_WRITE_BIT+0xae>
     26c:	84 36       	cpi	r24, 0x64	; 100
     26e:	09 f0       	breq	.+2      	; 0x272 <vDIO_WRITE_BIT+0x38>
     270:	74 c0       	rjmp	.+232    	; 0x35a <vDIO_WRITE_BIT+0x120>
     272:	57 c0       	rjmp	.+174    	; 0x322 <vDIO_WRITE_BIT+0xe8>
  {
	case'A':
	case'a':
	if(val==1)
     274:	41 30       	cpi	r20, 0x01	; 1
     276:	69 f4       	brne	.+26     	; 0x292 <vDIO_WRITE_BIT+0x58>
	{
		SET_BIT(PORTA,pin);
     278:	2b b3       	in	r18, 0x1b	; 27
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	ac 01       	movw	r20, r24
     280:	02 c0       	rjmp	.+4      	; 0x286 <vDIO_WRITE_BIT+0x4c>
     282:	44 0f       	add	r20, r20
     284:	55 1f       	adc	r21, r21
     286:	6a 95       	dec	r22
     288:	e2 f7       	brpl	.-8      	; 0x282 <vDIO_WRITE_BIT+0x48>
     28a:	ba 01       	movw	r22, r20
     28c:	62 2b       	or	r22, r18
     28e:	6b bb       	out	0x1b, r22	; 27
     290:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTA,pin);
     292:	2b b3       	in	r18, 0x1b	; 27
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	ac 01       	movw	r20, r24
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <vDIO_WRITE_BIT+0x66>
     29c:	44 0f       	add	r20, r20
     29e:	55 1f       	adc	r21, r21
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <vDIO_WRITE_BIT+0x62>
     2a4:	ba 01       	movw	r22, r20
     2a6:	60 95       	com	r22
     2a8:	62 23       	and	r22, r18
     2aa:	6b bb       	out	0x1b, r22	; 27
     2ac:	08 95       	ret
	}
	break;
	case'B':
	case'b':
	if(val==1)
     2ae:	41 30       	cpi	r20, 0x01	; 1
     2b0:	69 f4       	brne	.+26     	; 0x2cc <vDIO_WRITE_BIT+0x92>
	{
		SET_BIT(PORTB,pin);
     2b2:	28 b3       	in	r18, 0x18	; 24
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	ac 01       	movw	r20, r24
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <vDIO_WRITE_BIT+0x86>
     2bc:	44 0f       	add	r20, r20
     2be:	55 1f       	adc	r21, r21
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <vDIO_WRITE_BIT+0x82>
     2c4:	ba 01       	movw	r22, r20
     2c6:	62 2b       	or	r22, r18
     2c8:	68 bb       	out	0x18, r22	; 24
     2ca:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTB,pin);
     2cc:	28 b3       	in	r18, 0x18	; 24
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	ac 01       	movw	r20, r24
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <vDIO_WRITE_BIT+0xa0>
     2d6:	44 0f       	add	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	6a 95       	dec	r22
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <vDIO_WRITE_BIT+0x9c>
     2de:	ba 01       	movw	r22, r20
     2e0:	60 95       	com	r22
     2e2:	62 23       	and	r22, r18
     2e4:	68 bb       	out	0x18, r22	; 24
     2e6:	08 95       	ret
	}
	break;
	case'C':
	case'c':
	if(val==1)
     2e8:	41 30       	cpi	r20, 0x01	; 1
     2ea:	69 f4       	brne	.+26     	; 0x306 <vDIO_WRITE_BIT+0xcc>
	{
		SET_BIT(PORTC,pin);
     2ec:	25 b3       	in	r18, 0x15	; 21
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	ac 01       	movw	r20, r24
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <vDIO_WRITE_BIT+0xc0>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	6a 95       	dec	r22
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <vDIO_WRITE_BIT+0xbc>
     2fe:	ba 01       	movw	r22, r20
     300:	62 2b       	or	r22, r18
     302:	65 bb       	out	0x15, r22	; 21
     304:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTC,pin);
     306:	25 b3       	in	r18, 0x15	; 21
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	ac 01       	movw	r20, r24
     30e:	02 c0       	rjmp	.+4      	; 0x314 <vDIO_WRITE_BIT+0xda>
     310:	44 0f       	add	r20, r20
     312:	55 1f       	adc	r21, r21
     314:	6a 95       	dec	r22
     316:	e2 f7       	brpl	.-8      	; 0x310 <vDIO_WRITE_BIT+0xd6>
     318:	ba 01       	movw	r22, r20
     31a:	60 95       	com	r22
     31c:	62 23       	and	r22, r18
     31e:	65 bb       	out	0x15, r22	; 21
     320:	08 95       	ret
	}
	break;
	case'D':
	case'd':
	if(val==1)
     322:	41 30       	cpi	r20, 0x01	; 1
     324:	69 f4       	brne	.+26     	; 0x340 <vDIO_WRITE_BIT+0x106>
	{
		SET_BIT(PORTD,pin);
     326:	22 b3       	in	r18, 0x12	; 18
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	ac 01       	movw	r20, r24
     32e:	02 c0       	rjmp	.+4      	; 0x334 <vDIO_WRITE_BIT+0xfa>
     330:	44 0f       	add	r20, r20
     332:	55 1f       	adc	r21, r21
     334:	6a 95       	dec	r22
     336:	e2 f7       	brpl	.-8      	; 0x330 <vDIO_WRITE_BIT+0xf6>
     338:	ba 01       	movw	r22, r20
     33a:	62 2b       	or	r22, r18
     33c:	62 bb       	out	0x12, r22	; 18
     33e:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTD,pin);
     340:	22 b3       	in	r18, 0x12	; 18
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	ac 01       	movw	r20, r24
     348:	02 c0       	rjmp	.+4      	; 0x34e <vDIO_WRITE_BIT+0x114>
     34a:	44 0f       	add	r20, r20
     34c:	55 1f       	adc	r21, r21
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <vDIO_WRITE_BIT+0x110>
     352:	ba 01       	movw	r22, r20
     354:	60 95       	com	r22
     356:	62 23       	and	r22, r18
     358:	62 bb       	out	0x12, r22	; 18
     35a:	08 95       	ret

0000035c <vDIO_TOGGLE_BIT>:
	
  }
}
void vDIO_TOGGLE_BIT(unsigned char port,unsigned char pin)
{
switch(port)
     35c:	84 34       	cpi	r24, 0x44	; 68
     35e:	09 f4       	brne	.+2      	; 0x362 <vDIO_TOGGLE_BIT+0x6>
     360:	3d c0       	rjmp	.+122    	; 0x3dc <vDIO_TOGGLE_BIT+0x80>
     362:	85 34       	cpi	r24, 0x45	; 69
     364:	40 f4       	brcc	.+16     	; 0x376 <vDIO_TOGGLE_BIT+0x1a>
     366:	82 34       	cpi	r24, 0x42	; 66
     368:	f9 f0       	breq	.+62     	; 0x3a8 <vDIO_TOGGLE_BIT+0x4c>
     36a:	83 34       	cpi	r24, 0x43	; 67
     36c:	50 f5       	brcc	.+84     	; 0x3c2 <vDIO_TOGGLE_BIT+0x66>
     36e:	81 34       	cpi	r24, 0x41	; 65
     370:	09 f0       	breq	.+2      	; 0x374 <vDIO_TOGGLE_BIT+0x18>
     372:	40 c0       	rjmp	.+128    	; 0x3f4 <vDIO_TOGGLE_BIT+0x98>
     374:	0c c0       	rjmp	.+24     	; 0x38e <vDIO_TOGGLE_BIT+0x32>
     376:	82 36       	cpi	r24, 0x62	; 98
     378:	b9 f0       	breq	.+46     	; 0x3a8 <vDIO_TOGGLE_BIT+0x4c>
     37a:	83 36       	cpi	r24, 0x63	; 99
     37c:	18 f4       	brcc	.+6      	; 0x384 <vDIO_TOGGLE_BIT+0x28>
     37e:	81 36       	cpi	r24, 0x61	; 97
     380:	c9 f5       	brne	.+114    	; 0x3f4 <vDIO_TOGGLE_BIT+0x98>
     382:	05 c0       	rjmp	.+10     	; 0x38e <vDIO_TOGGLE_BIT+0x32>
     384:	83 36       	cpi	r24, 0x63	; 99
     386:	e9 f0       	breq	.+58     	; 0x3c2 <vDIO_TOGGLE_BIT+0x66>
     388:	84 36       	cpi	r24, 0x64	; 100
     38a:	a1 f5       	brne	.+104    	; 0x3f4 <vDIO_TOGGLE_BIT+0x98>
     38c:	27 c0       	rjmp	.+78     	; 0x3dc <vDIO_TOGGLE_BIT+0x80>
{
	case'A':
	case'a':
	TOGGAL_BIT(PORTA,pin);
     38e:	2b b3       	in	r18, 0x1b	; 27
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	ac 01       	movw	r20, r24
     396:	02 c0       	rjmp	.+4      	; 0x39c <vDIO_TOGGLE_BIT+0x40>
     398:	44 0f       	add	r20, r20
     39a:	55 1f       	adc	r21, r21
     39c:	6a 95       	dec	r22
     39e:	e2 f7       	brpl	.-8      	; 0x398 <vDIO_TOGGLE_BIT+0x3c>
     3a0:	ba 01       	movw	r22, r20
     3a2:	62 27       	eor	r22, r18
     3a4:	6b bb       	out	0x1b, r22	; 27
	break;
     3a6:	08 95       	ret
	case'B':
	case'b':
	TOGGAL_BIT(PORTB,pin);
     3a8:	28 b3       	in	r18, 0x18	; 24
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	ac 01       	movw	r20, r24
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <vDIO_TOGGLE_BIT+0x5a>
     3b2:	44 0f       	add	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	6a 95       	dec	r22
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <vDIO_TOGGLE_BIT+0x56>
     3ba:	ba 01       	movw	r22, r20
     3bc:	62 27       	eor	r22, r18
     3be:	68 bb       	out	0x18, r22	; 24
	break;
     3c0:	08 95       	ret
	case'C':
	case'c':
	TOGGAL_BIT(PORTC,pin);
     3c2:	25 b3       	in	r18, 0x15	; 21
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	ac 01       	movw	r20, r24
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <vDIO_TOGGLE_BIT+0x74>
     3cc:	44 0f       	add	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	6a 95       	dec	r22
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <vDIO_TOGGLE_BIT+0x70>
     3d4:	ba 01       	movw	r22, r20
     3d6:	62 27       	eor	r22, r18
     3d8:	65 bb       	out	0x15, r22	; 21
	break;
     3da:	08 95       	ret
	case'D':
	case'd':
	TOGGAL_BIT(PORTD,pin);
     3dc:	22 b3       	in	r18, 0x12	; 18
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	ac 01       	movw	r20, r24
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <vDIO_TOGGLE_BIT+0x8e>
     3e6:	44 0f       	add	r20, r20
     3e8:	55 1f       	adc	r21, r21
     3ea:	6a 95       	dec	r22
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <vDIO_TOGGLE_BIT+0x8a>
     3ee:	ba 01       	movw	r22, r20
     3f0:	62 27       	eor	r22, r18
     3f2:	62 bb       	out	0x12, r22	; 18
     3f4:	08 95       	ret

000003f6 <u8DIO_READ_BIT>:
}		
}
unsigned char u8DIO_READ_BIT(unsigned char port, unsigned char pin)
{

	switch(port)
     3f6:	84 34       	cpi	r24, 0x44	; 68
     3f8:	09 f4       	brne	.+2      	; 0x3fc <u8DIO_READ_BIT+0x6>
     3fa:	4e c0       	rjmp	.+156    	; 0x498 <u8DIO_READ_BIT+0xa2>
     3fc:	85 34       	cpi	r24, 0x45	; 69
     3fe:	40 f4       	brcc	.+16     	; 0x410 <u8DIO_READ_BIT+0x1a>
     400:	82 34       	cpi	r24, 0x42	; 66
     402:	31 f1       	breq	.+76     	; 0x450 <u8DIO_READ_BIT+0x5a>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	b0 f5       	brcc	.+108    	; 0x474 <u8DIO_READ_BIT+0x7e>
     408:	81 34       	cpi	r24, 0x41	; 65
     40a:	09 f0       	breq	.+2      	; 0x40e <u8DIO_READ_BIT+0x18>
     40c:	57 c0       	rjmp	.+174    	; 0x4bc <u8DIO_READ_BIT+0xc6>
     40e:	0e c0       	rjmp	.+28     	; 0x42c <u8DIO_READ_BIT+0x36>
     410:	82 36       	cpi	r24, 0x62	; 98
     412:	f1 f0       	breq	.+60     	; 0x450 <u8DIO_READ_BIT+0x5a>
     414:	83 36       	cpi	r24, 0x63	; 99
     416:	20 f4       	brcc	.+8      	; 0x420 <u8DIO_READ_BIT+0x2a>
     418:	81 36       	cpi	r24, 0x61	; 97
     41a:	09 f0       	breq	.+2      	; 0x41e <u8DIO_READ_BIT+0x28>
     41c:	4f c0       	rjmp	.+158    	; 0x4bc <u8DIO_READ_BIT+0xc6>
     41e:	06 c0       	rjmp	.+12     	; 0x42c <u8DIO_READ_BIT+0x36>
     420:	83 36       	cpi	r24, 0x63	; 99
     422:	41 f1       	breq	.+80     	; 0x474 <u8DIO_READ_BIT+0x7e>
     424:	84 36       	cpi	r24, 0x64	; 100
     426:	09 f0       	breq	.+2      	; 0x42a <u8DIO_READ_BIT+0x34>
     428:	49 c0       	rjmp	.+146    	; 0x4bc <u8DIO_READ_BIT+0xc6>
     42a:	36 c0       	rjmp	.+108    	; 0x498 <u8DIO_READ_BIT+0xa2>
	{
		case'A':
		case'a':
		return READ_BIT(PINA,pin);
     42c:	29 b3       	in	r18, 0x19	; 25
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	06 2e       	mov	r0, r22
     434:	02 c0       	rjmp	.+4      	; 0x43a <u8DIO_READ_BIT+0x44>
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	0a 94       	dec	r0
     43c:	e2 f7       	brpl	.-8      	; 0x436 <u8DIO_READ_BIT+0x40>
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	82 23       	and	r24, r18
     442:	93 23       	and	r25, r19
     444:	02 c0       	rjmp	.+4      	; 0x44a <u8DIO_READ_BIT+0x54>
     446:	95 95       	asr	r25
     448:	87 95       	ror	r24
     44a:	6a 95       	dec	r22
     44c:	e2 f7       	brpl	.-8      	; 0x446 <u8DIO_READ_BIT+0x50>
     44e:	08 95       	ret
		break;
		case'B':
		case'b':
		return READ_BIT(PINB,pin);
     450:	26 b3       	in	r18, 0x16	; 22
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	06 2e       	mov	r0, r22
     458:	02 c0       	rjmp	.+4      	; 0x45e <u8DIO_READ_BIT+0x68>
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <u8DIO_READ_BIT+0x64>
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	82 23       	and	r24, r18
     466:	93 23       	and	r25, r19
     468:	02 c0       	rjmp	.+4      	; 0x46e <u8DIO_READ_BIT+0x78>
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <u8DIO_READ_BIT+0x74>
     472:	08 95       	ret
		break;
		case'C':
		case'c':
		return READ_BIT(PINC,pin);
     474:	23 b3       	in	r18, 0x13	; 19
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	06 2e       	mov	r0, r22
     47c:	02 c0       	rjmp	.+4      	; 0x482 <u8DIO_READ_BIT+0x8c>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	0a 94       	dec	r0
     484:	e2 f7       	brpl	.-8      	; 0x47e <u8DIO_READ_BIT+0x88>
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	82 23       	and	r24, r18
     48a:	93 23       	and	r25, r19
     48c:	02 c0       	rjmp	.+4      	; 0x492 <u8DIO_READ_BIT+0x9c>
     48e:	95 95       	asr	r25
     490:	87 95       	ror	r24
     492:	6a 95       	dec	r22
     494:	e2 f7       	brpl	.-8      	; 0x48e <u8DIO_READ_BIT+0x98>
     496:	08 95       	ret
		break;
		case'D':
		case'd':
		return READ_BIT(PIND,pin);
     498:	20 b3       	in	r18, 0x10	; 16
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	06 2e       	mov	r0, r22
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <u8DIO_READ_BIT+0xb0>
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	0a 94       	dec	r0
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <u8DIO_READ_BIT+0xac>
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	82 23       	and	r24, r18
     4ae:	93 23       	and	r25, r19
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <u8DIO_READ_BIT+0xc0>
     4b2:	95 95       	asr	r25
     4b4:	87 95       	ror	r24
     4b6:	6a 95       	dec	r22
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <u8DIO_READ_BIT+0xbc>
     4ba:	08 95       	ret
		break;
		default:
		break;
   }
}
     4bc:	08 95       	ret

000004be <vDIO_SET_PORT>:
void vDIO_SET_PORT( unsigned char port,unsigned char dir)
{
	switch(port)
     4be:	84 34       	cpi	r24, 0x44	; 68
     4c0:	d9 f0       	breq	.+54     	; 0x4f8 <vDIO_SET_PORT+0x3a>
     4c2:	85 34       	cpi	r24, 0x45	; 69
     4c4:	38 f4       	brcc	.+14     	; 0x4d4 <vDIO_SET_PORT+0x16>
     4c6:	82 34       	cpi	r24, 0x42	; 66
     4c8:	99 f0       	breq	.+38     	; 0x4f0 <vDIO_SET_PORT+0x32>
     4ca:	83 34       	cpi	r24, 0x43	; 67
     4cc:	98 f4       	brcc	.+38     	; 0x4f4 <vDIO_SET_PORT+0x36>
     4ce:	81 34       	cpi	r24, 0x41	; 65
     4d0:	a1 f4       	brne	.+40     	; 0x4fa <vDIO_SET_PORT+0x3c>
     4d2:	0c c0       	rjmp	.+24     	; 0x4ec <vDIO_SET_PORT+0x2e>
     4d4:	82 36       	cpi	r24, 0x62	; 98
     4d6:	61 f0       	breq	.+24     	; 0x4f0 <vDIO_SET_PORT+0x32>
     4d8:	83 36       	cpi	r24, 0x63	; 99
     4da:	18 f4       	brcc	.+6      	; 0x4e2 <vDIO_SET_PORT+0x24>
     4dc:	81 36       	cpi	r24, 0x61	; 97
     4de:	69 f4       	brne	.+26     	; 0x4fa <vDIO_SET_PORT+0x3c>
     4e0:	05 c0       	rjmp	.+10     	; 0x4ec <vDIO_SET_PORT+0x2e>
     4e2:	83 36       	cpi	r24, 0x63	; 99
     4e4:	39 f0       	breq	.+14     	; 0x4f4 <vDIO_SET_PORT+0x36>
     4e6:	84 36       	cpi	r24, 0x64	; 100
     4e8:	41 f4       	brne	.+16     	; 0x4fa <vDIO_SET_PORT+0x3c>
     4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <vDIO_SET_PORT+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
     4ec:	6a bb       	out	0x1a, r22	; 26
		break;
     4ee:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
     4f0:	67 bb       	out	0x17, r22	; 23
		break;
     4f2:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
     4f4:	64 bb       	out	0x14, r22	; 20
		break;
     4f6:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
     4f8:	61 bb       	out	0x11, r22	; 17
     4fa:	08 95       	ret

000004fc <vDIO_WRITE_PORT>:
		break;
	}
}
void vDIO_WRITE_PORT(unsigned char port,unsigned char val)
{
	switch(port)
     4fc:	84 34       	cpi	r24, 0x44	; 68
     4fe:	d9 f0       	breq	.+54     	; 0x536 <vDIO_WRITE_PORT+0x3a>
     500:	85 34       	cpi	r24, 0x45	; 69
     502:	38 f4       	brcc	.+14     	; 0x512 <vDIO_WRITE_PORT+0x16>
     504:	82 34       	cpi	r24, 0x42	; 66
     506:	99 f0       	breq	.+38     	; 0x52e <vDIO_WRITE_PORT+0x32>
     508:	83 34       	cpi	r24, 0x43	; 67
     50a:	98 f4       	brcc	.+38     	; 0x532 <vDIO_WRITE_PORT+0x36>
     50c:	81 34       	cpi	r24, 0x41	; 65
     50e:	a1 f4       	brne	.+40     	; 0x538 <vDIO_WRITE_PORT+0x3c>
     510:	0c c0       	rjmp	.+24     	; 0x52a <vDIO_WRITE_PORT+0x2e>
     512:	82 36       	cpi	r24, 0x62	; 98
     514:	61 f0       	breq	.+24     	; 0x52e <vDIO_WRITE_PORT+0x32>
     516:	83 36       	cpi	r24, 0x63	; 99
     518:	18 f4       	brcc	.+6      	; 0x520 <vDIO_WRITE_PORT+0x24>
     51a:	81 36       	cpi	r24, 0x61	; 97
     51c:	69 f4       	brne	.+26     	; 0x538 <vDIO_WRITE_PORT+0x3c>
     51e:	05 c0       	rjmp	.+10     	; 0x52a <vDIO_WRITE_PORT+0x2e>
     520:	83 36       	cpi	r24, 0x63	; 99
     522:	39 f0       	breq	.+14     	; 0x532 <vDIO_WRITE_PORT+0x36>
     524:	84 36       	cpi	r24, 0x64	; 100
     526:	41 f4       	brne	.+16     	; 0x538 <vDIO_WRITE_PORT+0x3c>
     528:	06 c0       	rjmp	.+12     	; 0x536 <vDIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
     52a:	6b bb       	out	0x1b, r22	; 27
		break;
     52c:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
     52e:	68 bb       	out	0x18, r22	; 24
		break;
     530:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
     532:	65 bb       	out	0x15, r22	; 21
		break;
     534:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
     536:	62 bb       	out	0x12, r22	; 18
     538:	08 95       	ret

0000053a <u8DIO_READ_PORT>:
	}
}
unsigned char u8DIO_READ_PORT(unsigned char port)
{
	unsigned char ret_val;
	switch(port)
     53a:	84 34       	cpi	r24, 0x44	; 68
     53c:	d9 f0       	breq	.+54     	; 0x574 <u8DIO_READ_PORT+0x3a>
     53e:	85 34       	cpi	r24, 0x45	; 69
     540:	38 f4       	brcc	.+14     	; 0x550 <u8DIO_READ_PORT+0x16>
     542:	82 34       	cpi	r24, 0x42	; 66
     544:	99 f0       	breq	.+38     	; 0x56c <u8DIO_READ_PORT+0x32>
     546:	83 34       	cpi	r24, 0x43	; 67
     548:	98 f4       	brcc	.+38     	; 0x570 <u8DIO_READ_PORT+0x36>
     54a:	81 34       	cpi	r24, 0x41	; 65
     54c:	a1 f4       	brne	.+40     	; 0x576 <u8DIO_READ_PORT+0x3c>
     54e:	0c c0       	rjmp	.+24     	; 0x568 <u8DIO_READ_PORT+0x2e>
     550:	82 36       	cpi	r24, 0x62	; 98
     552:	61 f0       	breq	.+24     	; 0x56c <u8DIO_READ_PORT+0x32>
     554:	83 36       	cpi	r24, 0x63	; 99
     556:	18 f4       	brcc	.+6      	; 0x55e <u8DIO_READ_PORT+0x24>
     558:	81 36       	cpi	r24, 0x61	; 97
     55a:	69 f4       	brne	.+26     	; 0x576 <u8DIO_READ_PORT+0x3c>
     55c:	05 c0       	rjmp	.+10     	; 0x568 <u8DIO_READ_PORT+0x2e>
     55e:	83 36       	cpi	r24, 0x63	; 99
     560:	39 f0       	breq	.+14     	; 0x570 <u8DIO_READ_PORT+0x36>
     562:	84 36       	cpi	r24, 0x64	; 100
     564:	41 f4       	brne	.+16     	; 0x576 <u8DIO_READ_PORT+0x3c>
     566:	06 c0       	rjmp	.+12     	; 0x574 <u8DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		ret_val=PINA;
     568:	89 b3       	in	r24, 0x19	; 25
		break;
     56a:	08 95       	ret
		case 'B':
		case 'b':
		ret_val=PINB;
     56c:	86 b3       	in	r24, 0x16	; 22
		break;
     56e:	08 95       	ret
		case 'C':
		case 'c':
		ret_val=PINC;
     570:	83 b3       	in	r24, 0x13	; 19
		break;
     572:	08 95       	ret
		case 'D':
		case 'd':
		ret_val=PIND;
     574:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;	
		
	}
}
     576:	08 95       	ret

00000578 <vDIO_TOGGLE_PORT>:
void vDIO_TOGGLE_PORT(unsigned char port)
{
	switch(port)
     578:	84 34       	cpi	r24, 0x44	; 68
     57a:	09 f1       	breq	.+66     	; 0x5be <vDIO_TOGGLE_PORT+0x46>
     57c:	85 34       	cpi	r24, 0x45	; 69
     57e:	38 f4       	brcc	.+14     	; 0x58e <vDIO_TOGGLE_PORT+0x16>
     580:	82 34       	cpi	r24, 0x42	; 66
     582:	a9 f0       	breq	.+42     	; 0x5ae <vDIO_TOGGLE_PORT+0x36>
     584:	83 34       	cpi	r24, 0x43	; 67
     586:	b8 f4       	brcc	.+46     	; 0x5b6 <vDIO_TOGGLE_PORT+0x3e>
     588:	81 34       	cpi	r24, 0x41	; 65
     58a:	e1 f4       	brne	.+56     	; 0x5c4 <vDIO_TOGGLE_PORT+0x4c>
     58c:	0c c0       	rjmp	.+24     	; 0x5a6 <vDIO_TOGGLE_PORT+0x2e>
     58e:	82 36       	cpi	r24, 0x62	; 98
     590:	71 f0       	breq	.+28     	; 0x5ae <vDIO_TOGGLE_PORT+0x36>
     592:	83 36       	cpi	r24, 0x63	; 99
     594:	18 f4       	brcc	.+6      	; 0x59c <vDIO_TOGGLE_PORT+0x24>
     596:	81 36       	cpi	r24, 0x61	; 97
     598:	a9 f4       	brne	.+42     	; 0x5c4 <vDIO_TOGGLE_PORT+0x4c>
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <vDIO_TOGGLE_PORT+0x2e>
     59c:	83 36       	cpi	r24, 0x63	; 99
     59e:	59 f0       	breq	.+22     	; 0x5b6 <vDIO_TOGGLE_PORT+0x3e>
     5a0:	84 36       	cpi	r24, 0x64	; 100
     5a2:	81 f4       	brne	.+32     	; 0x5c4 <vDIO_TOGGLE_PORT+0x4c>
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <vDIO_TOGGLE_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     5a6:	8b b3       	in	r24, 0x1b	; 27
     5a8:	80 95       	com	r24
     5aa:	8b bb       	out	0x1b, r24	; 27
		break;
     5ac:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     5ae:	88 b3       	in	r24, 0x18	; 24
     5b0:	80 95       	com	r24
     5b2:	88 bb       	out	0x18, r24	; 24
		break;
     5b4:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     5b6:	85 b3       	in	r24, 0x15	; 21
     5b8:	80 95       	com	r24
     5ba:	85 bb       	out	0x15, r24	; 21
		break;
     5bc:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     5be:	82 b3       	in	r24, 0x12	; 18
     5c0:	80 95       	com	r24
     5c2:	82 bb       	out	0x12, r24	; 18
     5c4:	08 95       	ret

000005c6 <vDIO_PULLUP_CONNECT>:
		break;
	}
}
void vDIO_PULLUP_CONNECT(unsigned char port,unsigned char pin,unsigned char connect)
{
	switch(port)
     5c6:	84 34       	cpi	r24, 0x44	; 68
     5c8:	09 f4       	brne	.+2      	; 0x5cc <vDIO_PULLUP_CONNECT+0x6>
     5ca:	71 c0       	rjmp	.+226    	; 0x6ae <vDIO_PULLUP_CONNECT+0xe8>
     5cc:	85 34       	cpi	r24, 0x45	; 69
     5ce:	48 f4       	brcc	.+18     	; 0x5e2 <vDIO_PULLUP_CONNECT+0x1c>
     5d0:	82 34       	cpi	r24, 0x42	; 66
     5d2:	99 f1       	breq	.+102    	; 0x63a <vDIO_PULLUP_CONNECT+0x74>
     5d4:	83 34       	cpi	r24, 0x43	; 67
     5d6:	08 f0       	brcs	.+2      	; 0x5da <vDIO_PULLUP_CONNECT+0x14>
     5d8:	4d c0       	rjmp	.+154    	; 0x674 <vDIO_PULLUP_CONNECT+0xae>
     5da:	81 34       	cpi	r24, 0x41	; 65
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <vDIO_PULLUP_CONNECT+0x1a>
     5de:	83 c0       	rjmp	.+262    	; 0x6e6 <vDIO_PULLUP_CONNECT+0x120>
     5e0:	0f c0       	rjmp	.+30     	; 0x600 <vDIO_PULLUP_CONNECT+0x3a>
     5e2:	82 36       	cpi	r24, 0x62	; 98
     5e4:	51 f1       	breq	.+84     	; 0x63a <vDIO_PULLUP_CONNECT+0x74>
     5e6:	83 36       	cpi	r24, 0x63	; 99
     5e8:	20 f4       	brcc	.+8      	; 0x5f2 <vDIO_PULLUP_CONNECT+0x2c>
     5ea:	81 36       	cpi	r24, 0x61	; 97
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <vDIO_PULLUP_CONNECT+0x2a>
     5ee:	7b c0       	rjmp	.+246    	; 0x6e6 <vDIO_PULLUP_CONNECT+0x120>
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <vDIO_PULLUP_CONNECT+0x3a>
     5f2:	83 36       	cpi	r24, 0x63	; 99
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <vDIO_PULLUP_CONNECT+0x32>
     5f6:	3e c0       	rjmp	.+124    	; 0x674 <vDIO_PULLUP_CONNECT+0xae>
     5f8:	84 36       	cpi	r24, 0x64	; 100
     5fa:	09 f0       	breq	.+2      	; 0x5fe <vDIO_PULLUP_CONNECT+0x38>
     5fc:	74 c0       	rjmp	.+232    	; 0x6e6 <vDIO_PULLUP_CONNECT+0x120>
     5fe:	57 c0       	rjmp	.+174    	; 0x6ae <vDIO_PULLUP_CONNECT+0xe8>
	{
		case'A':
		case'a':
		if(connect==1)
     600:	41 30       	cpi	r20, 0x01	; 1
     602:	69 f4       	brne	.+26     	; 0x61e <vDIO_PULLUP_CONNECT+0x58>
		{
			SET_BIT(PORTA,pin);
     604:	2b b3       	in	r18, 0x1b	; 27
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	ac 01       	movw	r20, r24
     60c:	02 c0       	rjmp	.+4      	; 0x612 <vDIO_PULLUP_CONNECT+0x4c>
     60e:	44 0f       	add	r20, r20
     610:	55 1f       	adc	r21, r21
     612:	6a 95       	dec	r22
     614:	e2 f7       	brpl	.-8      	; 0x60e <vDIO_PULLUP_CONNECT+0x48>
     616:	ba 01       	movw	r22, r20
     618:	62 2b       	or	r22, r18
     61a:	6b bb       	out	0x1b, r22	; 27
     61c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
     61e:	2b b3       	in	r18, 0x1b	; 27
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	ac 01       	movw	r20, r24
     626:	02 c0       	rjmp	.+4      	; 0x62c <vDIO_PULLUP_CONNECT+0x66>
     628:	44 0f       	add	r20, r20
     62a:	55 1f       	adc	r21, r21
     62c:	6a 95       	dec	r22
     62e:	e2 f7       	brpl	.-8      	; 0x628 <vDIO_PULLUP_CONNECT+0x62>
     630:	ba 01       	movw	r22, r20
     632:	60 95       	com	r22
     634:	62 23       	and	r22, r18
     636:	6b bb       	out	0x1b, r22	; 27
     638:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(connect==1)
     63a:	41 30       	cpi	r20, 0x01	; 1
     63c:	69 f4       	brne	.+26     	; 0x658 <vDIO_PULLUP_CONNECT+0x92>
		{
			SET_BIT(PORTB,pin);
     63e:	28 b3       	in	r18, 0x18	; 24
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	ac 01       	movw	r20, r24
     646:	02 c0       	rjmp	.+4      	; 0x64c <vDIO_PULLUP_CONNECT+0x86>
     648:	44 0f       	add	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	6a 95       	dec	r22
     64e:	e2 f7       	brpl	.-8      	; 0x648 <vDIO_PULLUP_CONNECT+0x82>
     650:	ba 01       	movw	r22, r20
     652:	62 2b       	or	r22, r18
     654:	68 bb       	out	0x18, r22	; 24
     656:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
     658:	28 b3       	in	r18, 0x18	; 24
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	ac 01       	movw	r20, r24
     660:	02 c0       	rjmp	.+4      	; 0x666 <vDIO_PULLUP_CONNECT+0xa0>
     662:	44 0f       	add	r20, r20
     664:	55 1f       	adc	r21, r21
     666:	6a 95       	dec	r22
     668:	e2 f7       	brpl	.-8      	; 0x662 <vDIO_PULLUP_CONNECT+0x9c>
     66a:	ba 01       	movw	r22, r20
     66c:	60 95       	com	r22
     66e:	62 23       	and	r22, r18
     670:	68 bb       	out	0x18, r22	; 24
     672:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(connect==1)
     674:	41 30       	cpi	r20, 0x01	; 1
     676:	69 f4       	brne	.+26     	; 0x692 <vDIO_PULLUP_CONNECT+0xcc>
		{
			SET_BIT(PORTC,pin);
     678:	25 b3       	in	r18, 0x15	; 21
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	ac 01       	movw	r20, r24
     680:	02 c0       	rjmp	.+4      	; 0x686 <vDIO_PULLUP_CONNECT+0xc0>
     682:	44 0f       	add	r20, r20
     684:	55 1f       	adc	r21, r21
     686:	6a 95       	dec	r22
     688:	e2 f7       	brpl	.-8      	; 0x682 <vDIO_PULLUP_CONNECT+0xbc>
     68a:	ba 01       	movw	r22, r20
     68c:	62 2b       	or	r22, r18
     68e:	65 bb       	out	0x15, r22	; 21
     690:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
     692:	25 b3       	in	r18, 0x15	; 21
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	ac 01       	movw	r20, r24
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <vDIO_PULLUP_CONNECT+0xda>
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	6a 95       	dec	r22
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <vDIO_PULLUP_CONNECT+0xd6>
     6a4:	ba 01       	movw	r22, r20
     6a6:	60 95       	com	r22
     6a8:	62 23       	and	r22, r18
     6aa:	65 bb       	out	0x15, r22	; 21
     6ac:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(connect==1)
     6ae:	41 30       	cpi	r20, 0x01	; 1
     6b0:	69 f4       	brne	.+26     	; 0x6cc <vDIO_PULLUP_CONNECT+0x106>
		{
			SET_BIT(PORTD,pin);
     6b2:	22 b3       	in	r18, 0x12	; 18
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	ac 01       	movw	r20, r24
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <vDIO_PULLUP_CONNECT+0xfa>
     6bc:	44 0f       	add	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	6a 95       	dec	r22
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <vDIO_PULLUP_CONNECT+0xf6>
     6c4:	ba 01       	movw	r22, r20
     6c6:	62 2b       	or	r22, r18
     6c8:	62 bb       	out	0x12, r22	; 18
     6ca:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
     6cc:	22 b3       	in	r18, 0x12	; 18
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	ac 01       	movw	r20, r24
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <vDIO_PULLUP_CONNECT+0x114>
     6d6:	44 0f       	add	r20, r20
     6d8:	55 1f       	adc	r21, r21
     6da:	6a 95       	dec	r22
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <vDIO_PULLUP_CONNECT+0x110>
     6de:	ba 01       	movw	r22, r20
     6e0:	60 95       	com	r22
     6e2:	62 23       	and	r22, r18
     6e4:	62 bb       	out	0x12, r22	; 18
     6e6:	08 95       	ret

000006e8 <vDIO_WRITE_LOW_NIBBLE>:
		break;
}
}
void vDIO_WRITE_LOW_NIBBLE(unsigned char port,unsigned char value)
{
	value&=0x0f;
     6e8:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
     6ea:	82 34       	cpi	r24, 0x42	; 66
     6ec:	81 f0       	breq	.+32     	; 0x70e <vDIO_WRITE_LOW_NIBBLE+0x26>
     6ee:	83 34       	cpi	r24, 0x43	; 67
     6f0:	18 f4       	brcc	.+6      	; 0x6f8 <vDIO_WRITE_LOW_NIBBLE+0x10>
     6f2:	81 34       	cpi	r24, 0x41	; 65
     6f4:	f1 f4       	brne	.+60     	; 0x732 <vDIO_WRITE_LOW_NIBBLE+0x4a>
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <vDIO_WRITE_LOW_NIBBLE+0x1a>
     6f8:	83 34       	cpi	r24, 0x43	; 67
     6fa:	79 f0       	breq	.+30     	; 0x71a <vDIO_WRITE_LOW_NIBBLE+0x32>
     6fc:	84 34       	cpi	r24, 0x44	; 68
     6fe:	c9 f4       	brne	.+50     	; 0x732 <vDIO_WRITE_LOW_NIBBLE+0x4a>
     700:	12 c0       	rjmp	.+36     	; 0x726 <vDIO_WRITE_LOW_NIBBLE+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     702:	8b b3       	in	r24, 0x1b	; 27
     704:	80 7f       	andi	r24, 0xF0	; 240
     706:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     708:	8b b3       	in	r24, 0x1b	; 27
     70a:	86 2b       	or	r24, r22
     70c:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     70e:	88 b3       	in	r24, 0x18	; 24
     710:	80 7f       	andi	r24, 0xF0	; 240
     712:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     714:	88 b3       	in	r24, 0x18	; 24
     716:	86 2b       	or	r24, r22
     718:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     71a:	85 b3       	in	r24, 0x15	; 21
     71c:	80 7f       	andi	r24, 0xF0	; 240
     71e:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     720:	85 b3       	in	r24, 0x15	; 21
     722:	86 2b       	or	r24, r22
     724:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     726:	82 b3       	in	r24, 0x12	; 18
     728:	80 7f       	andi	r24, 0xF0	; 240
     72a:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     72c:	82 b3       	in	r24, 0x12	; 18
     72e:	68 2b       	or	r22, r24
     730:	62 bb       	out	0x12, r22	; 18
     732:	08 95       	ret

00000734 <vDIO_WRITE_HIGH_NIBBLE>:
	}
}
void vDIO_WRITE_HIGH_NIBBLE(unsigned char port,unsigned char value)
{
	value<<=4;
     734:	62 95       	swap	r22
     736:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
     738:	82 34       	cpi	r24, 0x42	; 66
     73a:	81 f0       	breq	.+32     	; 0x75c <vDIO_WRITE_HIGH_NIBBLE+0x28>
     73c:	83 34       	cpi	r24, 0x43	; 67
     73e:	18 f4       	brcc	.+6      	; 0x746 <vDIO_WRITE_HIGH_NIBBLE+0x12>
     740:	81 34       	cpi	r24, 0x41	; 65
     742:	f1 f4       	brne	.+60     	; 0x780 <vDIO_WRITE_HIGH_NIBBLE+0x4c>
     744:	05 c0       	rjmp	.+10     	; 0x750 <vDIO_WRITE_HIGH_NIBBLE+0x1c>
     746:	83 34       	cpi	r24, 0x43	; 67
     748:	79 f0       	breq	.+30     	; 0x768 <vDIO_WRITE_HIGH_NIBBLE+0x34>
     74a:	84 34       	cpi	r24, 0x44	; 68
     74c:	c9 f4       	brne	.+50     	; 0x780 <vDIO_WRITE_HIGH_NIBBLE+0x4c>
     74e:	12 c0       	rjmp	.+36     	; 0x774 <vDIO_WRITE_HIGH_NIBBLE+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     750:	8b b3       	in	r24, 0x1b	; 27
     752:	8f 70       	andi	r24, 0x0F	; 15
     754:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     756:	8b b3       	in	r24, 0x1b	; 27
     758:	86 2b       	or	r24, r22
     75a:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     75c:	88 b3       	in	r24, 0x18	; 24
     75e:	8f 70       	andi	r24, 0x0F	; 15
     760:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     762:	88 b3       	in	r24, 0x18	; 24
     764:	86 2b       	or	r24, r22
     766:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     768:	85 b3       	in	r24, 0x15	; 21
     76a:	8f 70       	andi	r24, 0x0F	; 15
     76c:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     76e:	85 b3       	in	r24, 0x15	; 21
     770:	86 2b       	or	r24, r22
     772:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     774:	82 b3       	in	r24, 0x12	; 18
     776:	8f 70       	andi	r24, 0x0F	; 15
     778:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     77a:	82 b3       	in	r24, 0x12	; 18
     77c:	68 2b       	or	r22, r24
     77e:	62 bb       	out	0x12, r22	; 18
     780:	08 95       	ret

00000782 <EEPROM_WRITE>:
#include <avr/io.h>
#include "std_macros.h"
#include "STD_TYPES.h"
void EEPROM_WRITE(unsigned short address,unsigned char data)
{
	EEARL=(char)address;
     782:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     784:	9f bb       	out	0x1f, r25	; 31
	EEDR=data;
     786:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
     788:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
     78a:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(EECR,EEWE)==1);
     78c:	e1 99       	sbic	0x1c, 1	; 28
     78e:	fe cf       	rjmp	.-4      	; 0x78c <EEPROM_WRITE+0xa>
}
     790:	08 95       	ret

00000792 <EEPROM_READ>:
unsigned char EEPROM_READ(const unsigned short address)
{
	EEARL=(char)address;
     792:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     794:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR,EEWE);
     796:	e1 9a       	sbi	0x1c, 1	; 28
	return EEDR;
     798:	8d b3       	in	r24, 0x1d	; 29
}
     79a:	08 95       	ret

0000079c <eeprom_readbyte_from_address>:
uint8 eeprom_readbyte_from_address(const uint16 address1)
{
	
	while(((EECR &(1<<EERE))>>EEWE)==1);
     79c:	2c b3       	in	r18, 0x1c	; 28
	EEAR=address1;
     79e:	9f bb       	out	0x1f, r25	; 31
     7a0:	8e bb       	out	0x1e, r24	; 30
	EECR|=(1<<EERE);
     7a2:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     7a4:	8d b3       	in	r24, 0x1d	; 29
}
     7a6:	08 95       	ret

000007a8 <eeprom_readblock_from_address>:
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
     7a8:	dc 01       	movw	r26, r24
	while(((EECR & (1<< EERE)) >>EEWE)==1);
     7aa:	8c b3       	in	r24, 0x1c	; 28
	uint16 counter=0;
	while(counter<size)
     7ac:	41 15       	cp	r20, r1
     7ae:	51 05       	cpc	r21, r1
     7b0:	89 f0       	breq	.+34     	; 0x7d4 <eeprom_readblock_from_address+0x2c>
     7b2:	e6 2f       	mov	r30, r22
     7b4:	f7 2f       	mov	r31, r23
	return EEDR;
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
	while(((EECR &(1<<EERE))>>EEWE)==1);
	EEAR=address1;
	EECR|=(1<<EERE);
	return EEDR;
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
     7ba:	c9 01       	movw	r24, r18
     7bc:	8a 0f       	add	r24, r26
     7be:	9b 1f       	adc	r25, r27
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
	while(counter<size)
	{
		EEAR=address2+counter;
     7c0:	9f bb       	out	0x1f, r25	; 31
     7c2:	8e bb       	out	0x1e, r24	; 30
	    EECR|=(1<<EERE);
     7c4:	e0 9a       	sbi	0x1c, 0	; 28
		*(data1+counter)=EEDR;
     7c6:	8d b3       	in	r24, 0x1d	; 29
     7c8:	81 93       	st	Z+, r24
		counter++;
     7ca:	2f 5f       	subi	r18, 0xFF	; 255
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
	while(counter<size)
     7ce:	24 17       	cp	r18, r20
     7d0:	35 07       	cpc	r19, r21
     7d2:	99 f7       	brne	.-26     	; 0x7ba <eeprom_readblock_from_address+0x12>
     7d4:	08 95       	ret

000007d6 <eeprom_writebyte_to_address>:
		counter++;
	}	
}	
void eeprom_writebyte_to_address(const uint16 address2,const uint8 data2)
{
   while(((EECR & (1<< EERE)) >>EEWE)==1);
     7d6:	2c b3       	in	r18, 0x1c	; 28
   EEAR=address2;
     7d8:	9f bb       	out	0x1f, r25	; 31
     7da:	8e bb       	out	0x1e, r24	; 30
   EECR|=(1<<EERE);
     7dc:	e0 9a       	sbi	0x1c, 0	; 28
   if (EEDR !=data2)
     7de:	8d b3       	in	r24, 0x1d	; 29
     7e0:	86 17       	cp	r24, r22
     7e2:	19 f0       	breq	.+6      	; 0x7ea <eeprom_writebyte_to_address+0x14>
   {
	   EEDR=data2;
     7e4:	6d bb       	out	0x1d, r22	; 29
	   EECR|=(1<<EEMWE);
     7e6:	e2 9a       	sbi	0x1c, 2	; 28
	   EECR|=(1<<EEWE);    
     7e8:	e1 9a       	sbi	0x1c, 1	; 28
     7ea:	08 95       	ret

000007ec <eeprom_writeblock_from_address>:
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
     7ec:	dc 01       	movw	r26, r24
	uint16 counter=0;
	
	while(counter < size)
     7ee:	41 15       	cp	r20, r1
     7f0:	51 05       	cpc	r21, r1
     7f2:	b9 f0       	breq	.+46     	; 0x822 <eeprom_writeblock_from_address+0x36>
     7f4:	e6 2f       	mov	r30, r22
     7f6:	f7 2f       	mov	r31, r23
	   EECR|=(1<<EEWE);    
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
	uint16 counter=0;
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
	
	while(counter < size)
	{
		 while(((EECR & (1<< EERE)) >>EEWE)==1);
     7fc:	8c b3       	in	r24, 0x1c	; 28
	   EEDR=data2;
	   EECR|=(1<<EEMWE);
	   EECR|=(1<<EEWE);    
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
     7fe:	c9 01       	movw	r24, r18
     800:	8a 0f       	add	r24, r26
     802:	9b 1f       	adc	r25, r27
	uint16 counter=0;
	
	while(counter < size)
	{
		 while(((EECR & (1<< EERE)) >>EEWE)==1);
		 EEAR=address2+counter;
     804:	9f bb       	out	0x1f, r25	; 31
     806:	8e bb       	out	0x1e, r24	; 30
		 EECR|=(1<<EERE);
     808:	e0 9a       	sbi	0x1c, 0	; 28
		 if (EEDR != (*(data2+counter)))
     80a:	9d b3       	in	r25, 0x1d	; 29
     80c:	81 91       	ld	r24, Z+
     80e:	98 17       	cp	r25, r24
     810:	19 f0       	breq	.+6      	; 0x818 <eeprom_writeblock_from_address+0x2c>
		 {
			 EEDR=*(data2+counter);
     812:	8d bb       	out	0x1d, r24	; 29
			 EECR|=(1<<EEMWE);
     814:	e2 9a       	sbi	0x1c, 2	; 28
			 EECR|=(1<<EEWE);
     816:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{
			
		}
		counter++;
     818:	2f 5f       	subi	r18, 0xFF	; 255
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
	uint16 counter=0;
	
	while(counter < size)
     81c:	24 17       	cp	r18, r20
     81e:	35 07       	cpc	r19, r21
     820:	69 f7       	brne	.-38     	; 0x7fc <eeprom_writeblock_from_address+0x10>
     822:	08 95       	ret

00000824 <keypad_vinit>:
#include "keybad.h"
void keypad_vinit(void)
{
	vDIO_SET_BIT_DIR(keybad_port,0,1);
     824:	84 e4       	ldi	r24, 0x44	; 68
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,1,1);
     82e:	84 e4       	ldi	r24, 0x44	; 68
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,2,1);
     838:	84 e4       	ldi	r24, 0x44	; 68
     83a:	62 e0       	ldi	r22, 0x02	; 2
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,3,1);
     842:	84 e4       	ldi	r24, 0x44	; 68
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	41 e0       	ldi	r20, 0x01	; 1
     848:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,4,0);
     84c:	84 e4       	ldi	r24, 0x44	; 68
     84e:	64 e0       	ldi	r22, 0x04	; 4
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,5,0);
     856:	84 e4       	ldi	r24, 0x44	; 68
     858:	65 e0       	ldi	r22, 0x05	; 5
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,6,0);
     860:	84 e4       	ldi	r24, 0x44	; 68
     862:	66 e0       	ldi	r22, 0x06	; 6
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,7,0);
     86a:	84 e4       	ldi	r24, 0x44	; 68
     86c:	67 e0       	ldi	r22, 0x07	; 7
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
     874:	84 e4       	ldi	r24, 0x44	; 68
     876:	64 e0       	ldi	r22, 0x04	; 4
     878:	41 e0       	ldi	r20, 0x01	; 1
     87a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
     87e:	84 e4       	ldi	r24, 0x44	; 68
     880:	65 e0       	ldi	r22, 0x05	; 5
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
     888:	84 e4       	ldi	r24, 0x44	; 68
     88a:	66 e0       	ldi	r22, 0x06	; 6
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
     892:	84 e4       	ldi	r24, 0x44	; 68
     894:	67 e0       	ldi	r22, 0x07	; 7
     896:	41 e0       	ldi	r20, 0x01	; 1
     898:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vDIO_PULLUP_CONNECT>
}
     89c:	08 95       	ret

0000089e <keybad_u8read_press>:
char keybad_u8read_press()
{
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	60 97       	sbiw	r28, 0x10	; 16
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','P'},{'4','5','6','M'},{'1','2','3','-'},{'A','0','=','+'}};
     8b6:	de 01       	movw	r26, r28
     8b8:	11 96       	adiw	r26, 0x01	; 1
     8ba:	ea e6       	ldi	r30, 0x6A	; 106
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 e1       	ldi	r24, 0x10	; 16
     8c0:	01 90       	ld	r0, Z+
     8c2:	0d 92       	st	X+, r0
     8c4:	81 50       	subi	r24, 0x01	; 1
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <keybad_u8read_press+0x22>
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
     8c8:	00 e0       	ldi	r16, 0x00	; 0
	{
		vDIO_WRITE_BIT(keybad_port,0,1);
     8ca:	84 e4       	ldi	r24, 0x44	; 68
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,1,1);
     8d4:	84 e4       	ldi	r24, 0x44	; 68
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,2,1);
     8de:	84 e4       	ldi	r24, 0x44	; 68
     8e0:	62 e0       	ldi	r22, 0x02	; 2
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,3,1);
     8e8:	84 e4       	ldi	r24, 0x44	; 68
     8ea:	63 e0       	ldi	r22, 0x03	; 3
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,row,0);
     8f2:	84 e4       	ldi	r24, 0x44	; 68
     8f4:	60 2f       	mov	r22, r16
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		for (colum=0;colum<4;colum++)
     8fc:	10 e0       	ldi	r17, 0x00	; 0
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
}
char keybad_u8read_press()
     8fe:	61 2f       	mov	r22, r17
     900:	6c 5f       	subi	r22, 0xFC	; 252
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for (colum=0;colum<4;colum++)
		{
		val=u8DIO_READ_BIT(keybad_port,(colum+4));
     902:	84 e4       	ldi	r24, 0x44	; 68
     904:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <u8DIO_READ_BIT>
		    if(val==0)
     908:	88 23       	and	r24, r24
     90a:	61 f4       	brne	.+24     	; 0x924 <keybad_u8read_press+0x86>
			{
			returnval=arr[row][colum];
     90c:	e0 2f       	mov	r30, r16
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e1 0f       	add	r30, r17
     91a:	f1 1d       	adc	r31, r1
     91c:	ec 0f       	add	r30, r28
     91e:	fd 1f       	adc	r31, r29
     920:	81 81       	ldd	r24, Z+1	; 0x01
     922:	04 c0       	rjmp	.+8      	; 0x92c <keybad_u8read_press+0x8e>
		vDIO_WRITE_BIT(keybad_port,0,1);
		vDIO_WRITE_BIT(keybad_port,1,1);
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for (colum=0;colum<4;colum++)
     924:	1f 5f       	subi	r17, 0xFF	; 255
     926:	14 30       	cpi	r17, 0x04	; 4
     928:	51 f7       	brne	.-44     	; 0x8fe <keybad_u8read_press+0x60>
     92a:	0b c0       	rjmp	.+22     	; 0x942 <keybad_u8read_press+0xa4>
		{
		break;
		}
	}
	return returnval;
     92c:	60 96       	adiw	r28, 0x10	; 16
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret
char keybad_u8read_press()
{
	char arr[4][4]={{'7','8','9','P'},{'4','5','6','M'},{'1','2','3','-'},{'A','0','=','+'}};
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
     942:	0f 5f       	subi	r16, 0xFF	; 255
     944:	04 30       	cpi	r16, 0x04	; 4
     946:	09 f6       	brne	.-126    	; 0x8ca <keybad_u8read_press+0x2c>
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	f0 cf       	rjmp	.-32     	; 0x92c <keybad_u8read_press+0x8e>

0000094c <LCD_ENABLE>:
	_delay_ms(1);

}
static void LCD_ENABLE(void)
{
	vDIO_WRITE_BIT(LCD_DATA,EN,1);
     94c:	81 e4       	ldi	r24, 0x41	; 65
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     956:	8f e9       	ldi	r24, 0x9F	; 159
     958:	9f e0       	ldi	r25, 0x0F	; 15
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <LCD_ENABLE+0xe>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <LCD_ENABLE+0x14>
     960:	00 00       	nop
	_delay_ms(2);
	vDIO_WRITE_BIT(LCD_DATA,EN,0);
     962:	81 e4       	ldi	r24, 0x41	; 65
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
     96c:	8f e9       	ldi	r24, 0x9F	; 159
     96e:	9f e0       	ldi	r25, 0x0F	; 15
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <LCD_ENABLE+0x24>
     974:	00 c0       	rjmp	.+0      	; 0x976 <LCD_ENABLE+0x2a>
     976:	00 00       	nop
	_delay_ms(2);
	
}
     978:	08 95       	ret

0000097a <LCD_SEND_CHAR>:
	_delay_ms(1);
	#endif
	
}
void LCD_SEND_CHAR( char data)
{
     97a:	cf 93       	push	r28
     97c:	c8 2f       	mov	r28, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,data);
	vDIO_WRITE_BIT(LCD_CONTROL,RS,1);
	LCD_ENABLE();
	#elif defined four_bit_mode
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data>>4);
     97e:	68 2f       	mov	r22, r24
     980:	62 95       	swap	r22
     982:	6f 70       	andi	r22, 0x0F	; 15
     984:	81 e4       	ldi	r24, 0x41	; 65
     986:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,1);
     98a:	81 e4       	ldi	r24, 0x41	; 65
     98c:	62 e0       	ldi	r22, 0x02	; 2
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_ENABLE();
     994:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data);
     998:	81 e4       	ldi	r24, 0x41	; 65
     99a:	6c 2f       	mov	r22, r28
     99c:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,1);
     9a0:	81 e4       	ldi	r24, 0x41	; 65
     9a2:	62 e0       	ldi	r22, 0x02	; 2
     9a4:	41 e0       	ldi	r20, 0x01	; 1
     9a6:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_ENABLE();
     9aa:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_ENABLE>
     9ae:	8f ec       	ldi	r24, 0xCF	; 207
     9b0:	97 e0       	ldi	r25, 0x07	; 7
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <LCD_SEND_CHAR+0x38>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <LCD_SEND_CHAR+0x3e>
     9b8:	00 00       	nop
	#endif
	_delay_ms(1);

}
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <LCD_SEND_CMD>:
	vDIO_WRITE_BIT(LCD_DATA,EN,0);
	_delay_ms(2);
	
}
void LCD_SEND_CMD( char cmd)
{
     9be:	cf 93       	push	r28
     9c0:	c8 2f       	mov	r28, r24
	vDIO_WRITE_PORT(LCD_DATA,cmd);
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
	LCD_ENABLE();
	_delay_ms(1);
	#elif defined four_bit_mode
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,cmd>>4);
     9c2:	68 2f       	mov	r22, r24
     9c4:	62 95       	swap	r22
     9c6:	6f 70       	andi	r22, 0x0F	; 15
     9c8:	81 e4       	ldi	r24, 0x41	; 65
     9ca:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,0);
     9ce:	81 e4       	ldi	r24, 0x41	; 65
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_ENABLE();
     9d8:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,cmd);
     9dc:	81 e4       	ldi	r24, 0x41	; 65
     9de:	6c 2f       	mov	r22, r28
     9e0:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,0);
     9e4:	81 e4       	ldi	r24, 0x41	; 65
     9e6:	62 e0       	ldi	r22, 0x02	; 2
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_ENABLE();
     9ee:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_ENABLE>
     9f2:	8f ec       	ldi	r24, 0xCF	; 207
     9f4:	97 e0       	ldi	r25, 0x07	; 7
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCD_SEND_CMD+0x38>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <LCD_SEND_CMD+0x3e>
     9fc:	00 00       	nop
	#endif
	_delay_ms(1);
	
}
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <LCD_INIT>:
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	91 ee       	ldi	r25, 0xE1	; 225
     a06:	a4 e0       	ldi	r26, 0x04	; 4
     a08:	81 50       	subi	r24, 0x01	; 1
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	a0 40       	sbci	r26, 0x00	; 0
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <LCD_INIT+0x6>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <LCD_INIT+0x10>
     a12:	00 00       	nop
	//LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(1);
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(1);
	#elif defined four_bit_mode
	vDIO_SET_BIT_DIR(LCD_DATA,4,1);
     a14:	81 e4       	ldi	r24, 0x41	; 65
     a16:	64 e0       	ldi	r22, 0x04	; 4
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,5,1);
     a1e:	81 e4       	ldi	r24, 0x41	; 65
     a20:	65 e0       	ldi	r22, 0x05	; 5
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,6,1);
     a28:	81 e4       	ldi	r24, 0x41	; 65
     a2a:	66 e0       	ldi	r22, 0x06	; 6
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,7,1);
     a32:	81 e4       	ldi	r24, 0x41	; 65
     a34:	67 e0       	ldi	r22, 0x07	; 7
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,EN,1);
     a3c:	81 e4       	ldi	r24, 0x41	; 65
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	41 e0       	ldi	r20, 0x01	; 1
     a42:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,RS,1);
     a46:	81 e4       	ldi	r24, 0x41	; 65
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,WR,1);
     a50:	81 e4       	ldi	r24, 0x41	; 65
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_WRITE_BIT(LCD_DATA,WR,0);
     a5a:	81 e4       	ldi	r24, 0x41	; 65
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_SEND_CMD(RET_HOME);
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     a6a:	af e1       	ldi	r26, 0x1F	; 31
     a6c:	be e4       	ldi	r27, 0x4E	; 78
     a6e:	11 97       	sbiw	r26, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <LCD_INIT+0x6c>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <LCD_INIT+0x72>
     a74:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(FOUR_BIT);
     a76:	88 e2       	ldi	r24, 0x28	; 40
     a78:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     a7c:	8f ec       	ldi	r24, 0xCF	; 207
     a7e:	97 e0       	ldi	r25, 0x07	; 7
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <LCD_INIT+0x7e>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <LCD_INIT+0x84>
     a86:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(DISPLAY_CURSOR);
     a88:	8e e0       	ldi	r24, 0x0E	; 14
     a8a:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     a8e:	af ec       	ldi	r26, 0xCF	; 207
     a90:	b7 e0       	ldi	r27, 0x07	; 7
     a92:	11 97       	sbiw	r26, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <LCD_INIT+0x90>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <LCD_INIT+0x96>
     a98:	00 00       	nop
     a9a:	8f e1       	ldi	r24, 0x1F	; 31
     a9c:	9e e4       	ldi	r25, 0x4E	; 78
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <LCD_INIT+0x9c>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <LCD_INIT+0xa2>
     aa4:	00 00       	nop
	_delay_ms(1);
	//LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
	LCD_SEND_CMD(ENTRY_MODE);
     aa6:	86 e0       	ldi	r24, 0x06	; 6
     aa8:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     aac:	af ec       	ldi	r26, 0xCF	; 207
     aae:	b7 e0       	ldi	r27, 0x07	; 7
     ab0:	11 97       	sbiw	r26, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <LCD_INIT+0xae>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <LCD_INIT+0xb4>
     ab6:	00 00       	nop
	_delay_ms(1);
	#endif
	
}
     ab8:	08 95       	ret

00000aba <LCD_clear_screen>:
	_delay_ms(1);
	
}
void LCD_clear_screen(void)
{
	LCD_SEND_CMD(CLR_SCREEN);
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     ac0:	8f e1       	ldi	r24, 0x1F	; 31
     ac2:	9e e4       	ldi	r25, 0x4E	; 78
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <LCD_clear_screen+0xa>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <LCD_clear_screen+0x10>
     aca:	00 00       	nop
	_delay_ms(10);
}
     acc:	08 95       	ret

00000ace <LCD_SEND_STRING>:

void LCD_SEND_STRING( char *data)
{
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     ad4:	88 81       	ld	r24, Y
     ad6:	88 23       	and	r24, r24
     ad8:	31 f0       	breq	.+12     	; 0xae6 <LCD_SEND_STRING+0x18>
{
	LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
     ada:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_SEND_CHAR(*data);
     adc:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
{
	while((*data)!='\0')
     ae0:	89 91       	ld	r24, Y+
     ae2:	88 23       	and	r24, r24
     ae4:	d9 f7       	brne	.-10     	; 0xadc <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
     aec:	28 2f       	mov	r18, r24
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	22 30       	cpi	r18, 0x02	; 2
     af2:	70 f4       	brcc	.+28     	; 0xb10 <LCD_MOVE_CURSOR+0x24>
     af4:	61 31       	cpi	r22, 0x11	; 17
     af6:	70 f4       	brcc	.+28     	; 0xb14 <LCD_MOVE_CURSOR+0x28>
     af8:	66 23       	and	r22, r22
     afa:	71 f0       	breq	.+28     	; 0xb18 <LCD_MOVE_CURSOR+0x2c>
	{
		val=0x80;
	}
	else if(row==1)
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	19 f4       	brne	.+6      	; 0xb06 <LCD_MOVE_CURSOR+0x1a>
	{
		val=0x80+(colum-1);
     b00:	96 2f       	mov	r25, r22
     b02:	91 58       	subi	r25, 0x81	; 129
     b04:	0a c0       	rjmp	.+20     	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
	}
	else if(row==2)
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	41 f4       	brne	.+16     	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
	{
		val=0xC0+(colum-1);
     b0a:	96 2f       	mov	r25, r22
     b0c:	91 54       	subi	r25, 0x41	; 65
     b0e:	05 c0       	rjmp	.+10     	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
	{
		val=0x80;
     b10:	90 e8       	ldi	r25, 0x80	; 128
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
     b14:	90 e8       	ldi	r25, 0x80	; 128
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
     b18:	90 e8       	ldi	r25, 0x80	; 128
	else if(row==2)
	{
		val=0xC0+(colum-1);
	}	
	
	LCD_SEND_CMD(val);
     b1a:	89 2f       	mov	r24, r25
     b1c:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     b20:	8f ec       	ldi	r24, 0xCF	; 207
     b22:	97 e0       	ldi	r25, 0x07	; 7
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <LCD_MOVE_CURSOR+0x38>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <LCD_MOVE_CURSOR+0x3e>
     b2a:	00 00       	nop
	_delay_ms(1);	 
}
     b2c:	08 95       	ret

00000b2e <main>:
unsigned int day=0,month=0,year=0,flag=0,flag1=0,min=0,hou=0,minutes=0,hours=0;
unsigned char digit1,digit2,READ,digit3,digit4;
volatile unsigned char sec=0;
int main(void)
{
	keypad_vinit();
     b2e:	0e 94 12 04 	call	0x824	; 0x824 <keypad_vinit>
	LCD_INIT();
     b32:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_INIT>
// 	SET_BIT(DDRC,1);
// 	SET_BIT(DDRC,2);
// 	SET_BIT(DDRC,3);
// 	SET_BIT(DDRC,4);
// 	SET_BIT(DDRC,5);
	LCD_SEND_CMD(0x0c);
     b36:	8c e0       	ldi	r24, 0x0C	; 12
     b38:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
	

     LCD_SEND_STRING("SET TIME (1)");
     b3c:	8a e7       	ldi	r24, 0x7A	; 122
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(2,1);
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("SET DATA (2)");
     b4c:	87 e8       	ldi	r24, 0x87	; 135
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	94 e3       	ldi	r25, 0x34	; 52
     b58:	ac e0       	ldi	r26, 0x0C	; 12
     b5a:	81 50       	subi	r24, 0x01	; 1
     b5c:	90 40       	sbci	r25, 0x00	; 0
     b5e:	a0 40       	sbci	r26, 0x00	; 0
     b60:	e1 f7       	brne	.-8      	; 0xb5a <main+0x2c>
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <main+0x36>
     b64:	00 00       	nop
	_delay_ms(500);
	TIMER2_overflow_interrupt();
     b66:	0e 94 2b 0a 	call	0x1456	; 0x1456 <TIMER2_overflow_interrupt>
				_delay_ms(150);
				hours=(digit2-48)+10*(digit1-48);
				if(hours>24)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter hour again");
     b6a:	0f 2e       	mov	r0, r31
     b6c:	fd e9       	ldi	r31, 0x9D	; 157
     b6e:	4f 2e       	mov	r4, r31
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	5f 2e       	mov	r5, r31
     b74:	f0 2d       	mov	r31, r0
		{
			if(READ =='1')
			{
				L1:
				LCD_clear_screen();
				LCD_SEND_STRING("HOURS:--");
     b76:	0f 2e       	mov	r0, r31
     b78:	f4 e9       	ldi	r31, 0x94	; 148
     b7a:	af 2e       	mov	r10, r31
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	bf 2e       	mov	r11, r31
     b80:	f0 2d       	mov	r31, r0
					_delay_ms(300);
					goto L1;
				}
				L2:
				LCD_clear_screen();
				LCD_SEND_STRING("MINUTES:--");
     b82:	0f 2e       	mov	r0, r31
     b84:	ff eb       	ldi	r31, 0xBF	; 191
     b86:	8f 2e       	mov	r8, r31
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	9f 2e       	mov	r9, r31
     b8c:	f0 2d       	mov	r31, r0
					_delay_ms(300);
					goto L2;
				}
				L3:
				LCD_clear_screen();
				LCD_SEND_STRING("SECONDS:--");
     b8e:	0f 2e       	mov	r0, r31
     b90:	fc ee       	ldi	r31, 0xEC	; 236
     b92:	6f 2e       	mov	r6, r31
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	7f 2e       	mov	r7, r31
     b98:	f0 2d       	mov	r31, r0
				_delay_ms(150);
				seconds=(digit2-48)+10*(digit1-48);
				if(seconds>60)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter sec again");
     b9a:	0f 2e       	mov	r0, r31
     b9c:	f7 ef       	ldi	r31, 0xF7	; 247
     b9e:	2f 2e       	mov	r2, r31
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	3f 2e       	mov	r3, r31
     ba4:	f0 2d       	mov	r31, r0
					LCD_MOVE_CURSOR(2,1);
					LCD_SEND_STRING("between 01 to 60");
     ba6:	0f 2e       	mov	r0, r31
     ba8:	fb ed       	ldi	r31, 0xDB	; 219
     baa:	cf 2e       	mov	r12, r31
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	df 2e       	mov	r13, r31
     bb0:	f0 2d       	mov	r31, r0
	TIMER2_overflow_interrupt();
	
   while(1)
   { 
	   	 L7:
		READ=keybad_u8read_press();
     bb2:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     bb6:	80 93 9f 01 	sts	0x019F, r24
		if(READ!=notpassed)
     bba:	8f 3f       	cpi	r24, 0xFF	; 255
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <main+0x92>
     bbe:	a8 c2       	rjmp	.+1360   	; 0x1110 <main+0x5e2>
		{
			if(READ =='1')
     bc0:	81 33       	cpi	r24, 0x31	; 49
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <main+0x98>
     bc4:	2b c1       	rjmp	.+598    	; 0xe1c <main+0x2ee>
				if(hours>24)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter hour again");
					LCD_MOVE_CURSOR(2,1);
					LCD_SEND_STRING("between 01 to 24");
     bc6:	ce ea       	ldi	r28, 0xAE	; 174
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
		if(READ!=notpassed)
		{
			if(READ =='1')
			{
				L1:
				LCD_clear_screen();
     bca:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("HOURS:--");
     bce:	c5 01       	movw	r24, r10
     bd0:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,7);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	67 e0       	ldi	r22, 0x07	; 7
     bd8:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     bdc:	8f e7       	ldi	r24, 0x7F	; 127
     bde:	99 ea       	ldi	r25, 0xA9	; 169
     be0:	a3 e0       	ldi	r26, 0x03	; 3
     be2:	81 50       	subi	r24, 0x01	; 1
     be4:	90 40       	sbci	r25, 0x00	; 0
     be6:	a0 40       	sbci	r26, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <main+0xb4>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <main+0xbe>
     bec:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit1=keybad_u8read_press();
     bee:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     bf2:	80 93 a2 01 	sts	0x01A2, r24
					
				}while(digit1==notpassed);
     bf6:	8f 3f       	cpi	r24, 0xFF	; 255
     bf8:	d1 f3       	breq	.-12     	; 0xbee <main+0xc0>
				LCD_SEND_CHAR(digit1);
     bfa:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     bfe:	8f e7       	ldi	r24, 0x7F	; 127
     c00:	99 ea       	ldi	r25, 0xA9	; 169
     c02:	a3 e0       	ldi	r26, 0x03	; 3
     c04:	81 50       	subi	r24, 0x01	; 1
     c06:	90 40       	sbci	r25, 0x00	; 0
     c08:	a0 40       	sbci	r26, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <main+0xd6>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <main+0xe0>
     c0e:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit2=keybad_u8read_press();
     c10:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     c14:	80 93 a0 01 	sts	0x01A0, r24
					
				}while(digit2==notpassed);
     c18:	8f 3f       	cpi	r24, 0xFF	; 255
     c1a:	d1 f3       	breq	.-12     	; 0xc10 <main+0xe2>
				LCD_SEND_CHAR(digit2);
     c1c:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     c20:	8f e7       	ldi	r24, 0x7F	; 127
     c22:	99 ea       	ldi	r25, 0xA9	; 169
     c24:	a3 e0       	ldi	r26, 0x03	; 3
     c26:	81 50       	subi	r24, 0x01	; 1
     c28:	90 40       	sbci	r25, 0x00	; 0
     c2a:	a0 40       	sbci	r26, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <main+0xf8>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <main+0x102>
     c30:	00 00       	nop
				_delay_ms(150);
				hours=(digit2-48)+10*(digit1-48);
     c32:	40 91 a0 01 	lds	r20, 0x01A0
     c36:	80 91 a2 01 	lds	r24, 0x01A2
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	9c 01       	movw	r18, r24
     c42:	22 0f       	add	r18, r18
     c44:	33 1f       	adc	r19, r19
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	82 0f       	add	r24, r18
     c4c:	93 1f       	adc	r25, r19
     c4e:	84 0f       	add	r24, r20
     c50:	91 1d       	adc	r25, r1
     c52:	80 51       	subi	r24, 0x10	; 16
     c54:	92 40       	sbci	r25, 0x02	; 2
     c56:	90 93 8c 01 	sts	0x018C, r25
     c5a:	80 93 8b 01 	sts	0x018B, r24
				if(hours>24)
     c5e:	89 31       	cpi	r24, 0x19	; 25
     c60:	91 05       	cpc	r25, r1
     c62:	b0 f0       	brcs	.+44     	; 0xc90 <main+0x162>
				{
					LCD_clear_screen();
     c64:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
					LCD_SEND_STRING("enter hour again");
     c68:	c2 01       	movw	r24, r4
     c6a:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,1);
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("between 01 to 24");
     c76:	ce 01       	movw	r24, r28
     c78:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	92 e5       	ldi	r25, 0x52	; 82
     c80:	a7 e0       	ldi	r26, 0x07	; 7
     c82:	81 50       	subi	r24, 0x01	; 1
     c84:	90 40       	sbci	r25, 0x00	; 0
     c86:	a0 40       	sbci	r26, 0x00	; 0
     c88:	e1 f7       	brne	.-8      	; 0xc82 <main+0x154>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <main+0x15e>
     c8c:	00 00       	nop
     c8e:	9d cf       	rjmp	.-198    	; 0xbca <main+0x9c>
					_delay_ms(300);
					goto L1;
				}
				L2:
				LCD_clear_screen();
     c90:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("MINUTES:--");
     c94:	c4 01       	movw	r24, r8
     c96:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,9);
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	69 e0       	ldi	r22, 0x09	; 9
     c9e:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     ca2:	8f e7       	ldi	r24, 0x7F	; 127
     ca4:	99 ea       	ldi	r25, 0xA9	; 169
     ca6:	a3 e0       	ldi	r26, 0x03	; 3
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	a0 40       	sbci	r26, 0x00	; 0
     cae:	e1 f7       	brne	.-8      	; 0xca8 <main+0x17a>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <main+0x184>
     cb2:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit1=keybad_u8read_press();
     cb4:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     cb8:	80 93 a2 01 	sts	0x01A2, r24
					
				}while(digit1==notpassed);
     cbc:	8f 3f       	cpi	r24, 0xFF	; 255
     cbe:	d1 f3       	breq	.-12     	; 0xcb4 <main+0x186>
				LCD_SEND_CHAR(digit1);
     cc0:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     cc4:	8f e7       	ldi	r24, 0x7F	; 127
     cc6:	99 ea       	ldi	r25, 0xA9	; 169
     cc8:	a3 e0       	ldi	r26, 0x03	; 3
     cca:	81 50       	subi	r24, 0x01	; 1
     ccc:	90 40       	sbci	r25, 0x00	; 0
     cce:	a0 40       	sbci	r26, 0x00	; 0
     cd0:	e1 f7       	brne	.-8      	; 0xcca <main+0x19c>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <main+0x1a6>
     cd4:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit2=keybad_u8read_press();
     cd6:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     cda:	80 93 a0 01 	sts	0x01A0, r24
					
				}while(digit2==notpassed);
     cde:	8f 3f       	cpi	r24, 0xFF	; 255
     ce0:	d1 f3       	breq	.-12     	; 0xcd6 <main+0x1a8>
				LCD_SEND_CHAR(digit2);
     ce2:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     ce6:	8f e7       	ldi	r24, 0x7F	; 127
     ce8:	99 ea       	ldi	r25, 0xA9	; 169
     cea:	a3 e0       	ldi	r26, 0x03	; 3
     cec:	81 50       	subi	r24, 0x01	; 1
     cee:	90 40       	sbci	r25, 0x00	; 0
     cf0:	a0 40       	sbci	r26, 0x00	; 0
     cf2:	e1 f7       	brne	.-8      	; 0xcec <main+0x1be>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <main+0x1c8>
     cf6:	00 00       	nop
				_delay_ms(150);
				minutes=(digit2-48)+10*(digit1-48);
     cf8:	40 91 a0 01 	lds	r20, 0x01A0
     cfc:	80 91 a2 01 	lds	r24, 0x01A2
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	9c 01       	movw	r18, r24
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	82 0f       	add	r24, r18
     d12:	93 1f       	adc	r25, r19
     d14:	84 0f       	add	r24, r20
     d16:	91 1d       	adc	r25, r1
     d18:	80 51       	subi	r24, 0x10	; 16
     d1a:	92 40       	sbci	r25, 0x02	; 2
     d1c:	90 93 8e 01 	sts	0x018E, r25
     d20:	80 93 8d 01 	sts	0x018D, r24
				if(minutes>60)
     d24:	8d 33       	cpi	r24, 0x3D	; 61
     d26:	91 05       	cpc	r25, r1
     d28:	b8 f0       	brcs	.+46     	; 0xd58 <main+0x22a>
				{
					LCD_clear_screen();
     d2a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
					LCD_SEND_STRING("enter minu again");
     d2e:	8a ec       	ldi	r24, 0xCA	; 202
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,1);
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("between 01 to 60");
     d3e:	c6 01       	movw	r24, r12
     d40:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	92 e5       	ldi	r25, 0x52	; 82
     d48:	a7 e0       	ldi	r26, 0x07	; 7
     d4a:	81 50       	subi	r24, 0x01	; 1
     d4c:	90 40       	sbci	r25, 0x00	; 0
     d4e:	a0 40       	sbci	r26, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <main+0x21c>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <main+0x226>
     d54:	00 00       	nop
     d56:	9c cf       	rjmp	.-200    	; 0xc90 <main+0x162>
					_delay_ms(300);
					goto L2;
				}
				L3:
				LCD_clear_screen();
     d58:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("SECONDS:--");
     d5c:	c3 01       	movw	r24, r6
     d5e:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,9);
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	69 e0       	ldi	r22, 0x09	; 9
     d66:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     d6a:	8f e7       	ldi	r24, 0x7F	; 127
     d6c:	99 ea       	ldi	r25, 0xA9	; 169
     d6e:	a3 e0       	ldi	r26, 0x03	; 3
     d70:	81 50       	subi	r24, 0x01	; 1
     d72:	90 40       	sbci	r25, 0x00	; 0
     d74:	a0 40       	sbci	r26, 0x00	; 0
     d76:	e1 f7       	brne	.-8      	; 0xd70 <main+0x242>
     d78:	00 c0       	rjmp	.+0      	; 0xd7a <main+0x24c>
     d7a:	00 00       	nop
				_delay_ms(150);
				
				do
				{
					digit1=keybad_u8read_press();
     d7c:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     d80:	80 93 a2 01 	sts	0x01A2, r24
					
				}while(digit1==notpassed);
     d84:	8f 3f       	cpi	r24, 0xFF	; 255
     d86:	d1 f3       	breq	.-12     	; 0xd7c <main+0x24e>
				LCD_SEND_CHAR(digit1);
     d88:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	91 ee       	ldi	r25, 0xE1	; 225
     d90:	a4 e0       	ldi	r26, 0x04	; 4
     d92:	81 50       	subi	r24, 0x01	; 1
     d94:	90 40       	sbci	r25, 0x00	; 0
     d96:	a0 40       	sbci	r26, 0x00	; 0
     d98:	e1 f7       	brne	.-8      	; 0xd92 <main+0x264>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <main+0x26e>
     d9c:	00 00       	nop
				_delay_ms(200);
				do
				{
					digit2=keybad_u8read_press();
     d9e:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     da2:	80 93 a0 01 	sts	0x01A0, r24
					
				}while(digit2==notpassed);
     da6:	8f 3f       	cpi	r24, 0xFF	; 255
     da8:	d1 f3       	breq	.-12     	; 0xd9e <main+0x270>
				LCD_SEND_CHAR(digit2);
     daa:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     dae:	8f e7       	ldi	r24, 0x7F	; 127
     db0:	99 ea       	ldi	r25, 0xA9	; 169
     db2:	a3 e0       	ldi	r26, 0x03	; 3
     db4:	81 50       	subi	r24, 0x01	; 1
     db6:	90 40       	sbci	r25, 0x00	; 0
     db8:	a0 40       	sbci	r26, 0x00	; 0
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <main+0x286>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <main+0x290>
     dbe:	00 00       	nop
				_delay_ms(150);
				seconds=(digit2-48)+10*(digit1-48);
     dc0:	90 91 a0 01 	lds	r25, 0x01A0
     dc4:	90 51       	subi	r25, 0x10	; 16
     dc6:	80 91 a2 01 	lds	r24, 0x01A2
     dca:	88 0f       	add	r24, r24
     dcc:	28 2f       	mov	r18, r24
     dce:	22 0f       	add	r18, r18
     dd0:	22 0f       	add	r18, r18
     dd2:	82 0f       	add	r24, r18
     dd4:	98 0f       	add	r25, r24
     dd6:	90 93 9d 01 	sts	0x019D, r25
				if(seconds>60)
     dda:	80 91 9d 01 	lds	r24, 0x019D
     dde:	8d 33       	cpi	r24, 0x3D	; 61
     de0:	b0 f0       	brcs	.+44     	; 0xe0e <main+0x2e0>
				{
					LCD_clear_screen();
     de2:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
					LCD_SEND_STRING("enter sec again");
     de6:	c1 01       	movw	r24, r2
     de8:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,1);
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("between 01 to 60");
     df4:	c6 01       	movw	r24, r12
     df6:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	92 e5       	ldi	r25, 0x52	; 82
     dfe:	a7 e0       	ldi	r26, 0x07	; 7
     e00:	81 50       	subi	r24, 0x01	; 1
     e02:	90 40       	sbci	r25, 0x00	; 0
     e04:	a0 40       	sbci	r26, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <main+0x2d2>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <main+0x2dc>
     e0a:	00 00       	nop
     e0c:	a5 cf       	rjmp	.-182    	; 0xd58 <main+0x22a>
					_delay_ms(300);
					goto L3;
				}
				flag=1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	90 93 96 01 	sts	0x0196, r25
     e16:	80 93 95 01 	sts	0x0195, r24
     e1a:	7a c1       	rjmp	.+756    	; 0x1110 <main+0x5e2>
			}	
			
			
			
					
			else if(READ=='2')
     e1c:	82 33       	cpi	r24, 0x32	; 50
     e1e:	09 f0       	breq	.+2      	; 0xe22 <main+0x2f4>
     e20:	67 c1       	rjmp	.+718    	; 0x10f0 <main+0x5c2>
			{
				
				L4:
				LCD_clear_screen();
				LCD_SEND_STRING("MONTHS:--");
     e22:	c7 e0       	ldi	r28, 0x07	; 7
     e24:	d1 e0       	ldi	r29, 0x01	; 1
				_delay_ms(150);
				month=(digit2-48)+10*(digit1-48);
				if(month>12)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter mon again");
     e26:	01 e1       	ldi	r16, 0x11	; 17
     e28:	11 e0       	ldi	r17, 0x01	; 1
					LCD_MOVE_CURSOR(2,1);
					LCD_SEND_STRING("between 01 to 12");
     e2a:	0f 2e       	mov	r0, r31
     e2c:	f1 e2       	ldi	r31, 0x21	; 33
     e2e:	ef 2e       	mov	r14, r31
     e30:	f1 e0       	ldi	r31, 0x01	; 1
     e32:	ff 2e       	mov	r15, r31
     e34:	f0 2d       	mov	r31, r0
					
			else if(READ=='2')
			{
				
				L4:
				LCD_clear_screen();
     e36:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("MONTHS:--");
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,8);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	68 e0       	ldi	r22, 0x08	; 8
     e44:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     e48:	8f e7       	ldi	r24, 0x7F	; 127
     e4a:	99 ea       	ldi	r25, 0xA9	; 169
     e4c:	a3 e0       	ldi	r26, 0x03	; 3
     e4e:	81 50       	subi	r24, 0x01	; 1
     e50:	90 40       	sbci	r25, 0x00	; 0
     e52:	a0 40       	sbci	r26, 0x00	; 0
     e54:	e1 f7       	brne	.-8      	; 0xe4e <main+0x320>
     e56:	00 c0       	rjmp	.+0      	; 0xe58 <main+0x32a>
     e58:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit1=keybad_u8read_press();
     e5a:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     e5e:	80 93 a2 01 	sts	0x01A2, r24
							
				}while(digit1==notpassed);
     e62:	8f 3f       	cpi	r24, 0xFF	; 255
     e64:	d1 f3       	breq	.-12     	; 0xe5a <main+0x32c>
				LCD_SEND_CHAR(digit1);
     e66:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	91 ee       	ldi	r25, 0xE1	; 225
     e6e:	a4 e0       	ldi	r26, 0x04	; 4
     e70:	81 50       	subi	r24, 0x01	; 1
     e72:	90 40       	sbci	r25, 0x00	; 0
     e74:	a0 40       	sbci	r26, 0x00	; 0
     e76:	e1 f7       	brne	.-8      	; 0xe70 <main+0x342>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <main+0x34c>
     e7a:	00 00       	nop
				_delay_ms(200);
				do
				{
					digit2=keybad_u8read_press();
     e7c:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     e80:	80 93 a0 01 	sts	0x01A0, r24
							
				}while(digit2==notpassed);
     e84:	8f 3f       	cpi	r24, 0xFF	; 255
     e86:	d1 f3       	breq	.-12     	; 0xe7c <main+0x34e>
				LCD_SEND_CHAR(digit2);
     e88:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     e8c:	8f e7       	ldi	r24, 0x7F	; 127
     e8e:	99 ea       	ldi	r25, 0xA9	; 169
     e90:	a3 e0       	ldi	r26, 0x03	; 3
     e92:	81 50       	subi	r24, 0x01	; 1
     e94:	90 40       	sbci	r25, 0x00	; 0
     e96:	a0 40       	sbci	r26, 0x00	; 0
     e98:	e1 f7       	brne	.-8      	; 0xe92 <main+0x364>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <main+0x36e>
     e9c:	00 00       	nop
				_delay_ms(150);
				month=(digit2-48)+10*(digit1-48);
     e9e:	40 91 a0 01 	lds	r20, 0x01A0
     ea2:	80 91 a2 01 	lds	r24, 0x01A2
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	9c 01       	movw	r18, r24
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	84 0f       	add	r24, r20
     ebc:	91 1d       	adc	r25, r1
     ebe:	80 51       	subi	r24, 0x10	; 16
     ec0:	92 40       	sbci	r25, 0x02	; 2
     ec2:	90 93 9a 01 	sts	0x019A, r25
     ec6:	80 93 99 01 	sts	0x0199, r24
				if(month>12)
     eca:	8d 30       	cpi	r24, 0x0D	; 13
     ecc:	91 05       	cpc	r25, r1
     ece:	b0 f0       	brcs	.+44     	; 0xefc <main+0x3ce>
				{
					LCD_clear_screen();
     ed0:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
					LCD_SEND_STRING("enter mon again");
     ed4:	c8 01       	movw	r24, r16
     ed6:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,1);
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("between 01 to 12");
     ee2:	c7 01       	movw	r24, r14
     ee4:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	92 e5       	ldi	r25, 0x52	; 82
     eec:	a7 e0       	ldi	r26, 0x07	; 7
     eee:	81 50       	subi	r24, 0x01	; 1
     ef0:	90 40       	sbci	r25, 0x00	; 0
     ef2:	a0 40       	sbci	r26, 0x00	; 0
     ef4:	e1 f7       	brne	.-8      	; 0xeee <main+0x3c0>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <main+0x3ca>
     ef8:	00 00       	nop
     efa:	9d cf       	rjmp	.-198    	; 0xe36 <main+0x308>
					_delay_ms(300);
					goto L4;
				}
				L5:
				LCD_clear_screen();
				LCD_SEND_STRING("DAYS:--");
     efc:	c2 e3       	ldi	r28, 0x32	; 50
     efe:	d1 e0       	ldi	r29, 0x01	; 1
				_delay_ms(200);
				day=(digit2-48)+10*(digit1-48);
				if(day>30)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter days again");
     f00:	0a e3       	ldi	r16, 0x3A	; 58
     f02:	11 e0       	ldi	r17, 0x01	; 1
					LCD_MOVE_CURSOR(2,1);
					LCD_SEND_STRING("between 01 to 30");
     f04:	0f 2e       	mov	r0, r31
     f06:	fb e4       	ldi	r31, 0x4B	; 75
     f08:	ef 2e       	mov	r14, r31
     f0a:	f1 e0       	ldi	r31, 0x01	; 1
     f0c:	ff 2e       	mov	r15, r31
     f0e:	f0 2d       	mov	r31, r0
					LCD_SEND_STRING("between 01 to 12");
					_delay_ms(300);
					goto L4;
				}
				L5:
				LCD_clear_screen();
     f10:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("DAYS:--");
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,6);
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	66 e0       	ldi	r22, 0x06	; 6
     f1e:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	91 ee       	ldi	r25, 0xE1	; 225
     f26:	a4 e0       	ldi	r26, 0x04	; 4
     f28:	81 50       	subi	r24, 0x01	; 1
     f2a:	90 40       	sbci	r25, 0x00	; 0
     f2c:	a0 40       	sbci	r26, 0x00	; 0
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <main+0x3fa>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <main+0x404>
     f32:	00 00       	nop
				_delay_ms(200);
				do
				{
					digit1=keybad_u8read_press();
     f34:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     f38:	80 93 a2 01 	sts	0x01A2, r24
							
				}while(digit1==notpassed);
     f3c:	8f 3f       	cpi	r24, 0xFF	; 255
     f3e:	d1 f3       	breq	.-12     	; 0xf34 <main+0x406>
				LCD_SEND_CHAR(digit1);
     f40:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     f44:	8f e7       	ldi	r24, 0x7F	; 127
     f46:	99 ea       	ldi	r25, 0xA9	; 169
     f48:	a3 e0       	ldi	r26, 0x03	; 3
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	90 40       	sbci	r25, 0x00	; 0
     f4e:	a0 40       	sbci	r26, 0x00	; 0
     f50:	e1 f7       	brne	.-8      	; 0xf4a <main+0x41c>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <main+0x426>
     f54:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit2=keybad_u8read_press();
     f56:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     f5a:	80 93 a0 01 	sts	0x01A0, r24
							
				}while(digit2==notpassed);
     f5e:	8f 3f       	cpi	r24, 0xFF	; 255
     f60:	d1 f3       	breq	.-12     	; 0xf56 <main+0x428>
				LCD_SEND_CHAR(digit2);
     f62:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	91 ee       	ldi	r25, 0xE1	; 225
     f6a:	a4 e0       	ldi	r26, 0x04	; 4
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	90 40       	sbci	r25, 0x00	; 0
     f70:	a0 40       	sbci	r26, 0x00	; 0
     f72:	e1 f7       	brne	.-8      	; 0xf6c <main+0x43e>
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <main+0x448>
     f76:	00 00       	nop
				_delay_ms(200);
				day=(digit2-48)+10*(digit1-48);
     f78:	40 91 a0 01 	lds	r20, 0x01A0
     f7c:	80 91 a2 01 	lds	r24, 0x01A2
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	9c 01       	movw	r18, r24
     f88:	22 0f       	add	r18, r18
     f8a:	33 1f       	adc	r19, r19
     f8c:	22 0f       	add	r18, r18
     f8e:	33 1f       	adc	r19, r19
     f90:	82 0f       	add	r24, r18
     f92:	93 1f       	adc	r25, r19
     f94:	84 0f       	add	r24, r20
     f96:	91 1d       	adc	r25, r1
     f98:	80 51       	subi	r24, 0x10	; 16
     f9a:	92 40       	sbci	r25, 0x02	; 2
     f9c:	90 93 9c 01 	sts	0x019C, r25
     fa0:	80 93 9b 01 	sts	0x019B, r24
				if(day>30)
     fa4:	8f 31       	cpi	r24, 0x1F	; 31
     fa6:	91 05       	cpc	r25, r1
     fa8:	b0 f0       	brcs	.+44     	; 0xfd6 <main+0x4a8>
				{
					LCD_clear_screen();
     faa:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
					LCD_SEND_STRING("enter days again");
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,1);
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("between 01 to 30");
     fbc:	c7 01       	movw	r24, r14
     fbe:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	92 e5       	ldi	r25, 0x52	; 82
     fc6:	a7 e0       	ldi	r26, 0x07	; 7
     fc8:	81 50       	subi	r24, 0x01	; 1
     fca:	90 40       	sbci	r25, 0x00	; 0
     fcc:	a0 40       	sbci	r26, 0x00	; 0
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <main+0x49a>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <main+0x4a4>
     fd2:	00 00       	nop
     fd4:	9d cf       	rjmp	.-198    	; 0xf10 <main+0x3e2>
					_delay_ms(300);
					goto L5;
				}
				LCD_clear_screen();
     fd6:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("YEARS:----");
     fda:	8c e5       	ldi	r24, 0x5C	; 92
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,7);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	67 e0       	ldi	r22, 0x07	; 7
     fe6:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     fea:	8f e7       	ldi	r24, 0x7F	; 127
     fec:	99 ea       	ldi	r25, 0xA9	; 169
     fee:	a3 e0       	ldi	r26, 0x03	; 3
     ff0:	81 50       	subi	r24, 0x01	; 1
     ff2:	90 40       	sbci	r25, 0x00	; 0
     ff4:	a0 40       	sbci	r26, 0x00	; 0
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <main+0x4c2>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <main+0x4cc>
     ffa:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit1=keybad_u8read_press();
     ffc:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
    1000:	80 93 a2 01 	sts	0x01A2, r24
							
				}while(digit1==notpassed);
    1004:	8f 3f       	cpi	r24, 0xFF	; 255
    1006:	d1 f3       	breq	.-12     	; 0xffc <main+0x4ce>
				LCD_SEND_CHAR(digit1);
    1008:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
    100c:	8f e7       	ldi	r24, 0x7F	; 127
    100e:	99 ea       	ldi	r25, 0xA9	; 169
    1010:	a3 e0       	ldi	r26, 0x03	; 3
    1012:	81 50       	subi	r24, 0x01	; 1
    1014:	90 40       	sbci	r25, 0x00	; 0
    1016:	a0 40       	sbci	r26, 0x00	; 0
    1018:	e1 f7       	brne	.-8      	; 0x1012 <main+0x4e4>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <main+0x4ee>
    101c:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit2=keybad_u8read_press();
    101e:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
    1022:	80 93 a0 01 	sts	0x01A0, r24
							
				}while(digit2==notpassed);
    1026:	8f 3f       	cpi	r24, 0xFF	; 255
    1028:	d1 f3       	breq	.-12     	; 0x101e <main+0x4f0>
				LCD_SEND_CHAR(digit2);
    102a:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
    102e:	8f e7       	ldi	r24, 0x7F	; 127
    1030:	99 ea       	ldi	r25, 0xA9	; 169
    1032:	a3 e0       	ldi	r26, 0x03	; 3
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	90 40       	sbci	r25, 0x00	; 0
    1038:	a0 40       	sbci	r26, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <main+0x506>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <main+0x510>
    103e:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit3=keybad_u8read_press();
    1040:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
    1044:	80 93 a1 01 	sts	0x01A1, r24
							
				}while(digit3==notpassed);
    1048:	8f 3f       	cpi	r24, 0xFF	; 255
    104a:	d1 f3       	breq	.-12     	; 0x1040 <main+0x512>
				LCD_SEND_CHAR(digit3);
    104c:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
    1050:	8f e7       	ldi	r24, 0x7F	; 127
    1052:	99 ea       	ldi	r25, 0xA9	; 169
    1054:	a3 e0       	ldi	r26, 0x03	; 3
    1056:	81 50       	subi	r24, 0x01	; 1
    1058:	90 40       	sbci	r25, 0x00	; 0
    105a:	a0 40       	sbci	r26, 0x00	; 0
    105c:	e1 f7       	brne	.-8      	; 0x1056 <main+0x528>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <main+0x532>
    1060:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit4=keybad_u8read_press();
    1062:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
    1066:	80 93 9e 01 	sts	0x019E, r24
							
				}while(digit4==notpassed);
    106a:	8f 3f       	cpi	r24, 0xFF	; 255
    106c:	d1 f3       	breq	.-12     	; 0x1062 <main+0x534>
				LCD_SEND_CHAR(digit4);
    106e:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
    1072:	8f e7       	ldi	r24, 0x7F	; 127
    1074:	99 ea       	ldi	r25, 0xA9	; 169
    1076:	a3 e0       	ldi	r26, 0x03	; 3
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	90 40       	sbci	r25, 0x00	; 0
    107c:	a0 40       	sbci	r26, 0x00	; 0
    107e:	e1 f7       	brne	.-8      	; 0x1078 <main+0x54a>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <main+0x554>
    1082:	00 00       	nop
				_delay_ms(150);
				year=(digit1-48)*1000+(digit2-48)*100+(digit3-48)*10+(digit4-48);
    1084:	80 91 a0 01 	lds	r24, 0x01A0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	24 e6       	ldi	r18, 0x64	; 100
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	82 9f       	mul	r24, r18
    1090:	b0 01       	movw	r22, r0
    1092:	83 9f       	mul	r24, r19
    1094:	70 0d       	add	r23, r0
    1096:	92 9f       	mul	r25, r18
    1098:	70 0d       	add	r23, r0
    109a:	11 24       	eor	r1, r1
    109c:	80 91 a2 01 	lds	r24, 0x01A2
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	c0 97       	sbiw	r24, 0x30	; 48
    10a4:	28 ee       	ldi	r18, 0xE8	; 232
    10a6:	33 e0       	ldi	r19, 0x03	; 3
    10a8:	82 9f       	mul	r24, r18
    10aa:	a0 01       	movw	r20, r0
    10ac:	83 9f       	mul	r24, r19
    10ae:	50 0d       	add	r21, r0
    10b0:	92 9f       	mul	r25, r18
    10b2:	50 0d       	add	r21, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	46 0f       	add	r20, r22
    10b8:	57 1f       	adc	r21, r23
    10ba:	80 91 a1 01 	lds	r24, 0x01A1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	9c 01       	movw	r18, r24
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	22 0f       	add	r18, r18
    10cc:	33 1f       	adc	r19, r19
    10ce:	82 0f       	add	r24, r18
    10d0:	93 1f       	adc	r25, r19
    10d2:	84 0f       	add	r24, r20
    10d4:	95 1f       	adc	r25, r21
    10d6:	20 91 9e 01 	lds	r18, 0x019E
    10da:	82 0f       	add	r24, r18
    10dc:	91 1d       	adc	r25, r1
    10de:	80 5d       	subi	r24, 0xD0	; 208
    10e0:	94 41       	sbci	r25, 0x14	; 20
    10e2:	90 93 98 01 	sts	0x0198, r25
    10e6:	80 93 97 01 	sts	0x0197, r24
				LCD_clear_screen();
    10ea:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
    10ee:	10 c0       	rjmp	.+32     	; 0x1110 <main+0x5e2>
				
			}            
			else
			{
				LCD_clear_screen();
    10f0:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("WRONG NUMBER");
    10f4:	87 e6       	ldi	r24, 0x67	; 103
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	92 e5       	ldi	r25, 0x52	; 82
    1100:	a7 e0       	ldi	r26, 0x07	; 7
    1102:	81 50       	subi	r24, 0x01	; 1
    1104:	90 40       	sbci	r25, 0x00	; 0
    1106:	a0 40       	sbci	r26, 0x00	; 0
    1108:	e1 f7       	brne	.-8      	; 0x1102 <main+0x5d4>
    110a:	00 c0       	rjmp	.+0      	; 0x110c <main+0x5de>
    110c:	00 00       	nop
    110e:	51 cd       	rjmp	.-1374   	; 0xbb2 <main+0x84>
// 		_delay_ms(5); 
		
		
		
		
		LCD_MOVE_CURSOR(1,1);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("Time:");
    1118:	84 e7       	ldi	r24, 0x74	; 116
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
		LCD_MOVE_CURSOR(1,6);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	66 e0       	ldi	r22, 0x06	; 6
    1124:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
		LCD_SEND_CHAR(hours/10+48);
    1128:	80 91 8b 01 	lds	r24, 0x018B
    112c:	90 91 8c 01 	lds	r25, 0x018C
    1130:	ca e0       	ldi	r28, 0x0A	; 10
    1132:	d0 e0       	ldi	r29, 0x00	; 0
    1134:	be 01       	movw	r22, r28
    1136:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    113a:	86 2f       	mov	r24, r22
    113c:	80 5d       	subi	r24, 0xD0	; 208
    113e:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_CHAR(hours%10+48);
    1142:	80 91 8b 01 	lds	r24, 0x018B
    1146:	90 91 8c 01 	lds	r25, 0x018C
    114a:	be 01       	movw	r22, r28
    114c:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1150:	80 5d       	subi	r24, 0xD0	; 208
    1152:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_STRING(":");
    1156:	0a e7       	ldi	r16, 0x7A	; 122
    1158:	11 e0       	ldi	r17, 0x01	; 1
    115a:	c8 01       	movw	r24, r16
    115c:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
		LCD_SEND_CHAR(minutes/10+48);
    1160:	80 91 8d 01 	lds	r24, 0x018D
    1164:	90 91 8e 01 	lds	r25, 0x018E
    1168:	be 01       	movw	r22, r28
    116a:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    116e:	86 2f       	mov	r24, r22
    1170:	80 5d       	subi	r24, 0xD0	; 208
    1172:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_CHAR(minutes%10+48);
    1176:	80 91 8d 01 	lds	r24, 0x018D
    117a:	90 91 8e 01 	lds	r25, 0x018E
    117e:	be 01       	movw	r22, r28
    1180:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1184:	80 5d       	subi	r24, 0xD0	; 208
    1186:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_STRING(":");
    118a:	c8 01       	movw	r24, r16
    118c:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
		LCD_SEND_CHAR(seconds/10+48);
    1190:	80 91 9d 01 	lds	r24, 0x019D
    1194:	1a e0       	ldi	r17, 0x0A	; 10
    1196:	61 2f       	mov	r22, r17
    1198:	0e 94 36 0a 	call	0x146c	; 0x146c <__udivmodqi4>
    119c:	80 5d       	subi	r24, 0xD0	; 208
    119e:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_CHAR(seconds%10+48);
    11a2:	80 91 9d 01 	lds	r24, 0x019D
    11a6:	61 2f       	mov	r22, r17
    11a8:	0e 94 36 0a 	call	0x146c	; 0x146c <__udivmodqi4>
    11ac:	89 2f       	mov	r24, r25
    11ae:	80 5d       	subi	r24, 0xD0	; 208
    11b0:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_MOVE_CURSOR(2,1);
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("Data:");
    11bc:	8c e7       	ldi	r24, 0x7C	; 124
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
		LCD_MOVE_CURSOR(2,6);
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	66 e0       	ldi	r22, 0x06	; 6
    11c8:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
		LCD_SEND_CHAR(month/10+48);
    11cc:	80 91 99 01 	lds	r24, 0x0199
    11d0:	90 91 9a 01 	lds	r25, 0x019A
    11d4:	be 01       	movw	r22, r28
    11d6:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    11da:	86 2f       	mov	r24, r22
    11dc:	80 5d       	subi	r24, 0xD0	; 208
    11de:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_CHAR(month%10+48);
    11e2:	80 91 99 01 	lds	r24, 0x0199
    11e6:	90 91 9a 01 	lds	r25, 0x019A
    11ea:	be 01       	movw	r22, r28
    11ec:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    11f0:	80 5d       	subi	r24, 0xD0	; 208
    11f2:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_STRING("/");
    11f6:	02 e8       	ldi	r16, 0x82	; 130
    11f8:	11 e0       	ldi	r17, 0x01	; 1
    11fa:	c8 01       	movw	r24, r16
    11fc:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
		LCD_SEND_CHAR(day/10+48);
    1200:	80 91 9b 01 	lds	r24, 0x019B
    1204:	90 91 9c 01 	lds	r25, 0x019C
    1208:	be 01       	movw	r22, r28
    120a:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    120e:	86 2f       	mov	r24, r22
    1210:	80 5d       	subi	r24, 0xD0	; 208
    1212:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_CHAR(day%10+48);
    1216:	80 91 9b 01 	lds	r24, 0x019B
    121a:	90 91 9c 01 	lds	r25, 0x019C
    121e:	be 01       	movw	r22, r28
    1220:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1224:	80 5d       	subi	r24, 0xD0	; 208
    1226:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_STRING("/");
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
		LCD_SEND_CHAR((year/1000) +48);
    1230:	80 91 97 01 	lds	r24, 0x0197
    1234:	90 91 98 01 	lds	r25, 0x0198
    1238:	68 ee       	ldi	r22, 0xE8	; 232
    123a:	73 e0       	ldi	r23, 0x03	; 3
    123c:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1240:	86 2f       	mov	r24, r22
    1242:	80 5d       	subi	r24, 0xD0	; 208
    1244:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_CHAR(((year/100) % 10)+48);
    1248:	80 91 97 01 	lds	r24, 0x0197
    124c:	90 91 98 01 	lds	r25, 0x0198
    1250:	64 e6       	ldi	r22, 0x64	; 100
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1258:	cb 01       	movw	r24, r22
    125a:	be 01       	movw	r22, r28
    125c:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1260:	80 5d       	subi	r24, 0xD0	; 208
    1262:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_CHAR(((year/10) % 10)+48);
    1266:	80 91 97 01 	lds	r24, 0x0197
    126a:	90 91 98 01 	lds	r25, 0x0198
    126e:	be 01       	movw	r22, r28
    1270:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1274:	cb 01       	movw	r24, r22
    1276:	be 01       	movw	r22, r28
    1278:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    127c:	80 5d       	subi	r24, 0xD0	; 208
    127e:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		LCD_SEND_CHAR((year%10) +48);
    1282:	80 91 97 01 	lds	r24, 0x0197
    1286:	90 91 98 01 	lds	r25, 0x0198
    128a:	be 01       	movw	r22, r28
    128c:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1290:	80 5d       	subi	r24, 0xD0	; 208
    1292:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
		if(seconds>=60)
    1296:	80 91 9d 01 	lds	r24, 0x019D
    129a:	8c 33       	cpi	r24, 0x3C	; 60
    129c:	58 f0       	brcs	.+22     	; 0x12b4 <main+0x786>
		{
			seconds=0;
    129e:	10 92 9d 01 	sts	0x019D, r1
			minutes++;
    12a2:	80 91 8d 01 	lds	r24, 0x018D
    12a6:	90 91 8e 01 	lds	r25, 0x018E
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	90 93 8e 01 	sts	0x018E, r25
    12b0:	80 93 8d 01 	sts	0x018D, r24
		}
		if (minutes>=60)
    12b4:	80 91 8d 01 	lds	r24, 0x018D
    12b8:	90 91 8e 01 	lds	r25, 0x018E
    12bc:	8c 33       	cpi	r24, 0x3C	; 60
    12be:	91 05       	cpc	r25, r1
    12c0:	68 f0       	brcs	.+26     	; 0x12dc <main+0x7ae>
		{
			minutes=0;
    12c2:	10 92 8e 01 	sts	0x018E, r1
    12c6:	10 92 8d 01 	sts	0x018D, r1
			hours++;
    12ca:	80 91 8b 01 	lds	r24, 0x018B
    12ce:	90 91 8c 01 	lds	r25, 0x018C
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	90 93 8c 01 	sts	0x018C, r25
    12d8:	80 93 8b 01 	sts	0x018B, r24
		}
		
		if(flag==1&& hours<=12)
    12dc:	20 91 95 01 	lds	r18, 0x0195
    12e0:	30 91 96 01 	lds	r19, 0x0196
    12e4:	21 30       	cpi	r18, 0x01	; 1
    12e6:	31 05       	cpc	r19, r1
    12e8:	81 f4       	brne	.+32     	; 0x130a <main+0x7dc>
    12ea:	80 91 8b 01 	lds	r24, 0x018B
    12ee:	90 91 8c 01 	lds	r25, 0x018C
    12f2:	8d 30       	cpi	r24, 0x0D	; 13
    12f4:	91 05       	cpc	r25, r1
    12f6:	48 f4       	brcc	.+18     	; 0x130a <main+0x7dc>
		{
			LCD_MOVE_CURSOR(1,15);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	6f e0       	ldi	r22, 0x0F	; 15
    12fc:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("AM");
    1300:	84 e8       	ldi	r24, 0x84	; 132
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
    1308:	29 c0       	rjmp	.+82     	; 0x135c <main+0x82e>
		}
		else if(hours>= 13 && hours<=24 && flag==1)
    130a:	80 91 8b 01 	lds	r24, 0x018B
    130e:	90 91 8c 01 	lds	r25, 0x018C
    1312:	0d 97       	sbiw	r24, 0x0d	; 13
    1314:	8c 30       	cpi	r24, 0x0C	; 12
    1316:	91 05       	cpc	r25, r1
    1318:	08 f5       	brcc	.+66     	; 0x135c <main+0x82e>
    131a:	21 30       	cpi	r18, 0x01	; 1
    131c:	31 05       	cpc	r19, r1
    131e:	f1 f4       	brne	.+60     	; 0x135c <main+0x82e>
		{
			day++;
    1320:	80 91 9b 01 	lds	r24, 0x019B
    1324:	90 91 9c 01 	lds	r25, 0x019C
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	90 93 9c 01 	sts	0x019C, r25
    132e:	80 93 9b 01 	sts	0x019B, r24
			LCD_MOVE_CURSOR(1,15);
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	6f e0       	ldi	r22, 0x0F	; 15
    1336:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("PM");
    133a:	87 e8       	ldi	r24, 0x87	; 135
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
			hours=hours-12;
    1342:	80 91 8b 01 	lds	r24, 0x018B
    1346:	90 91 8c 01 	lds	r25, 0x018C
    134a:	0c 97       	sbiw	r24, 0x0c	; 12
    134c:	90 93 8c 01 	sts	0x018C, r25
    1350:	80 93 8b 01 	sts	0x018B, r24
			flag=0;
    1354:	10 92 96 01 	sts	0x0196, r1
    1358:	10 92 95 01 	sts	0x0195, r1
		}
		
		if (day>=31)
    135c:	80 91 9b 01 	lds	r24, 0x019B
    1360:	90 91 9c 01 	lds	r25, 0x019C
    1364:	8f 31       	cpi	r24, 0x1F	; 31
    1366:	91 05       	cpc	r25, r1
    1368:	78 f0       	brcs	.+30     	; 0x1388 <main+0x85a>
		{
			day=1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	90 93 9c 01 	sts	0x019C, r25
    1372:	80 93 9b 01 	sts	0x019B, r24
			month++;
    1376:	80 91 99 01 	lds	r24, 0x0199
    137a:	90 91 9a 01 	lds	r25, 0x019A
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	90 93 9a 01 	sts	0x019A, r25
    1384:	80 93 99 01 	sts	0x0199, r24
		}
		if (month>=13)
    1388:	80 91 99 01 	lds	r24, 0x0199
    138c:	90 91 9a 01 	lds	r25, 0x019A
    1390:	8d 30       	cpi	r24, 0x0D	; 13
    1392:	91 05       	cpc	r25, r1
    1394:	08 f4       	brcc	.+2      	; 0x1398 <main+0x86a>
    1396:	0d cc       	rjmp	.-2022   	; 0xbb2 <main+0x84>
		{
			month=1;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	90 93 9a 01 	sts	0x019A, r25
    13a0:	80 93 99 01 	sts	0x0199, r24
			year++;		
    13a4:	80 91 97 01 	lds	r24, 0x0197
    13a8:	90 91 98 01 	lds	r25, 0x0198
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	90 93 98 01 	sts	0x0198, r25
    13b2:	80 93 97 01 	sts	0x0197, r24
    13b6:	fd cb       	rjmp	.-2054   	; 0xbb2 <main+0x84>

000013b8 <__vector_5>:
							 														
    }
}

ISR(TIMER2_OVF_vect)
{
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	8f 93       	push	r24
	seconds++;
    13c4:	80 91 9d 01 	lds	r24, 0x019D
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	80 93 9d 01 	sts	0x019D, r24
	sec++;
    13ce:	80 91 8a 01 	lds	r24, 0x018A
    13d2:	8f 5f       	subi	r24, 0xFF	; 255
    13d4:	80 93 8a 01 	sts	0x018A, r24
    13d8:	8f 91       	pop	r24
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <TIMER_CTC_INIT>:
#include "std_macros.h"
#define  F_CPU 8000000UL
	#include <util/delay.h>
void TIMER_CTC_INIT(void)
{
	sei();
    13e4:	78 94       	sei
	SET_BIT(TCCR0,CS00);//clock
    13e6:	83 b7       	in	r24, 0x33	; 51
    13e8:	81 60       	ori	r24, 0x01	; 1
    13ea:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);//clock
    13ec:	83 b7       	in	r24, 0x33	; 51
    13ee:	84 60       	ori	r24, 0x04	; 4
    13f0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);//mode
    13f2:	83 b7       	in	r24, 0x33	; 51
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	83 bf       	out	0x33, r24	; 51
	OCR0=80;
    13f8:	80 e5       	ldi	r24, 0x50	; 80
    13fa:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TIMSK,OCIE0);//enable
    13fc:	89 b7       	in	r24, 0x39	; 57
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	89 bf       	out	0x39, r24	; 57
}
    1402:	08 95       	ret

00001404 <TIMER_WAVA_NONPWM>:
void TIMER_WAVA_NONPWM(void)
{
	SET_BIT(DDRB,3);
    1404:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,WGM01);
    1406:	83 b7       	in	r24, 0x33	; 51
    1408:	88 60       	ori	r24, 0x08	; 8
    140a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM00);
    140c:	83 b7       	in	r24, 0x33	; 51
    140e:	80 64       	ori	r24, 0x40	; 64
    1410:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
    1412:	80 e4       	ldi	r24, 0x40	; 64
    1414:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
    1416:	83 b7       	in	r24, 0x33	; 51
    1418:	81 60       	ori	r24, 0x01	; 1
    141a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    141c:	83 b7       	in	r24, 0x33	; 51
    141e:	84 60       	ori	r24, 0x04	; 4
    1420:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00);
    1422:	83 b7       	in	r24, 0x33	; 51
    1424:	80 61       	ori	r24, 0x10	; 16
    1426:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1428:	83 b7       	in	r24, 0x33	; 51
    142a:	80 62       	ori	r24, 0x20	; 32
    142c:	83 bf       	out	0x33, r24	; 51
}	
    142e:	08 95       	ret

00001430 <TIMER_PWM_phase_correct>:
void TIMER_PWM_phase_correct(void)
{
	SET_BIT(DDRB,3);
    1430:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,WGM00);
    1432:	83 b7       	in	r24, 0x33	; 51
    1434:	80 64       	ori	r24, 0x40	; 64
    1436:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
    1438:	80 e4       	ldi	r24, 0x40	; 64
    143a:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
    143c:	83 b7       	in	r24, 0x33	; 51
    143e:	81 60       	ori	r24, 0x01	; 1
    1440:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1442:	83 b7       	in	r24, 0x33	; 51
    1444:	84 60       	ori	r24, 0x04	; 4
    1446:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00);
    1448:	83 b7       	in	r24, 0x33	; 51
    144a:	80 61       	ori	r24, 0x10	; 16
    144c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    144e:	83 b7       	in	r24, 0x33	; 51
    1450:	80 62       	ori	r24, 0x20	; 32
    1452:	83 bf       	out	0x33, r24	; 51
	
}
    1454:	08 95       	ret

00001456 <TIMER2_overflow_interrupt>:
void TIMER2_overflow_interrupt(void)
{
	SET_BIT(ASSR,AS2);
    1456:	82 b5       	in	r24, 0x22	; 34
    1458:	88 60       	ori	r24, 0x08	; 8
    145a:	82 bd       	out	0x22, r24	; 34
	//SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS22);
    145c:	85 b5       	in	r24, 0x25	; 37
    145e:	84 60       	ori	r24, 0x04	; 4
    1460:	85 bd       	out	0x25, r24	; 37
	sei();
    1462:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
    1464:	89 b7       	in	r24, 0x39	; 57
    1466:	80 64       	ori	r24, 0x40	; 64
    1468:	89 bf       	out	0x39, r24	; 57
    146a:	08 95       	ret

0000146c <__udivmodqi4>:
    146c:	99 1b       	sub	r25, r25
    146e:	79 e0       	ldi	r23, 0x09	; 9
    1470:	04 c0       	rjmp	.+8      	; 0x147a <__udivmodqi4_ep>

00001472 <__udivmodqi4_loop>:
    1472:	99 1f       	adc	r25, r25
    1474:	96 17       	cp	r25, r22
    1476:	08 f0       	brcs	.+2      	; 0x147a <__udivmodqi4_ep>
    1478:	96 1b       	sub	r25, r22

0000147a <__udivmodqi4_ep>:
    147a:	88 1f       	adc	r24, r24
    147c:	7a 95       	dec	r23
    147e:	c9 f7       	brne	.-14     	; 0x1472 <__udivmodqi4_loop>
    1480:	80 95       	com	r24
    1482:	08 95       	ret

00001484 <__udivmodhi4>:
    1484:	aa 1b       	sub	r26, r26
    1486:	bb 1b       	sub	r27, r27
    1488:	51 e1       	ldi	r21, 0x11	; 17
    148a:	07 c0       	rjmp	.+14     	; 0x149a <__udivmodhi4_ep>

0000148c <__udivmodhi4_loop>:
    148c:	aa 1f       	adc	r26, r26
    148e:	bb 1f       	adc	r27, r27
    1490:	a6 17       	cp	r26, r22
    1492:	b7 07       	cpc	r27, r23
    1494:	10 f0       	brcs	.+4      	; 0x149a <__udivmodhi4_ep>
    1496:	a6 1b       	sub	r26, r22
    1498:	b7 0b       	sbc	r27, r23

0000149a <__udivmodhi4_ep>:
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	5a 95       	dec	r21
    14a0:	a9 f7       	brne	.-22     	; 0x148c <__udivmodhi4_loop>
    14a2:	80 95       	com	r24
    14a4:	90 95       	com	r25
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	08 95       	ret

000014ac <_exit>:
    14ac:	f8 94       	cli

000014ae <__stop_program>:
    14ae:	ff cf       	rjmp	.-2      	; 0x14ae <__stop_program>
