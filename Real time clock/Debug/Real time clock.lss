
Real time clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  000010f4  00001188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800114  00800114  0000123c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001990  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018bc  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063b  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c39  00000000  00000000  00003a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d1  00000000  00000000  00004978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce3  00000000  00000000  00004e49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 05 	call	0xb2e	; 0xb2e <main>
      8a:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seven_seg_init>:
#include "DIO.H"
#define cc
void seven_seg_init(char port)
{
vDIO_SET_PORT(port,0Xff);
      92:	6f ef       	ldi	r22, 0xFF	; 255
      94:	0e 94 5f 02 	call	0x4be	; 0x4be <vDIO_SET_PORT>
	
}
      98:	08 95       	ret

0000009a <seven_seg_write>:
void seven_seg_write(char port,char number)
{
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
      9e:	cd b7       	in	r28, 0x3d	; 61
      a0:	de b7       	in	r29, 0x3e	; 62
      a2:	2a 97       	sbiw	r28, 0x0a	; 10
      a4:	0f b6       	in	r0, 0x3f	; 63
      a6:	f8 94       	cli
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	0f be       	out	0x3f, r0	; 63
      ac:	cd bf       	out	0x3d, r28	; 61
unsigned char arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
      ae:	de 01       	movw	r26, r28
      b0:	11 96       	adiw	r26, 0x01	; 1
      b2:	e0 e6       	ldi	r30, 0x60	; 96
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	9a e0       	ldi	r25, 0x0A	; 10
      b8:	01 90       	ld	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	91 50       	subi	r25, 0x01	; 1
      be:	e1 f7       	brne	.-8      	; 0xb8 <seven_seg_write+0x1e>
vDIO_WRITE_PORT(port,arr[number]);
      c0:	fe 01       	movw	r30, r28
      c2:	e6 0f       	add	r30, r22
      c4:	f1 1d       	adc	r31, r1
      c6:	61 81       	ldd	r22, Z+1	; 0x01
      c8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <vDIO_WRITE_PORT>
}
      cc:	2a 96       	adiw	r28, 0x0a	; 10
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	f8 94       	cli
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	0f be       	out	0x3f, r0	; 63
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <seven_seg_bcd_init>:
void seven_seg_bcd_init(unsigned char port)
{
      de:	cf 93       	push	r28
      e0:	c8 2f       	mov	r28, r24
	vDIO_SET_BIT_DIR(port,0,1);
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(port,1,1);
      ea:	8c 2f       	mov	r24, r28
      ec:	61 e0       	ldi	r22, 0x01	; 1
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(port,2,1);
      f4:	8c 2f       	mov	r24, r28
      f6:	62 e0       	ldi	r22, 0x02	; 2
      f8:	41 e0       	ldi	r20, 0x01	; 1
      fa:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(port,3,1);
      fe:	8c 2f       	mov	r24, r28
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
}
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <seven_seg_bcd_write_low>:
void seven_seg_bcd_write_low(unsigned char port,unsigned char value)
{
	vDIO_WRITE_LOW_NIBBLE(port, value);
     10c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <vDIO_WRITE_LOW_NIBBLE>
	
}
     110:	08 95       	ret

00000112 <seven_seg_bcd_write_high>:
void seven_seg_bcd_write_high(unsigned char port,unsigned char value)
{
	
	vDIO_WRITE_HIGH_NIBBLE(port, value);
     112:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
}
     116:	08 95       	ret

00000118 <vDIO_SET_BIT_DIR>:
#include "std_macros.h"
#include "DIO.h"

void vDIO_SET_BIT_DIR(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
     118:	84 34       	cpi	r24, 0x44	; 68
     11a:	09 f4       	brne	.+2      	; 0x11e <vDIO_SET_BIT_DIR+0x6>
     11c:	71 c0       	rjmp	.+226    	; 0x200 <vDIO_SET_BIT_DIR+0xe8>
     11e:	85 34       	cpi	r24, 0x45	; 69
     120:	48 f4       	brcc	.+18     	; 0x134 <vDIO_SET_BIT_DIR+0x1c>
     122:	82 34       	cpi	r24, 0x42	; 66
     124:	99 f1       	breq	.+102    	; 0x18c <vDIO_SET_BIT_DIR+0x74>
     126:	83 34       	cpi	r24, 0x43	; 67
     128:	08 f0       	brcs	.+2      	; 0x12c <vDIO_SET_BIT_DIR+0x14>
     12a:	4d c0       	rjmp	.+154    	; 0x1c6 <vDIO_SET_BIT_DIR+0xae>
     12c:	81 34       	cpi	r24, 0x41	; 65
     12e:	09 f0       	breq	.+2      	; 0x132 <vDIO_SET_BIT_DIR+0x1a>
     130:	83 c0       	rjmp	.+262    	; 0x238 <vDIO_SET_BIT_DIR+0x120>
     132:	0f c0       	rjmp	.+30     	; 0x152 <vDIO_SET_BIT_DIR+0x3a>
     134:	82 36       	cpi	r24, 0x62	; 98
     136:	51 f1       	breq	.+84     	; 0x18c <vDIO_SET_BIT_DIR+0x74>
     138:	83 36       	cpi	r24, 0x63	; 99
     13a:	20 f4       	brcc	.+8      	; 0x144 <vDIO_SET_BIT_DIR+0x2c>
     13c:	81 36       	cpi	r24, 0x61	; 97
     13e:	09 f0       	breq	.+2      	; 0x142 <vDIO_SET_BIT_DIR+0x2a>
     140:	7b c0       	rjmp	.+246    	; 0x238 <vDIO_SET_BIT_DIR+0x120>
     142:	07 c0       	rjmp	.+14     	; 0x152 <vDIO_SET_BIT_DIR+0x3a>
     144:	83 36       	cpi	r24, 0x63	; 99
     146:	09 f4       	brne	.+2      	; 0x14a <vDIO_SET_BIT_DIR+0x32>
     148:	3e c0       	rjmp	.+124    	; 0x1c6 <vDIO_SET_BIT_DIR+0xae>
     14a:	84 36       	cpi	r24, 0x64	; 100
     14c:	09 f0       	breq	.+2      	; 0x150 <vDIO_SET_BIT_DIR+0x38>
     14e:	74 c0       	rjmp	.+232    	; 0x238 <vDIO_SET_BIT_DIR+0x120>
     150:	57 c0       	rjmp	.+174    	; 0x200 <vDIO_SET_BIT_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
     152:	41 30       	cpi	r20, 0x01	; 1
     154:	69 f4       	brne	.+26     	; 0x170 <vDIO_SET_BIT_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
     156:	2a b3       	in	r18, 0x1a	; 26
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	ac 01       	movw	r20, r24
     15e:	02 c0       	rjmp	.+4      	; 0x164 <vDIO_SET_BIT_DIR+0x4c>
     160:	44 0f       	add	r20, r20
     162:	55 1f       	adc	r21, r21
     164:	6a 95       	dec	r22
     166:	e2 f7       	brpl	.-8      	; 0x160 <vDIO_SET_BIT_DIR+0x48>
     168:	ba 01       	movw	r22, r20
     16a:	62 2b       	or	r22, r18
     16c:	6a bb       	out	0x1a, r22	; 26
     16e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
     170:	2a b3       	in	r18, 0x1a	; 26
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	ac 01       	movw	r20, r24
     178:	02 c0       	rjmp	.+4      	; 0x17e <vDIO_SET_BIT_DIR+0x66>
     17a:	44 0f       	add	r20, r20
     17c:	55 1f       	adc	r21, r21
     17e:	6a 95       	dec	r22
     180:	e2 f7       	brpl	.-8      	; 0x17a <vDIO_SET_BIT_DIR+0x62>
     182:	ba 01       	movw	r22, r20
     184:	60 95       	com	r22
     186:	62 23       	and	r22, r18
     188:	6a bb       	out	0x1a, r22	; 26
     18a:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
     18c:	41 30       	cpi	r20, 0x01	; 1
     18e:	69 f4       	brne	.+26     	; 0x1aa <vDIO_SET_BIT_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
     190:	27 b3       	in	r18, 0x17	; 23
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	ac 01       	movw	r20, r24
     198:	02 c0       	rjmp	.+4      	; 0x19e <vDIO_SET_BIT_DIR+0x86>
     19a:	44 0f       	add	r20, r20
     19c:	55 1f       	adc	r21, r21
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <vDIO_SET_BIT_DIR+0x82>
     1a2:	ba 01       	movw	r22, r20
     1a4:	62 2b       	or	r22, r18
     1a6:	67 bb       	out	0x17, r22	; 23
     1a8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
     1aa:	27 b3       	in	r18, 0x17	; 23
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	ac 01       	movw	r20, r24
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <vDIO_SET_BIT_DIR+0xa0>
     1b4:	44 0f       	add	r20, r20
     1b6:	55 1f       	adc	r21, r21
     1b8:	6a 95       	dec	r22
     1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <vDIO_SET_BIT_DIR+0x9c>
     1bc:	ba 01       	movw	r22, r20
     1be:	60 95       	com	r22
     1c0:	62 23       	and	r22, r18
     1c2:	67 bb       	out	0x17, r22	; 23
     1c4:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(dir==1)
     1c6:	41 30       	cpi	r20, 0x01	; 1
     1c8:	69 f4       	brne	.+26     	; 0x1e4 <vDIO_SET_BIT_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
     1ca:	24 b3       	in	r18, 0x14	; 20
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	ac 01       	movw	r20, r24
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <vDIO_SET_BIT_DIR+0xc0>
     1d4:	44 0f       	add	r20, r20
     1d6:	55 1f       	adc	r21, r21
     1d8:	6a 95       	dec	r22
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <vDIO_SET_BIT_DIR+0xbc>
     1dc:	ba 01       	movw	r22, r20
     1de:	62 2b       	or	r22, r18
     1e0:	64 bb       	out	0x14, r22	; 20
     1e2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
     1e4:	24 b3       	in	r18, 0x14	; 20
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	ac 01       	movw	r20, r24
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <vDIO_SET_BIT_DIR+0xda>
     1ee:	44 0f       	add	r20, r20
     1f0:	55 1f       	adc	r21, r21
     1f2:	6a 95       	dec	r22
     1f4:	e2 f7       	brpl	.-8      	; 0x1ee <vDIO_SET_BIT_DIR+0xd6>
     1f6:	ba 01       	movw	r22, r20
     1f8:	60 95       	com	r22
     1fa:	62 23       	and	r22, r18
     1fc:	64 bb       	out	0x14, r22	; 20
     1fe:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
     200:	41 30       	cpi	r20, 0x01	; 1
     202:	69 f4       	brne	.+26     	; 0x21e <vDIO_SET_BIT_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
     204:	21 b3       	in	r18, 0x11	; 17
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	ac 01       	movw	r20, r24
     20c:	02 c0       	rjmp	.+4      	; 0x212 <vDIO_SET_BIT_DIR+0xfa>
     20e:	44 0f       	add	r20, r20
     210:	55 1f       	adc	r21, r21
     212:	6a 95       	dec	r22
     214:	e2 f7       	brpl	.-8      	; 0x20e <vDIO_SET_BIT_DIR+0xf6>
     216:	ba 01       	movw	r22, r20
     218:	62 2b       	or	r22, r18
     21a:	61 bb       	out	0x11, r22	; 17
     21c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
     21e:	21 b3       	in	r18, 0x11	; 17
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	ac 01       	movw	r20, r24
     226:	02 c0       	rjmp	.+4      	; 0x22c <vDIO_SET_BIT_DIR+0x114>
     228:	44 0f       	add	r20, r20
     22a:	55 1f       	adc	r21, r21
     22c:	6a 95       	dec	r22
     22e:	e2 f7       	brpl	.-8      	; 0x228 <vDIO_SET_BIT_DIR+0x110>
     230:	ba 01       	movw	r22, r20
     232:	60 95       	com	r22
     234:	62 23       	and	r22, r18
     236:	61 bb       	out	0x11, r22	; 17
     238:	08 95       	ret

0000023a <vDIO_WRITE_BIT>:
		
	}
}
void vDIO_WRITE_BIT(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
     23a:	84 34       	cpi	r24, 0x44	; 68
     23c:	09 f4       	brne	.+2      	; 0x240 <vDIO_WRITE_BIT+0x6>
     23e:	71 c0       	rjmp	.+226    	; 0x322 <vDIO_WRITE_BIT+0xe8>
     240:	85 34       	cpi	r24, 0x45	; 69
     242:	48 f4       	brcc	.+18     	; 0x256 <vDIO_WRITE_BIT+0x1c>
     244:	82 34       	cpi	r24, 0x42	; 66
     246:	99 f1       	breq	.+102    	; 0x2ae <vDIO_WRITE_BIT+0x74>
     248:	83 34       	cpi	r24, 0x43	; 67
     24a:	08 f0       	brcs	.+2      	; 0x24e <vDIO_WRITE_BIT+0x14>
     24c:	4d c0       	rjmp	.+154    	; 0x2e8 <vDIO_WRITE_BIT+0xae>
     24e:	81 34       	cpi	r24, 0x41	; 65
     250:	09 f0       	breq	.+2      	; 0x254 <vDIO_WRITE_BIT+0x1a>
     252:	83 c0       	rjmp	.+262    	; 0x35a <vDIO_WRITE_BIT+0x120>
     254:	0f c0       	rjmp	.+30     	; 0x274 <vDIO_WRITE_BIT+0x3a>
     256:	82 36       	cpi	r24, 0x62	; 98
     258:	51 f1       	breq	.+84     	; 0x2ae <vDIO_WRITE_BIT+0x74>
     25a:	83 36       	cpi	r24, 0x63	; 99
     25c:	20 f4       	brcc	.+8      	; 0x266 <vDIO_WRITE_BIT+0x2c>
     25e:	81 36       	cpi	r24, 0x61	; 97
     260:	09 f0       	breq	.+2      	; 0x264 <vDIO_WRITE_BIT+0x2a>
     262:	7b c0       	rjmp	.+246    	; 0x35a <vDIO_WRITE_BIT+0x120>
     264:	07 c0       	rjmp	.+14     	; 0x274 <vDIO_WRITE_BIT+0x3a>
     266:	83 36       	cpi	r24, 0x63	; 99
     268:	09 f4       	brne	.+2      	; 0x26c <vDIO_WRITE_BIT+0x32>
     26a:	3e c0       	rjmp	.+124    	; 0x2e8 <vDIO_WRITE_BIT+0xae>
     26c:	84 36       	cpi	r24, 0x64	; 100
     26e:	09 f0       	breq	.+2      	; 0x272 <vDIO_WRITE_BIT+0x38>
     270:	74 c0       	rjmp	.+232    	; 0x35a <vDIO_WRITE_BIT+0x120>
     272:	57 c0       	rjmp	.+174    	; 0x322 <vDIO_WRITE_BIT+0xe8>
  {
	case'A':
	case'a':
	if(val==1)
     274:	41 30       	cpi	r20, 0x01	; 1
     276:	69 f4       	brne	.+26     	; 0x292 <vDIO_WRITE_BIT+0x58>
	{
		SET_BIT(PORTA,pin);
     278:	2b b3       	in	r18, 0x1b	; 27
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	ac 01       	movw	r20, r24
     280:	02 c0       	rjmp	.+4      	; 0x286 <vDIO_WRITE_BIT+0x4c>
     282:	44 0f       	add	r20, r20
     284:	55 1f       	adc	r21, r21
     286:	6a 95       	dec	r22
     288:	e2 f7       	brpl	.-8      	; 0x282 <vDIO_WRITE_BIT+0x48>
     28a:	ba 01       	movw	r22, r20
     28c:	62 2b       	or	r22, r18
     28e:	6b bb       	out	0x1b, r22	; 27
     290:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTA,pin);
     292:	2b b3       	in	r18, 0x1b	; 27
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	ac 01       	movw	r20, r24
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <vDIO_WRITE_BIT+0x66>
     29c:	44 0f       	add	r20, r20
     29e:	55 1f       	adc	r21, r21
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <vDIO_WRITE_BIT+0x62>
     2a4:	ba 01       	movw	r22, r20
     2a6:	60 95       	com	r22
     2a8:	62 23       	and	r22, r18
     2aa:	6b bb       	out	0x1b, r22	; 27
     2ac:	08 95       	ret
	}
	break;
	case'B':
	case'b':
	if(val==1)
     2ae:	41 30       	cpi	r20, 0x01	; 1
     2b0:	69 f4       	brne	.+26     	; 0x2cc <vDIO_WRITE_BIT+0x92>
	{
		SET_BIT(PORTB,pin);
     2b2:	28 b3       	in	r18, 0x18	; 24
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	ac 01       	movw	r20, r24
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <vDIO_WRITE_BIT+0x86>
     2bc:	44 0f       	add	r20, r20
     2be:	55 1f       	adc	r21, r21
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <vDIO_WRITE_BIT+0x82>
     2c4:	ba 01       	movw	r22, r20
     2c6:	62 2b       	or	r22, r18
     2c8:	68 bb       	out	0x18, r22	; 24
     2ca:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTB,pin);
     2cc:	28 b3       	in	r18, 0x18	; 24
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	ac 01       	movw	r20, r24
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <vDIO_WRITE_BIT+0xa0>
     2d6:	44 0f       	add	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	6a 95       	dec	r22
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <vDIO_WRITE_BIT+0x9c>
     2de:	ba 01       	movw	r22, r20
     2e0:	60 95       	com	r22
     2e2:	62 23       	and	r22, r18
     2e4:	68 bb       	out	0x18, r22	; 24
     2e6:	08 95       	ret
	}
	break;
	case'C':
	case'c':
	if(val==1)
     2e8:	41 30       	cpi	r20, 0x01	; 1
     2ea:	69 f4       	brne	.+26     	; 0x306 <vDIO_WRITE_BIT+0xcc>
	{
		SET_BIT(PORTC,pin);
     2ec:	25 b3       	in	r18, 0x15	; 21
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	ac 01       	movw	r20, r24
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <vDIO_WRITE_BIT+0xc0>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	6a 95       	dec	r22
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <vDIO_WRITE_BIT+0xbc>
     2fe:	ba 01       	movw	r22, r20
     300:	62 2b       	or	r22, r18
     302:	65 bb       	out	0x15, r22	; 21
     304:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTC,pin);
     306:	25 b3       	in	r18, 0x15	; 21
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	ac 01       	movw	r20, r24
     30e:	02 c0       	rjmp	.+4      	; 0x314 <vDIO_WRITE_BIT+0xda>
     310:	44 0f       	add	r20, r20
     312:	55 1f       	adc	r21, r21
     314:	6a 95       	dec	r22
     316:	e2 f7       	brpl	.-8      	; 0x310 <vDIO_WRITE_BIT+0xd6>
     318:	ba 01       	movw	r22, r20
     31a:	60 95       	com	r22
     31c:	62 23       	and	r22, r18
     31e:	65 bb       	out	0x15, r22	; 21
     320:	08 95       	ret
	}
	break;
	case'D':
	case'd':
	if(val==1)
     322:	41 30       	cpi	r20, 0x01	; 1
     324:	69 f4       	brne	.+26     	; 0x340 <vDIO_WRITE_BIT+0x106>
	{
		SET_BIT(PORTD,pin);
     326:	22 b3       	in	r18, 0x12	; 18
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	ac 01       	movw	r20, r24
     32e:	02 c0       	rjmp	.+4      	; 0x334 <vDIO_WRITE_BIT+0xfa>
     330:	44 0f       	add	r20, r20
     332:	55 1f       	adc	r21, r21
     334:	6a 95       	dec	r22
     336:	e2 f7       	brpl	.-8      	; 0x330 <vDIO_WRITE_BIT+0xf6>
     338:	ba 01       	movw	r22, r20
     33a:	62 2b       	or	r22, r18
     33c:	62 bb       	out	0x12, r22	; 18
     33e:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTD,pin);
     340:	22 b3       	in	r18, 0x12	; 18
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	ac 01       	movw	r20, r24
     348:	02 c0       	rjmp	.+4      	; 0x34e <vDIO_WRITE_BIT+0x114>
     34a:	44 0f       	add	r20, r20
     34c:	55 1f       	adc	r21, r21
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <vDIO_WRITE_BIT+0x110>
     352:	ba 01       	movw	r22, r20
     354:	60 95       	com	r22
     356:	62 23       	and	r22, r18
     358:	62 bb       	out	0x12, r22	; 18
     35a:	08 95       	ret

0000035c <vDIO_TOGGLE_BIT>:
	
  }
}
void vDIO_TOGGLE_BIT(unsigned char port,unsigned char pin)
{
switch(port)
     35c:	84 34       	cpi	r24, 0x44	; 68
     35e:	09 f4       	brne	.+2      	; 0x362 <vDIO_TOGGLE_BIT+0x6>
     360:	3d c0       	rjmp	.+122    	; 0x3dc <vDIO_TOGGLE_BIT+0x80>
     362:	85 34       	cpi	r24, 0x45	; 69
     364:	40 f4       	brcc	.+16     	; 0x376 <vDIO_TOGGLE_BIT+0x1a>
     366:	82 34       	cpi	r24, 0x42	; 66
     368:	f9 f0       	breq	.+62     	; 0x3a8 <vDIO_TOGGLE_BIT+0x4c>
     36a:	83 34       	cpi	r24, 0x43	; 67
     36c:	50 f5       	brcc	.+84     	; 0x3c2 <vDIO_TOGGLE_BIT+0x66>
     36e:	81 34       	cpi	r24, 0x41	; 65
     370:	09 f0       	breq	.+2      	; 0x374 <vDIO_TOGGLE_BIT+0x18>
     372:	40 c0       	rjmp	.+128    	; 0x3f4 <vDIO_TOGGLE_BIT+0x98>
     374:	0c c0       	rjmp	.+24     	; 0x38e <vDIO_TOGGLE_BIT+0x32>
     376:	82 36       	cpi	r24, 0x62	; 98
     378:	b9 f0       	breq	.+46     	; 0x3a8 <vDIO_TOGGLE_BIT+0x4c>
     37a:	83 36       	cpi	r24, 0x63	; 99
     37c:	18 f4       	brcc	.+6      	; 0x384 <vDIO_TOGGLE_BIT+0x28>
     37e:	81 36       	cpi	r24, 0x61	; 97
     380:	c9 f5       	brne	.+114    	; 0x3f4 <vDIO_TOGGLE_BIT+0x98>
     382:	05 c0       	rjmp	.+10     	; 0x38e <vDIO_TOGGLE_BIT+0x32>
     384:	83 36       	cpi	r24, 0x63	; 99
     386:	e9 f0       	breq	.+58     	; 0x3c2 <vDIO_TOGGLE_BIT+0x66>
     388:	84 36       	cpi	r24, 0x64	; 100
     38a:	a1 f5       	brne	.+104    	; 0x3f4 <vDIO_TOGGLE_BIT+0x98>
     38c:	27 c0       	rjmp	.+78     	; 0x3dc <vDIO_TOGGLE_BIT+0x80>
{
	case'A':
	case'a':
	TOGGAL_BIT(PORTA,pin);
     38e:	2b b3       	in	r18, 0x1b	; 27
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	ac 01       	movw	r20, r24
     396:	02 c0       	rjmp	.+4      	; 0x39c <vDIO_TOGGLE_BIT+0x40>
     398:	44 0f       	add	r20, r20
     39a:	55 1f       	adc	r21, r21
     39c:	6a 95       	dec	r22
     39e:	e2 f7       	brpl	.-8      	; 0x398 <vDIO_TOGGLE_BIT+0x3c>
     3a0:	ba 01       	movw	r22, r20
     3a2:	62 27       	eor	r22, r18
     3a4:	6b bb       	out	0x1b, r22	; 27
	break;
     3a6:	08 95       	ret
	case'B':
	case'b':
	TOGGAL_BIT(PORTB,pin);
     3a8:	28 b3       	in	r18, 0x18	; 24
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	ac 01       	movw	r20, r24
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <vDIO_TOGGLE_BIT+0x5a>
     3b2:	44 0f       	add	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	6a 95       	dec	r22
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <vDIO_TOGGLE_BIT+0x56>
     3ba:	ba 01       	movw	r22, r20
     3bc:	62 27       	eor	r22, r18
     3be:	68 bb       	out	0x18, r22	; 24
	break;
     3c0:	08 95       	ret
	case'C':
	case'c':
	TOGGAL_BIT(PORTC,pin);
     3c2:	25 b3       	in	r18, 0x15	; 21
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	ac 01       	movw	r20, r24
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <vDIO_TOGGLE_BIT+0x74>
     3cc:	44 0f       	add	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	6a 95       	dec	r22
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <vDIO_TOGGLE_BIT+0x70>
     3d4:	ba 01       	movw	r22, r20
     3d6:	62 27       	eor	r22, r18
     3d8:	65 bb       	out	0x15, r22	; 21
	break;
     3da:	08 95       	ret
	case'D':
	case'd':
	TOGGAL_BIT(PORTD,pin);
     3dc:	22 b3       	in	r18, 0x12	; 18
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	ac 01       	movw	r20, r24
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <vDIO_TOGGLE_BIT+0x8e>
     3e6:	44 0f       	add	r20, r20
     3e8:	55 1f       	adc	r21, r21
     3ea:	6a 95       	dec	r22
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <vDIO_TOGGLE_BIT+0x8a>
     3ee:	ba 01       	movw	r22, r20
     3f0:	62 27       	eor	r22, r18
     3f2:	62 bb       	out	0x12, r22	; 18
     3f4:	08 95       	ret

000003f6 <u8DIO_READ_BIT>:
}		
}
unsigned char u8DIO_READ_BIT(unsigned char port, unsigned char pin)
{

	switch(port)
     3f6:	84 34       	cpi	r24, 0x44	; 68
     3f8:	09 f4       	brne	.+2      	; 0x3fc <u8DIO_READ_BIT+0x6>
     3fa:	4e c0       	rjmp	.+156    	; 0x498 <u8DIO_READ_BIT+0xa2>
     3fc:	85 34       	cpi	r24, 0x45	; 69
     3fe:	40 f4       	brcc	.+16     	; 0x410 <u8DIO_READ_BIT+0x1a>
     400:	82 34       	cpi	r24, 0x42	; 66
     402:	31 f1       	breq	.+76     	; 0x450 <u8DIO_READ_BIT+0x5a>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	b0 f5       	brcc	.+108    	; 0x474 <u8DIO_READ_BIT+0x7e>
     408:	81 34       	cpi	r24, 0x41	; 65
     40a:	09 f0       	breq	.+2      	; 0x40e <u8DIO_READ_BIT+0x18>
     40c:	57 c0       	rjmp	.+174    	; 0x4bc <u8DIO_READ_BIT+0xc6>
     40e:	0e c0       	rjmp	.+28     	; 0x42c <u8DIO_READ_BIT+0x36>
     410:	82 36       	cpi	r24, 0x62	; 98
     412:	f1 f0       	breq	.+60     	; 0x450 <u8DIO_READ_BIT+0x5a>
     414:	83 36       	cpi	r24, 0x63	; 99
     416:	20 f4       	brcc	.+8      	; 0x420 <u8DIO_READ_BIT+0x2a>
     418:	81 36       	cpi	r24, 0x61	; 97
     41a:	09 f0       	breq	.+2      	; 0x41e <u8DIO_READ_BIT+0x28>
     41c:	4f c0       	rjmp	.+158    	; 0x4bc <u8DIO_READ_BIT+0xc6>
     41e:	06 c0       	rjmp	.+12     	; 0x42c <u8DIO_READ_BIT+0x36>
     420:	83 36       	cpi	r24, 0x63	; 99
     422:	41 f1       	breq	.+80     	; 0x474 <u8DIO_READ_BIT+0x7e>
     424:	84 36       	cpi	r24, 0x64	; 100
     426:	09 f0       	breq	.+2      	; 0x42a <u8DIO_READ_BIT+0x34>
     428:	49 c0       	rjmp	.+146    	; 0x4bc <u8DIO_READ_BIT+0xc6>
     42a:	36 c0       	rjmp	.+108    	; 0x498 <u8DIO_READ_BIT+0xa2>
	{
		case'A':
		case'a':
		return READ_BIT(PINA,pin);
     42c:	29 b3       	in	r18, 0x19	; 25
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	06 2e       	mov	r0, r22
     434:	02 c0       	rjmp	.+4      	; 0x43a <u8DIO_READ_BIT+0x44>
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	0a 94       	dec	r0
     43c:	e2 f7       	brpl	.-8      	; 0x436 <u8DIO_READ_BIT+0x40>
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	82 23       	and	r24, r18
     442:	93 23       	and	r25, r19
     444:	02 c0       	rjmp	.+4      	; 0x44a <u8DIO_READ_BIT+0x54>
     446:	95 95       	asr	r25
     448:	87 95       	ror	r24
     44a:	6a 95       	dec	r22
     44c:	e2 f7       	brpl	.-8      	; 0x446 <u8DIO_READ_BIT+0x50>
     44e:	08 95       	ret
		break;
		case'B':
		case'b':
		return READ_BIT(PINB,pin);
     450:	26 b3       	in	r18, 0x16	; 22
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	06 2e       	mov	r0, r22
     458:	02 c0       	rjmp	.+4      	; 0x45e <u8DIO_READ_BIT+0x68>
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <u8DIO_READ_BIT+0x64>
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	82 23       	and	r24, r18
     466:	93 23       	and	r25, r19
     468:	02 c0       	rjmp	.+4      	; 0x46e <u8DIO_READ_BIT+0x78>
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <u8DIO_READ_BIT+0x74>
     472:	08 95       	ret
		break;
		case'C':
		case'c':
		return READ_BIT(PINC,pin);
     474:	23 b3       	in	r18, 0x13	; 19
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	06 2e       	mov	r0, r22
     47c:	02 c0       	rjmp	.+4      	; 0x482 <u8DIO_READ_BIT+0x8c>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	0a 94       	dec	r0
     484:	e2 f7       	brpl	.-8      	; 0x47e <u8DIO_READ_BIT+0x88>
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	82 23       	and	r24, r18
     48a:	93 23       	and	r25, r19
     48c:	02 c0       	rjmp	.+4      	; 0x492 <u8DIO_READ_BIT+0x9c>
     48e:	95 95       	asr	r25
     490:	87 95       	ror	r24
     492:	6a 95       	dec	r22
     494:	e2 f7       	brpl	.-8      	; 0x48e <u8DIO_READ_BIT+0x98>
     496:	08 95       	ret
		break;
		case'D':
		case'd':
		return READ_BIT(PIND,pin);
     498:	20 b3       	in	r18, 0x10	; 16
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	06 2e       	mov	r0, r22
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <u8DIO_READ_BIT+0xb0>
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	0a 94       	dec	r0
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <u8DIO_READ_BIT+0xac>
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	82 23       	and	r24, r18
     4ae:	93 23       	and	r25, r19
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <u8DIO_READ_BIT+0xc0>
     4b2:	95 95       	asr	r25
     4b4:	87 95       	ror	r24
     4b6:	6a 95       	dec	r22
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <u8DIO_READ_BIT+0xbc>
     4ba:	08 95       	ret
		break;
		default:
		break;
   }
}
     4bc:	08 95       	ret

000004be <vDIO_SET_PORT>:
void vDIO_SET_PORT( unsigned char port,unsigned char dir)
{
	switch(port)
     4be:	84 34       	cpi	r24, 0x44	; 68
     4c0:	d9 f0       	breq	.+54     	; 0x4f8 <vDIO_SET_PORT+0x3a>
     4c2:	85 34       	cpi	r24, 0x45	; 69
     4c4:	38 f4       	brcc	.+14     	; 0x4d4 <vDIO_SET_PORT+0x16>
     4c6:	82 34       	cpi	r24, 0x42	; 66
     4c8:	99 f0       	breq	.+38     	; 0x4f0 <vDIO_SET_PORT+0x32>
     4ca:	83 34       	cpi	r24, 0x43	; 67
     4cc:	98 f4       	brcc	.+38     	; 0x4f4 <vDIO_SET_PORT+0x36>
     4ce:	81 34       	cpi	r24, 0x41	; 65
     4d0:	a1 f4       	brne	.+40     	; 0x4fa <vDIO_SET_PORT+0x3c>
     4d2:	0c c0       	rjmp	.+24     	; 0x4ec <vDIO_SET_PORT+0x2e>
     4d4:	82 36       	cpi	r24, 0x62	; 98
     4d6:	61 f0       	breq	.+24     	; 0x4f0 <vDIO_SET_PORT+0x32>
     4d8:	83 36       	cpi	r24, 0x63	; 99
     4da:	18 f4       	brcc	.+6      	; 0x4e2 <vDIO_SET_PORT+0x24>
     4dc:	81 36       	cpi	r24, 0x61	; 97
     4de:	69 f4       	brne	.+26     	; 0x4fa <vDIO_SET_PORT+0x3c>
     4e0:	05 c0       	rjmp	.+10     	; 0x4ec <vDIO_SET_PORT+0x2e>
     4e2:	83 36       	cpi	r24, 0x63	; 99
     4e4:	39 f0       	breq	.+14     	; 0x4f4 <vDIO_SET_PORT+0x36>
     4e6:	84 36       	cpi	r24, 0x64	; 100
     4e8:	41 f4       	brne	.+16     	; 0x4fa <vDIO_SET_PORT+0x3c>
     4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <vDIO_SET_PORT+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
     4ec:	6a bb       	out	0x1a, r22	; 26
		break;
     4ee:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
     4f0:	67 bb       	out	0x17, r22	; 23
		break;
     4f2:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
     4f4:	64 bb       	out	0x14, r22	; 20
		break;
     4f6:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
     4f8:	61 bb       	out	0x11, r22	; 17
     4fa:	08 95       	ret

000004fc <vDIO_WRITE_PORT>:
		break;
	}
}
void vDIO_WRITE_PORT(unsigned char port,unsigned char val)
{
	switch(port)
     4fc:	84 34       	cpi	r24, 0x44	; 68
     4fe:	d9 f0       	breq	.+54     	; 0x536 <vDIO_WRITE_PORT+0x3a>
     500:	85 34       	cpi	r24, 0x45	; 69
     502:	38 f4       	brcc	.+14     	; 0x512 <vDIO_WRITE_PORT+0x16>
     504:	82 34       	cpi	r24, 0x42	; 66
     506:	99 f0       	breq	.+38     	; 0x52e <vDIO_WRITE_PORT+0x32>
     508:	83 34       	cpi	r24, 0x43	; 67
     50a:	98 f4       	brcc	.+38     	; 0x532 <vDIO_WRITE_PORT+0x36>
     50c:	81 34       	cpi	r24, 0x41	; 65
     50e:	a1 f4       	brne	.+40     	; 0x538 <vDIO_WRITE_PORT+0x3c>
     510:	0c c0       	rjmp	.+24     	; 0x52a <vDIO_WRITE_PORT+0x2e>
     512:	82 36       	cpi	r24, 0x62	; 98
     514:	61 f0       	breq	.+24     	; 0x52e <vDIO_WRITE_PORT+0x32>
     516:	83 36       	cpi	r24, 0x63	; 99
     518:	18 f4       	brcc	.+6      	; 0x520 <vDIO_WRITE_PORT+0x24>
     51a:	81 36       	cpi	r24, 0x61	; 97
     51c:	69 f4       	brne	.+26     	; 0x538 <vDIO_WRITE_PORT+0x3c>
     51e:	05 c0       	rjmp	.+10     	; 0x52a <vDIO_WRITE_PORT+0x2e>
     520:	83 36       	cpi	r24, 0x63	; 99
     522:	39 f0       	breq	.+14     	; 0x532 <vDIO_WRITE_PORT+0x36>
     524:	84 36       	cpi	r24, 0x64	; 100
     526:	41 f4       	brne	.+16     	; 0x538 <vDIO_WRITE_PORT+0x3c>
     528:	06 c0       	rjmp	.+12     	; 0x536 <vDIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
     52a:	6b bb       	out	0x1b, r22	; 27
		break;
     52c:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
     52e:	68 bb       	out	0x18, r22	; 24
		break;
     530:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
     532:	65 bb       	out	0x15, r22	; 21
		break;
     534:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
     536:	62 bb       	out	0x12, r22	; 18
     538:	08 95       	ret

0000053a <u8DIO_READ_PORT>:
	}
}
unsigned char u8DIO_READ_PORT(unsigned char port)
{
	unsigned char ret_val;
	switch(port)
     53a:	84 34       	cpi	r24, 0x44	; 68
     53c:	d9 f0       	breq	.+54     	; 0x574 <u8DIO_READ_PORT+0x3a>
     53e:	85 34       	cpi	r24, 0x45	; 69
     540:	38 f4       	brcc	.+14     	; 0x550 <u8DIO_READ_PORT+0x16>
     542:	82 34       	cpi	r24, 0x42	; 66
     544:	99 f0       	breq	.+38     	; 0x56c <u8DIO_READ_PORT+0x32>
     546:	83 34       	cpi	r24, 0x43	; 67
     548:	98 f4       	brcc	.+38     	; 0x570 <u8DIO_READ_PORT+0x36>
     54a:	81 34       	cpi	r24, 0x41	; 65
     54c:	a1 f4       	brne	.+40     	; 0x576 <u8DIO_READ_PORT+0x3c>
     54e:	0c c0       	rjmp	.+24     	; 0x568 <u8DIO_READ_PORT+0x2e>
     550:	82 36       	cpi	r24, 0x62	; 98
     552:	61 f0       	breq	.+24     	; 0x56c <u8DIO_READ_PORT+0x32>
     554:	83 36       	cpi	r24, 0x63	; 99
     556:	18 f4       	brcc	.+6      	; 0x55e <u8DIO_READ_PORT+0x24>
     558:	81 36       	cpi	r24, 0x61	; 97
     55a:	69 f4       	brne	.+26     	; 0x576 <u8DIO_READ_PORT+0x3c>
     55c:	05 c0       	rjmp	.+10     	; 0x568 <u8DIO_READ_PORT+0x2e>
     55e:	83 36       	cpi	r24, 0x63	; 99
     560:	39 f0       	breq	.+14     	; 0x570 <u8DIO_READ_PORT+0x36>
     562:	84 36       	cpi	r24, 0x64	; 100
     564:	41 f4       	brne	.+16     	; 0x576 <u8DIO_READ_PORT+0x3c>
     566:	06 c0       	rjmp	.+12     	; 0x574 <u8DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		ret_val=PINA;
     568:	89 b3       	in	r24, 0x19	; 25
		break;
     56a:	08 95       	ret
		case 'B':
		case 'b':
		ret_val=PINB;
     56c:	86 b3       	in	r24, 0x16	; 22
		break;
     56e:	08 95       	ret
		case 'C':
		case 'c':
		ret_val=PINC;
     570:	83 b3       	in	r24, 0x13	; 19
		break;
     572:	08 95       	ret
		case 'D':
		case 'd':
		ret_val=PIND;
     574:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;	
		
	}
}
     576:	08 95       	ret

00000578 <vDIO_TOGGLE_PORT>:
void vDIO_TOGGLE_PORT(unsigned char port)
{
	switch(port)
     578:	84 34       	cpi	r24, 0x44	; 68
     57a:	09 f1       	breq	.+66     	; 0x5be <vDIO_TOGGLE_PORT+0x46>
     57c:	85 34       	cpi	r24, 0x45	; 69
     57e:	38 f4       	brcc	.+14     	; 0x58e <vDIO_TOGGLE_PORT+0x16>
     580:	82 34       	cpi	r24, 0x42	; 66
     582:	a9 f0       	breq	.+42     	; 0x5ae <vDIO_TOGGLE_PORT+0x36>
     584:	83 34       	cpi	r24, 0x43	; 67
     586:	b8 f4       	brcc	.+46     	; 0x5b6 <vDIO_TOGGLE_PORT+0x3e>
     588:	81 34       	cpi	r24, 0x41	; 65
     58a:	e1 f4       	brne	.+56     	; 0x5c4 <vDIO_TOGGLE_PORT+0x4c>
     58c:	0c c0       	rjmp	.+24     	; 0x5a6 <vDIO_TOGGLE_PORT+0x2e>
     58e:	82 36       	cpi	r24, 0x62	; 98
     590:	71 f0       	breq	.+28     	; 0x5ae <vDIO_TOGGLE_PORT+0x36>
     592:	83 36       	cpi	r24, 0x63	; 99
     594:	18 f4       	brcc	.+6      	; 0x59c <vDIO_TOGGLE_PORT+0x24>
     596:	81 36       	cpi	r24, 0x61	; 97
     598:	a9 f4       	brne	.+42     	; 0x5c4 <vDIO_TOGGLE_PORT+0x4c>
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <vDIO_TOGGLE_PORT+0x2e>
     59c:	83 36       	cpi	r24, 0x63	; 99
     59e:	59 f0       	breq	.+22     	; 0x5b6 <vDIO_TOGGLE_PORT+0x3e>
     5a0:	84 36       	cpi	r24, 0x64	; 100
     5a2:	81 f4       	brne	.+32     	; 0x5c4 <vDIO_TOGGLE_PORT+0x4c>
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <vDIO_TOGGLE_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     5a6:	8b b3       	in	r24, 0x1b	; 27
     5a8:	80 95       	com	r24
     5aa:	8b bb       	out	0x1b, r24	; 27
		break;
     5ac:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     5ae:	88 b3       	in	r24, 0x18	; 24
     5b0:	80 95       	com	r24
     5b2:	88 bb       	out	0x18, r24	; 24
		break;
     5b4:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     5b6:	85 b3       	in	r24, 0x15	; 21
     5b8:	80 95       	com	r24
     5ba:	85 bb       	out	0x15, r24	; 21
		break;
     5bc:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     5be:	82 b3       	in	r24, 0x12	; 18
     5c0:	80 95       	com	r24
     5c2:	82 bb       	out	0x12, r24	; 18
     5c4:	08 95       	ret

000005c6 <vDIO_PULLUP_CONNECT>:
		break;
	}
}
void vDIO_PULLUP_CONNECT(unsigned char port,unsigned char pin,unsigned char connect)
{
	switch(port)
     5c6:	84 34       	cpi	r24, 0x44	; 68
     5c8:	09 f4       	brne	.+2      	; 0x5cc <vDIO_PULLUP_CONNECT+0x6>
     5ca:	71 c0       	rjmp	.+226    	; 0x6ae <vDIO_PULLUP_CONNECT+0xe8>
     5cc:	85 34       	cpi	r24, 0x45	; 69
     5ce:	48 f4       	brcc	.+18     	; 0x5e2 <vDIO_PULLUP_CONNECT+0x1c>
     5d0:	82 34       	cpi	r24, 0x42	; 66
     5d2:	99 f1       	breq	.+102    	; 0x63a <vDIO_PULLUP_CONNECT+0x74>
     5d4:	83 34       	cpi	r24, 0x43	; 67
     5d6:	08 f0       	brcs	.+2      	; 0x5da <vDIO_PULLUP_CONNECT+0x14>
     5d8:	4d c0       	rjmp	.+154    	; 0x674 <vDIO_PULLUP_CONNECT+0xae>
     5da:	81 34       	cpi	r24, 0x41	; 65
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <vDIO_PULLUP_CONNECT+0x1a>
     5de:	83 c0       	rjmp	.+262    	; 0x6e6 <vDIO_PULLUP_CONNECT+0x120>
     5e0:	0f c0       	rjmp	.+30     	; 0x600 <vDIO_PULLUP_CONNECT+0x3a>
     5e2:	82 36       	cpi	r24, 0x62	; 98
     5e4:	51 f1       	breq	.+84     	; 0x63a <vDIO_PULLUP_CONNECT+0x74>
     5e6:	83 36       	cpi	r24, 0x63	; 99
     5e8:	20 f4       	brcc	.+8      	; 0x5f2 <vDIO_PULLUP_CONNECT+0x2c>
     5ea:	81 36       	cpi	r24, 0x61	; 97
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <vDIO_PULLUP_CONNECT+0x2a>
     5ee:	7b c0       	rjmp	.+246    	; 0x6e6 <vDIO_PULLUP_CONNECT+0x120>
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <vDIO_PULLUP_CONNECT+0x3a>
     5f2:	83 36       	cpi	r24, 0x63	; 99
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <vDIO_PULLUP_CONNECT+0x32>
     5f6:	3e c0       	rjmp	.+124    	; 0x674 <vDIO_PULLUP_CONNECT+0xae>
     5f8:	84 36       	cpi	r24, 0x64	; 100
     5fa:	09 f0       	breq	.+2      	; 0x5fe <vDIO_PULLUP_CONNECT+0x38>
     5fc:	74 c0       	rjmp	.+232    	; 0x6e6 <vDIO_PULLUP_CONNECT+0x120>
     5fe:	57 c0       	rjmp	.+174    	; 0x6ae <vDIO_PULLUP_CONNECT+0xe8>
	{
		case'A':
		case'a':
		if(connect==1)
     600:	41 30       	cpi	r20, 0x01	; 1
     602:	69 f4       	brne	.+26     	; 0x61e <vDIO_PULLUP_CONNECT+0x58>
		{
			SET_BIT(PORTA,pin);
     604:	2b b3       	in	r18, 0x1b	; 27
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	ac 01       	movw	r20, r24
     60c:	02 c0       	rjmp	.+4      	; 0x612 <vDIO_PULLUP_CONNECT+0x4c>
     60e:	44 0f       	add	r20, r20
     610:	55 1f       	adc	r21, r21
     612:	6a 95       	dec	r22
     614:	e2 f7       	brpl	.-8      	; 0x60e <vDIO_PULLUP_CONNECT+0x48>
     616:	ba 01       	movw	r22, r20
     618:	62 2b       	or	r22, r18
     61a:	6b bb       	out	0x1b, r22	; 27
     61c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
     61e:	2b b3       	in	r18, 0x1b	; 27
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	ac 01       	movw	r20, r24
     626:	02 c0       	rjmp	.+4      	; 0x62c <vDIO_PULLUP_CONNECT+0x66>
     628:	44 0f       	add	r20, r20
     62a:	55 1f       	adc	r21, r21
     62c:	6a 95       	dec	r22
     62e:	e2 f7       	brpl	.-8      	; 0x628 <vDIO_PULLUP_CONNECT+0x62>
     630:	ba 01       	movw	r22, r20
     632:	60 95       	com	r22
     634:	62 23       	and	r22, r18
     636:	6b bb       	out	0x1b, r22	; 27
     638:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(connect==1)
     63a:	41 30       	cpi	r20, 0x01	; 1
     63c:	69 f4       	brne	.+26     	; 0x658 <vDIO_PULLUP_CONNECT+0x92>
		{
			SET_BIT(PORTB,pin);
     63e:	28 b3       	in	r18, 0x18	; 24
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	ac 01       	movw	r20, r24
     646:	02 c0       	rjmp	.+4      	; 0x64c <vDIO_PULLUP_CONNECT+0x86>
     648:	44 0f       	add	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	6a 95       	dec	r22
     64e:	e2 f7       	brpl	.-8      	; 0x648 <vDIO_PULLUP_CONNECT+0x82>
     650:	ba 01       	movw	r22, r20
     652:	62 2b       	or	r22, r18
     654:	68 bb       	out	0x18, r22	; 24
     656:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
     658:	28 b3       	in	r18, 0x18	; 24
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	ac 01       	movw	r20, r24
     660:	02 c0       	rjmp	.+4      	; 0x666 <vDIO_PULLUP_CONNECT+0xa0>
     662:	44 0f       	add	r20, r20
     664:	55 1f       	adc	r21, r21
     666:	6a 95       	dec	r22
     668:	e2 f7       	brpl	.-8      	; 0x662 <vDIO_PULLUP_CONNECT+0x9c>
     66a:	ba 01       	movw	r22, r20
     66c:	60 95       	com	r22
     66e:	62 23       	and	r22, r18
     670:	68 bb       	out	0x18, r22	; 24
     672:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(connect==1)
     674:	41 30       	cpi	r20, 0x01	; 1
     676:	69 f4       	brne	.+26     	; 0x692 <vDIO_PULLUP_CONNECT+0xcc>
		{
			SET_BIT(PORTC,pin);
     678:	25 b3       	in	r18, 0x15	; 21
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	ac 01       	movw	r20, r24
     680:	02 c0       	rjmp	.+4      	; 0x686 <vDIO_PULLUP_CONNECT+0xc0>
     682:	44 0f       	add	r20, r20
     684:	55 1f       	adc	r21, r21
     686:	6a 95       	dec	r22
     688:	e2 f7       	brpl	.-8      	; 0x682 <vDIO_PULLUP_CONNECT+0xbc>
     68a:	ba 01       	movw	r22, r20
     68c:	62 2b       	or	r22, r18
     68e:	65 bb       	out	0x15, r22	; 21
     690:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
     692:	25 b3       	in	r18, 0x15	; 21
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	ac 01       	movw	r20, r24
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <vDIO_PULLUP_CONNECT+0xda>
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	6a 95       	dec	r22
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <vDIO_PULLUP_CONNECT+0xd6>
     6a4:	ba 01       	movw	r22, r20
     6a6:	60 95       	com	r22
     6a8:	62 23       	and	r22, r18
     6aa:	65 bb       	out	0x15, r22	; 21
     6ac:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(connect==1)
     6ae:	41 30       	cpi	r20, 0x01	; 1
     6b0:	69 f4       	brne	.+26     	; 0x6cc <vDIO_PULLUP_CONNECT+0x106>
		{
			SET_BIT(PORTD,pin);
     6b2:	22 b3       	in	r18, 0x12	; 18
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	ac 01       	movw	r20, r24
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <vDIO_PULLUP_CONNECT+0xfa>
     6bc:	44 0f       	add	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	6a 95       	dec	r22
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <vDIO_PULLUP_CONNECT+0xf6>
     6c4:	ba 01       	movw	r22, r20
     6c6:	62 2b       	or	r22, r18
     6c8:	62 bb       	out	0x12, r22	; 18
     6ca:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
     6cc:	22 b3       	in	r18, 0x12	; 18
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	ac 01       	movw	r20, r24
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <vDIO_PULLUP_CONNECT+0x114>
     6d6:	44 0f       	add	r20, r20
     6d8:	55 1f       	adc	r21, r21
     6da:	6a 95       	dec	r22
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <vDIO_PULLUP_CONNECT+0x110>
     6de:	ba 01       	movw	r22, r20
     6e0:	60 95       	com	r22
     6e2:	62 23       	and	r22, r18
     6e4:	62 bb       	out	0x12, r22	; 18
     6e6:	08 95       	ret

000006e8 <vDIO_WRITE_LOW_NIBBLE>:
		break;
}
}
void vDIO_WRITE_LOW_NIBBLE(unsigned char port,unsigned char value)
{
	value&=0x0f;
     6e8:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
     6ea:	82 34       	cpi	r24, 0x42	; 66
     6ec:	81 f0       	breq	.+32     	; 0x70e <vDIO_WRITE_LOW_NIBBLE+0x26>
     6ee:	83 34       	cpi	r24, 0x43	; 67
     6f0:	18 f4       	brcc	.+6      	; 0x6f8 <vDIO_WRITE_LOW_NIBBLE+0x10>
     6f2:	81 34       	cpi	r24, 0x41	; 65
     6f4:	f1 f4       	brne	.+60     	; 0x732 <vDIO_WRITE_LOW_NIBBLE+0x4a>
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <vDIO_WRITE_LOW_NIBBLE+0x1a>
     6f8:	83 34       	cpi	r24, 0x43	; 67
     6fa:	79 f0       	breq	.+30     	; 0x71a <vDIO_WRITE_LOW_NIBBLE+0x32>
     6fc:	84 34       	cpi	r24, 0x44	; 68
     6fe:	c9 f4       	brne	.+50     	; 0x732 <vDIO_WRITE_LOW_NIBBLE+0x4a>
     700:	12 c0       	rjmp	.+36     	; 0x726 <vDIO_WRITE_LOW_NIBBLE+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     702:	8b b3       	in	r24, 0x1b	; 27
     704:	80 7f       	andi	r24, 0xF0	; 240
     706:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     708:	8b b3       	in	r24, 0x1b	; 27
     70a:	86 2b       	or	r24, r22
     70c:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     70e:	88 b3       	in	r24, 0x18	; 24
     710:	80 7f       	andi	r24, 0xF0	; 240
     712:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     714:	88 b3       	in	r24, 0x18	; 24
     716:	86 2b       	or	r24, r22
     718:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     71a:	85 b3       	in	r24, 0x15	; 21
     71c:	80 7f       	andi	r24, 0xF0	; 240
     71e:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     720:	85 b3       	in	r24, 0x15	; 21
     722:	86 2b       	or	r24, r22
     724:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     726:	82 b3       	in	r24, 0x12	; 18
     728:	80 7f       	andi	r24, 0xF0	; 240
     72a:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     72c:	82 b3       	in	r24, 0x12	; 18
     72e:	68 2b       	or	r22, r24
     730:	62 bb       	out	0x12, r22	; 18
     732:	08 95       	ret

00000734 <vDIO_WRITE_HIGH_NIBBLE>:
	}
}
void vDIO_WRITE_HIGH_NIBBLE(unsigned char port,unsigned char value)
{
	value<<=4;
     734:	62 95       	swap	r22
     736:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
     738:	82 34       	cpi	r24, 0x42	; 66
     73a:	81 f0       	breq	.+32     	; 0x75c <vDIO_WRITE_HIGH_NIBBLE+0x28>
     73c:	83 34       	cpi	r24, 0x43	; 67
     73e:	18 f4       	brcc	.+6      	; 0x746 <vDIO_WRITE_HIGH_NIBBLE+0x12>
     740:	81 34       	cpi	r24, 0x41	; 65
     742:	f1 f4       	brne	.+60     	; 0x780 <vDIO_WRITE_HIGH_NIBBLE+0x4c>
     744:	05 c0       	rjmp	.+10     	; 0x750 <vDIO_WRITE_HIGH_NIBBLE+0x1c>
     746:	83 34       	cpi	r24, 0x43	; 67
     748:	79 f0       	breq	.+30     	; 0x768 <vDIO_WRITE_HIGH_NIBBLE+0x34>
     74a:	84 34       	cpi	r24, 0x44	; 68
     74c:	c9 f4       	brne	.+50     	; 0x780 <vDIO_WRITE_HIGH_NIBBLE+0x4c>
     74e:	12 c0       	rjmp	.+36     	; 0x774 <vDIO_WRITE_HIGH_NIBBLE+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     750:	8b b3       	in	r24, 0x1b	; 27
     752:	8f 70       	andi	r24, 0x0F	; 15
     754:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     756:	8b b3       	in	r24, 0x1b	; 27
     758:	86 2b       	or	r24, r22
     75a:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     75c:	88 b3       	in	r24, 0x18	; 24
     75e:	8f 70       	andi	r24, 0x0F	; 15
     760:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     762:	88 b3       	in	r24, 0x18	; 24
     764:	86 2b       	or	r24, r22
     766:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     768:	85 b3       	in	r24, 0x15	; 21
     76a:	8f 70       	andi	r24, 0x0F	; 15
     76c:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     76e:	85 b3       	in	r24, 0x15	; 21
     770:	86 2b       	or	r24, r22
     772:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     774:	82 b3       	in	r24, 0x12	; 18
     776:	8f 70       	andi	r24, 0x0F	; 15
     778:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     77a:	82 b3       	in	r24, 0x12	; 18
     77c:	68 2b       	or	r22, r24
     77e:	62 bb       	out	0x12, r22	; 18
     780:	08 95       	ret

00000782 <EEPROM_WRITE>:
#include <avr/io.h>
#include "std_macros.h"
#include "STD_TYPES.h"
void EEPROM_WRITE(unsigned short address,unsigned char data)
{
	EEARL=(char)address;
     782:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     784:	9f bb       	out	0x1f, r25	; 31
	EEDR=data;
     786:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
     788:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
     78a:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(EECR,EEWE)==1);
     78c:	e1 99       	sbic	0x1c, 1	; 28
     78e:	fe cf       	rjmp	.-4      	; 0x78c <EEPROM_WRITE+0xa>
}
     790:	08 95       	ret

00000792 <EEPROM_READ>:
unsigned char EEPROM_READ(const unsigned short address)
{
	EEARL=(char)address;
     792:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     794:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR,EEWE);
     796:	e1 9a       	sbi	0x1c, 1	; 28
	return EEDR;
     798:	8d b3       	in	r24, 0x1d	; 29
}
     79a:	08 95       	ret

0000079c <eeprom_readbyte_from_address>:
uint8 eeprom_readbyte_from_address(const uint16 address1)
{
	
	while(((EECR &(1<<EERE))>>EEWE)==1);
     79c:	2c b3       	in	r18, 0x1c	; 28
	EEAR=address1;
     79e:	9f bb       	out	0x1f, r25	; 31
     7a0:	8e bb       	out	0x1e, r24	; 30
	EECR|=(1<<EERE);
     7a2:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     7a4:	8d b3       	in	r24, 0x1d	; 29
}
     7a6:	08 95       	ret

000007a8 <eeprom_readblock_from_address>:
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
     7a8:	dc 01       	movw	r26, r24
	while(((EECR & (1<< EERE)) >>EEWE)==1);
     7aa:	8c b3       	in	r24, 0x1c	; 28
	uint16 counter=0;
	while(counter<size)
     7ac:	41 15       	cp	r20, r1
     7ae:	51 05       	cpc	r21, r1
     7b0:	89 f0       	breq	.+34     	; 0x7d4 <eeprom_readblock_from_address+0x2c>
     7b2:	e6 2f       	mov	r30, r22
     7b4:	f7 2f       	mov	r31, r23
	return EEDR;
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
	while(((EECR &(1<<EERE))>>EEWE)==1);
	EEAR=address1;
	EECR|=(1<<EERE);
	return EEDR;
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
     7ba:	c9 01       	movw	r24, r18
     7bc:	8a 0f       	add	r24, r26
     7be:	9b 1f       	adc	r25, r27
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
	while(counter<size)
	{
		EEAR=address2+counter;
     7c0:	9f bb       	out	0x1f, r25	; 31
     7c2:	8e bb       	out	0x1e, r24	; 30
	    EECR|=(1<<EERE);
     7c4:	e0 9a       	sbi	0x1c, 0	; 28
		*(data1+counter)=EEDR;
     7c6:	8d b3       	in	r24, 0x1d	; 29
     7c8:	81 93       	st	Z+, r24
		counter++;
     7ca:	2f 5f       	subi	r18, 0xFF	; 255
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
	while(counter<size)
     7ce:	24 17       	cp	r18, r20
     7d0:	35 07       	cpc	r19, r21
     7d2:	99 f7       	brne	.-26     	; 0x7ba <eeprom_readblock_from_address+0x12>
     7d4:	08 95       	ret

000007d6 <eeprom_writebyte_to_address>:
		counter++;
	}	
}	
void eeprom_writebyte_to_address(const uint16 address2,const uint8 data2)
{
   while(((EECR & (1<< EERE)) >>EEWE)==1);
     7d6:	2c b3       	in	r18, 0x1c	; 28
   EEAR=address2;
     7d8:	9f bb       	out	0x1f, r25	; 31
     7da:	8e bb       	out	0x1e, r24	; 30
   EECR|=(1<<EERE);
     7dc:	e0 9a       	sbi	0x1c, 0	; 28
   if (EEDR !=data2)
     7de:	8d b3       	in	r24, 0x1d	; 29
     7e0:	86 17       	cp	r24, r22
     7e2:	19 f0       	breq	.+6      	; 0x7ea <eeprom_writebyte_to_address+0x14>
   {
	   EEDR=data2;
     7e4:	6d bb       	out	0x1d, r22	; 29
	   EECR|=(1<<EEMWE);
     7e6:	e2 9a       	sbi	0x1c, 2	; 28
	   EECR|=(1<<EEWE);    
     7e8:	e1 9a       	sbi	0x1c, 1	; 28
     7ea:	08 95       	ret

000007ec <eeprom_writeblock_from_address>:
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
     7ec:	dc 01       	movw	r26, r24
	uint16 counter=0;
	
	while(counter < size)
     7ee:	41 15       	cp	r20, r1
     7f0:	51 05       	cpc	r21, r1
     7f2:	b9 f0       	breq	.+46     	; 0x822 <eeprom_writeblock_from_address+0x36>
     7f4:	e6 2f       	mov	r30, r22
     7f6:	f7 2f       	mov	r31, r23
	   EECR|=(1<<EEWE);    
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
	uint16 counter=0;
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
	
	while(counter < size)
	{
		 while(((EECR & (1<< EERE)) >>EEWE)==1);
     7fc:	8c b3       	in	r24, 0x1c	; 28
	   EEDR=data2;
	   EECR|=(1<<EEMWE);
	   EECR|=(1<<EEWE);    
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
     7fe:	c9 01       	movw	r24, r18
     800:	8a 0f       	add	r24, r26
     802:	9b 1f       	adc	r25, r27
	uint16 counter=0;
	
	while(counter < size)
	{
		 while(((EECR & (1<< EERE)) >>EEWE)==1);
		 EEAR=address2+counter;
     804:	9f bb       	out	0x1f, r25	; 31
     806:	8e bb       	out	0x1e, r24	; 30
		 EECR|=(1<<EERE);
     808:	e0 9a       	sbi	0x1c, 0	; 28
		 if (EEDR != (*(data2+counter)))
     80a:	9d b3       	in	r25, 0x1d	; 29
     80c:	81 91       	ld	r24, Z+
     80e:	98 17       	cp	r25, r24
     810:	19 f0       	breq	.+6      	; 0x818 <eeprom_writeblock_from_address+0x2c>
		 {
			 EEDR=*(data2+counter);
     812:	8d bb       	out	0x1d, r24	; 29
			 EECR|=(1<<EEMWE);
     814:	e2 9a       	sbi	0x1c, 2	; 28
			 EECR|=(1<<EEWE);
     816:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{
			
		}
		counter++;
     818:	2f 5f       	subi	r18, 0xFF	; 255
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
	uint16 counter=0;
	
	while(counter < size)
     81c:	24 17       	cp	r18, r20
     81e:	35 07       	cpc	r19, r21
     820:	69 f7       	brne	.-38     	; 0x7fc <eeprom_writeblock_from_address+0x10>
     822:	08 95       	ret

00000824 <keypad_vinit>:
#include "keybad.h"
void keypad_vinit(void)
{
	vDIO_SET_BIT_DIR(keybad_port,0,1);
     824:	84 e4       	ldi	r24, 0x44	; 68
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,1,1);
     82e:	84 e4       	ldi	r24, 0x44	; 68
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,2,1);
     838:	84 e4       	ldi	r24, 0x44	; 68
     83a:	62 e0       	ldi	r22, 0x02	; 2
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,3,1);
     842:	84 e4       	ldi	r24, 0x44	; 68
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	41 e0       	ldi	r20, 0x01	; 1
     848:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,4,0);
     84c:	84 e4       	ldi	r24, 0x44	; 68
     84e:	64 e0       	ldi	r22, 0x04	; 4
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,5,0);
     856:	84 e4       	ldi	r24, 0x44	; 68
     858:	65 e0       	ldi	r22, 0x05	; 5
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,6,0);
     860:	84 e4       	ldi	r24, 0x44	; 68
     862:	66 e0       	ldi	r22, 0x06	; 6
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,7,0);
     86a:	84 e4       	ldi	r24, 0x44	; 68
     86c:	67 e0       	ldi	r22, 0x07	; 7
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
     874:	84 e4       	ldi	r24, 0x44	; 68
     876:	64 e0       	ldi	r22, 0x04	; 4
     878:	41 e0       	ldi	r20, 0x01	; 1
     87a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
     87e:	84 e4       	ldi	r24, 0x44	; 68
     880:	65 e0       	ldi	r22, 0x05	; 5
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
     888:	84 e4       	ldi	r24, 0x44	; 68
     88a:	66 e0       	ldi	r22, 0x06	; 6
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
     892:	84 e4       	ldi	r24, 0x44	; 68
     894:	67 e0       	ldi	r22, 0x07	; 7
     896:	41 e0       	ldi	r20, 0x01	; 1
     898:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vDIO_PULLUP_CONNECT>
}
     89c:	08 95       	ret

0000089e <keybad_u8read_press>:
char keybad_u8read_press()
{
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	60 97       	sbiw	r28, 0x10	; 16
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','P'},{'4','5','6','M'},{'1','2','3','-'},{'A','0','=','+'}};
     8b6:	de 01       	movw	r26, r28
     8b8:	11 96       	adiw	r26, 0x01	; 1
     8ba:	ea e6       	ldi	r30, 0x6A	; 106
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 e1       	ldi	r24, 0x10	; 16
     8c0:	01 90       	ld	r0, Z+
     8c2:	0d 92       	st	X+, r0
     8c4:	81 50       	subi	r24, 0x01	; 1
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <keybad_u8read_press+0x22>
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
     8c8:	00 e0       	ldi	r16, 0x00	; 0
	{
		vDIO_WRITE_BIT(keybad_port,0,1);
     8ca:	84 e4       	ldi	r24, 0x44	; 68
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,1,1);
     8d4:	84 e4       	ldi	r24, 0x44	; 68
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,2,1);
     8de:	84 e4       	ldi	r24, 0x44	; 68
     8e0:	62 e0       	ldi	r22, 0x02	; 2
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,3,1);
     8e8:	84 e4       	ldi	r24, 0x44	; 68
     8ea:	63 e0       	ldi	r22, 0x03	; 3
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,row,0);
     8f2:	84 e4       	ldi	r24, 0x44	; 68
     8f4:	60 2f       	mov	r22, r16
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
		for (colum=0;colum<4;colum++)
     8fc:	10 e0       	ldi	r17, 0x00	; 0
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
}
char keybad_u8read_press()
     8fe:	61 2f       	mov	r22, r17
     900:	6c 5f       	subi	r22, 0xFC	; 252
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for (colum=0;colum<4;colum++)
		{
		val=u8DIO_READ_BIT(keybad_port,(colum+4));
     902:	84 e4       	ldi	r24, 0x44	; 68
     904:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <u8DIO_READ_BIT>
		    if(val==0)
     908:	88 23       	and	r24, r24
     90a:	61 f4       	brne	.+24     	; 0x924 <keybad_u8read_press+0x86>
			{
			returnval=arr[row][colum];
     90c:	e0 2f       	mov	r30, r16
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e1 0f       	add	r30, r17
     91a:	f1 1d       	adc	r31, r1
     91c:	ec 0f       	add	r30, r28
     91e:	fd 1f       	adc	r31, r29
     920:	81 81       	ldd	r24, Z+1	; 0x01
     922:	04 c0       	rjmp	.+8      	; 0x92c <keybad_u8read_press+0x8e>
		vDIO_WRITE_BIT(keybad_port,0,1);
		vDIO_WRITE_BIT(keybad_port,1,1);
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for (colum=0;colum<4;colum++)
     924:	1f 5f       	subi	r17, 0xFF	; 255
     926:	14 30       	cpi	r17, 0x04	; 4
     928:	51 f7       	brne	.-44     	; 0x8fe <keybad_u8read_press+0x60>
     92a:	0b c0       	rjmp	.+22     	; 0x942 <keybad_u8read_press+0xa4>
		{
		break;
		}
	}
	return returnval;
     92c:	60 96       	adiw	r28, 0x10	; 16
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret
char keybad_u8read_press()
{
	char arr[4][4]={{'7','8','9','P'},{'4','5','6','M'},{'1','2','3','-'},{'A','0','=','+'}};
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
     942:	0f 5f       	subi	r16, 0xFF	; 255
     944:	04 30       	cpi	r16, 0x04	; 4
     946:	09 f6       	brne	.-126    	; 0x8ca <keybad_u8read_press+0x2c>
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	f0 cf       	rjmp	.-32     	; 0x92c <keybad_u8read_press+0x8e>

0000094c <LCD_ENABLE>:
	_delay_ms(1);

}
static void LCD_ENABLE(void)
{
	vDIO_WRITE_BIT(LCD_DATA,EN,1);
     94c:	81 e4       	ldi	r24, 0x41	; 65
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     956:	8f e9       	ldi	r24, 0x9F	; 159
     958:	9f e0       	ldi	r25, 0x0F	; 15
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <LCD_ENABLE+0xe>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <LCD_ENABLE+0x14>
     960:	00 00       	nop
	_delay_ms(2);
	vDIO_WRITE_BIT(LCD_DATA,EN,0);
     962:	81 e4       	ldi	r24, 0x41	; 65
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
     96c:	8f e9       	ldi	r24, 0x9F	; 159
     96e:	9f e0       	ldi	r25, 0x0F	; 15
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <LCD_ENABLE+0x24>
     974:	00 c0       	rjmp	.+0      	; 0x976 <LCD_ENABLE+0x2a>
     976:	00 00       	nop
	_delay_ms(2);
	
}
     978:	08 95       	ret

0000097a <LCD_SEND_CHAR>:
	_delay_ms(1);
	#endif
	
}
void LCD_SEND_CHAR( char data)
{
     97a:	cf 93       	push	r28
     97c:	c8 2f       	mov	r28, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,data);
	vDIO_WRITE_BIT(LCD_CONTROL,RS,1);
	LCD_ENABLE();
	#elif defined four_bit_mode
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data>>4);
     97e:	68 2f       	mov	r22, r24
     980:	62 95       	swap	r22
     982:	6f 70       	andi	r22, 0x0F	; 15
     984:	81 e4       	ldi	r24, 0x41	; 65
     986:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,1);
     98a:	81 e4       	ldi	r24, 0x41	; 65
     98c:	62 e0       	ldi	r22, 0x02	; 2
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_ENABLE();
     994:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data);
     998:	81 e4       	ldi	r24, 0x41	; 65
     99a:	6c 2f       	mov	r22, r28
     99c:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,1);
     9a0:	81 e4       	ldi	r24, 0x41	; 65
     9a2:	62 e0       	ldi	r22, 0x02	; 2
     9a4:	41 e0       	ldi	r20, 0x01	; 1
     9a6:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_ENABLE();
     9aa:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_ENABLE>
     9ae:	8f ec       	ldi	r24, 0xCF	; 207
     9b0:	97 e0       	ldi	r25, 0x07	; 7
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <LCD_SEND_CHAR+0x38>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <LCD_SEND_CHAR+0x3e>
     9b8:	00 00       	nop
	#endif
	_delay_ms(1);

}
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <LCD_SEND_CMD>:
	vDIO_WRITE_BIT(LCD_DATA,EN,0);
	_delay_ms(2);
	
}
void LCD_SEND_CMD( char cmd)
{
     9be:	cf 93       	push	r28
     9c0:	c8 2f       	mov	r28, r24
	vDIO_WRITE_PORT(LCD_DATA,cmd);
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
	LCD_ENABLE();
	_delay_ms(1);
	#elif defined four_bit_mode
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,cmd>>4);
     9c2:	68 2f       	mov	r22, r24
     9c4:	62 95       	swap	r22
     9c6:	6f 70       	andi	r22, 0x0F	; 15
     9c8:	81 e4       	ldi	r24, 0x41	; 65
     9ca:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,0);
     9ce:	81 e4       	ldi	r24, 0x41	; 65
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_ENABLE();
     9d8:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,cmd);
     9dc:	81 e4       	ldi	r24, 0x41	; 65
     9de:	6c 2f       	mov	r22, r28
     9e0:	0e 94 9a 03 	call	0x734	; 0x734 <vDIO_WRITE_HIGH_NIBBLE>
	vDIO_WRITE_BIT(LCD_DATA,RS,0);
     9e4:	81 e4       	ldi	r24, 0x41	; 65
     9e6:	62 e0       	ldi	r22, 0x02	; 2
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_ENABLE();
     9ee:	0e 94 a6 04 	call	0x94c	; 0x94c <LCD_ENABLE>
     9f2:	8f ec       	ldi	r24, 0xCF	; 207
     9f4:	97 e0       	ldi	r25, 0x07	; 7
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCD_SEND_CMD+0x38>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <LCD_SEND_CMD+0x3e>
     9fc:	00 00       	nop
	#endif
	_delay_ms(1);
	
}
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <LCD_INIT>:
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	91 ee       	ldi	r25, 0xE1	; 225
     a06:	a4 e0       	ldi	r26, 0x04	; 4
     a08:	81 50       	subi	r24, 0x01	; 1
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	a0 40       	sbci	r26, 0x00	; 0
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <LCD_INIT+0x6>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <LCD_INIT+0x10>
     a12:	00 00       	nop
	//LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(1);
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(1);
	#elif defined four_bit_mode
	vDIO_SET_BIT_DIR(LCD_DATA,4,1);
     a14:	81 e4       	ldi	r24, 0x41	; 65
     a16:	64 e0       	ldi	r22, 0x04	; 4
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,5,1);
     a1e:	81 e4       	ldi	r24, 0x41	; 65
     a20:	65 e0       	ldi	r22, 0x05	; 5
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,6,1);
     a28:	81 e4       	ldi	r24, 0x41	; 65
     a2a:	66 e0       	ldi	r22, 0x06	; 6
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,7,1);
     a32:	81 e4       	ldi	r24, 0x41	; 65
     a34:	67 e0       	ldi	r22, 0x07	; 7
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,EN,1);
     a3c:	81 e4       	ldi	r24, 0x41	; 65
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	41 e0       	ldi	r20, 0x01	; 1
     a42:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,RS,1);
     a46:	81 e4       	ldi	r24, 0x41	; 65
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,WR,1);
     a50:	81 e4       	ldi	r24, 0x41	; 65
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 8c 00 	call	0x118	; 0x118 <vDIO_SET_BIT_DIR>
	vDIO_WRITE_BIT(LCD_DATA,WR,0);
     a5a:	81 e4       	ldi	r24, 0x41	; 65
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	0e 94 1d 01 	call	0x23a	; 0x23a <vDIO_WRITE_BIT>
	LCD_SEND_CMD(RET_HOME);
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     a6a:	af e1       	ldi	r26, 0x1F	; 31
     a6c:	be e4       	ldi	r27, 0x4E	; 78
     a6e:	11 97       	sbiw	r26, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <LCD_INIT+0x6c>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <LCD_INIT+0x72>
     a74:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(FOUR_BIT);
     a76:	88 e2       	ldi	r24, 0x28	; 40
     a78:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     a7c:	8f ec       	ldi	r24, 0xCF	; 207
     a7e:	97 e0       	ldi	r25, 0x07	; 7
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <LCD_INIT+0x7e>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <LCD_INIT+0x84>
     a86:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(DISPLAY_CURSOR);
     a88:	8e e0       	ldi	r24, 0x0E	; 14
     a8a:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     a8e:	af ec       	ldi	r26, 0xCF	; 207
     a90:	b7 e0       	ldi	r27, 0x07	; 7
     a92:	11 97       	sbiw	r26, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <LCD_INIT+0x90>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <LCD_INIT+0x96>
     a98:	00 00       	nop
     a9a:	8f e1       	ldi	r24, 0x1F	; 31
     a9c:	9e e4       	ldi	r25, 0x4E	; 78
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <LCD_INIT+0x9c>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <LCD_INIT+0xa2>
     aa4:	00 00       	nop
	_delay_ms(1);
	//LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
	LCD_SEND_CMD(ENTRY_MODE);
     aa6:	86 e0       	ldi	r24, 0x06	; 6
     aa8:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     aac:	af ec       	ldi	r26, 0xCF	; 207
     aae:	b7 e0       	ldi	r27, 0x07	; 7
     ab0:	11 97       	sbiw	r26, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <LCD_INIT+0xae>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <LCD_INIT+0xb4>
     ab6:	00 00       	nop
	_delay_ms(1);
	#endif
	
}
     ab8:	08 95       	ret

00000aba <LCD_clear_screen>:
	_delay_ms(1);
	
}
void LCD_clear_screen(void)
{
	LCD_SEND_CMD(CLR_SCREEN);
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     ac0:	8f e1       	ldi	r24, 0x1F	; 31
     ac2:	9e e4       	ldi	r25, 0x4E	; 78
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <LCD_clear_screen+0xa>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <LCD_clear_screen+0x10>
     aca:	00 00       	nop
	_delay_ms(10);
}
     acc:	08 95       	ret

00000ace <LCD_SEND_STRING>:

void LCD_SEND_STRING( char *data)
{
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     ad4:	88 81       	ld	r24, Y
     ad6:	88 23       	and	r24, r24
     ad8:	31 f0       	breq	.+12     	; 0xae6 <LCD_SEND_STRING+0x18>
{
	LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
     ada:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_SEND_CHAR(*data);
     adc:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
{
	while((*data)!='\0')
     ae0:	89 91       	ld	r24, Y+
     ae2:	88 23       	and	r24, r24
     ae4:	d9 f7       	brne	.-10     	; 0xadc <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
     aec:	28 2f       	mov	r18, r24
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	22 30       	cpi	r18, 0x02	; 2
     af2:	70 f4       	brcc	.+28     	; 0xb10 <LCD_MOVE_CURSOR+0x24>
     af4:	61 31       	cpi	r22, 0x11	; 17
     af6:	70 f4       	brcc	.+28     	; 0xb14 <LCD_MOVE_CURSOR+0x28>
     af8:	66 23       	and	r22, r22
     afa:	71 f0       	breq	.+28     	; 0xb18 <LCD_MOVE_CURSOR+0x2c>
	{
		val=0x80;
	}
	else if(row==1)
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	19 f4       	brne	.+6      	; 0xb06 <LCD_MOVE_CURSOR+0x1a>
	{
		val=0x80+(colum-1);
     b00:	96 2f       	mov	r25, r22
     b02:	91 58       	subi	r25, 0x81	; 129
     b04:	0a c0       	rjmp	.+20     	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
	}
	else if(row==2)
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	41 f4       	brne	.+16     	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
	{
		val=0xC0+(colum-1);
     b0a:	96 2f       	mov	r25, r22
     b0c:	91 54       	subi	r25, 0x41	; 65
     b0e:	05 c0       	rjmp	.+10     	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
	{
		val=0x80;
     b10:	90 e8       	ldi	r25, 0x80	; 128
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
     b14:	90 e8       	ldi	r25, 0x80	; 128
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <LCD_MOVE_CURSOR+0x2e>
     b18:	90 e8       	ldi	r25, 0x80	; 128
	else if(row==2)
	{
		val=0xC0+(colum-1);
	}	
	
	LCD_SEND_CMD(val);
     b1a:	89 2f       	mov	r24, r25
     b1c:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
     b20:	8f ec       	ldi	r24, 0xCF	; 207
     b22:	97 e0       	ldi	r25, 0x07	; 7
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <LCD_MOVE_CURSOR+0x38>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <LCD_MOVE_CURSOR+0x3e>
     b2a:	00 00       	nop
	_delay_ms(1);	 
}
     b2c:	08 95       	ret

00000b2e <main>:
unsigned int day=0,month=0,year=0,flag=0,flag1=0,min=0,hou=0,minutes=0,hours=0;
unsigned char digit1,digit2,READ,digit3,digit4;
volatile unsigned char sec=0;
int main(void)
{
	keypad_vinit();
     b2e:	0e 94 12 04 	call	0x824	; 0x824 <keypad_vinit>
	LCD_INIT();
     b32:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_INIT>
	seven_seg_init('B');
     b36:	82 e4       	ldi	r24, 0x42	; 66
     b38:	0e 94 49 00 	call	0x92	; 0x92 <seven_seg_init>
	SET_BIT(DDRC,0);
     b3c:	a0 9a       	sbi	0x14, 0	; 20
	SET_BIT(DDRC,1);
     b3e:	a1 9a       	sbi	0x14, 1	; 20
	SET_BIT(DDRC,2);
     b40:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(DDRC,3);
     b42:	a3 9a       	sbi	0x14, 3	; 20
	SET_BIT(DDRC,4);
     b44:	a4 9a       	sbi	0x14, 4	; 20
	SET_BIT(DDRC,5);
     b46:	a5 9a       	sbi	0x14, 5	; 20
	LCD_SEND_CMD(0x0c);
     b48:	8c e0       	ldi	r24, 0x0C	; 12
     b4a:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_SEND_CMD>
	

     LCD_SEND_STRING("SET TIME (1)");
     b4e:	8a e7       	ldi	r24, 0x7A	; 122
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	94 e3       	ldi	r25, 0x34	; 52
     b5a:	ac e0       	ldi	r26, 0x0C	; 12
     b5c:	81 50       	subi	r24, 0x01	; 1
     b5e:	90 40       	sbci	r25, 0x00	; 0
     b60:	a0 40       	sbci	r26, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <main+0x2e>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <main+0x38>
     b66:	00 00       	nop
// 	LCD_MOVE_CURSOR(2,1);
// 	LCD_SEND_STRING("SET DATA (2)");
	_delay_ms(500);
	TIMER2_overflow_interrupt();
     b68:	0e 94 4d 08 	call	0x109a	; 0x109a <TIMER2_overflow_interrupt>
				_delay_ms(150);
				hours=(digit2-48)+10*(digit1-48);
				if(hours>24)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter hour again");
     b6c:	0f 2e       	mov	r0, r31
     b6e:	f0 e9       	ldi	r31, 0x90	; 144
     b70:	8f 2e       	mov	r8, r31
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	9f 2e       	mov	r9, r31
     b76:	f0 2d       	mov	r31, r0
		{
			if(READ =='1')
			{
				L1:
				LCD_clear_screen();
				LCD_SEND_STRING("HOURS:--");
     b78:	0f 2e       	mov	r0, r31
     b7a:	f7 e8       	ldi	r31, 0x87	; 135
     b7c:	ef 2e       	mov	r14, r31
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	ff 2e       	mov	r15, r31
     b82:	f0 2d       	mov	r31, r0
					_delay_ms(300);
					goto L1;
				}
				L2:
				LCD_clear_screen();
				LCD_SEND_STRING("MINUTES:--");
     b84:	0f 2e       	mov	r0, r31
     b86:	f2 eb       	ldi	r31, 0xB2	; 178
     b88:	cf 2e       	mov	r12, r31
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	df 2e       	mov	r13, r31
     b8e:	f0 2d       	mov	r31, r0
					_delay_ms(300);
					goto L2;
				}
				L3:
				LCD_clear_screen();
				LCD_SEND_STRING("SECONDS:--");
     b90:	0f 2e       	mov	r0, r31
     b92:	ff ed       	ldi	r31, 0xDF	; 223
     b94:	af 2e       	mov	r10, r31
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	bf 2e       	mov	r11, r31
     b9a:	f0 2d       	mov	r31, r0
				_delay_ms(150);
				seconds=(digit2-48)+10*(digit1-48);
				if(seconds>60)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter sec again");
     b9c:	0f 2e       	mov	r0, r31
     b9e:	fa ee       	ldi	r31, 0xEA	; 234
     ba0:	6f 2e       	mov	r6, r31
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	7f 2e       	mov	r7, r31
     ba6:	f0 2d       	mov	r31, r0
					LCD_MOVE_CURSOR(2,1);
					LCD_SEND_STRING("between 01 to 60");
     ba8:	0e ec       	ldi	r16, 0xCE	; 206
     baa:	10 e0       	ldi	r17, 0x00	; 0
				_delay_ms(150);
				minutes=(digit2-48)+10*(digit1-48);
				if(minutes>60)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter minu again");
     bac:	0f 2e       	mov	r0, r31
     bae:	fd eb       	ldi	r31, 0xBD	; 189
     bb0:	4f 2e       	mov	r4, r31
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	5f 2e       	mov	r5, r31
     bb6:	f0 2d       	mov	r31, r0
	TIMER2_overflow_interrupt();
	
   while(1)
   { 
	   	 L7:
		READ=keybad_u8read_press();
     bb8:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     bbc:	80 93 29 01 	sts	0x0129, r24
		if(READ!=notpassed)
     bc0:	8f 3f       	cpi	r24, 0xFF	; 255
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <main+0x98>
     bc4:	43 c1       	rjmp	.+646    	; 0xe4c <main+0x31e>
		{
			if(READ =='1')
     bc6:	81 33       	cpi	r24, 0x31	; 49
     bc8:	09 f0       	breq	.+2      	; 0xbcc <main+0x9e>
     bca:	30 c1       	rjmp	.+608    	; 0xe2c <main+0x2fe>
				if(hours>24)
				{
					LCD_clear_screen();
					LCD_SEND_STRING("enter hour again");
					LCD_MOVE_CURSOR(2,1);
					LCD_SEND_STRING("between 01 to 24");
     bcc:	c1 ea       	ldi	r28, 0xA1	; 161
     bce:	d0 e0       	ldi	r29, 0x00	; 0
		if(READ!=notpassed)
		{
			if(READ =='1')
			{
				L1:
				LCD_clear_screen();
     bd0:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("HOURS:--");
     bd4:	c7 01       	movw	r24, r14
     bd6:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,7);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	67 e0       	ldi	r22, 0x07	; 7
     bde:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     be2:	8f e7       	ldi	r24, 0x7F	; 127
     be4:	99 ea       	ldi	r25, 0xA9	; 169
     be6:	a3 e0       	ldi	r26, 0x03	; 3
     be8:	81 50       	subi	r24, 0x01	; 1
     bea:	90 40       	sbci	r25, 0x00	; 0
     bec:	a0 40       	sbci	r26, 0x00	; 0
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <main+0xba>
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <main+0xc4>
     bf2:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit1=keybad_u8read_press();
     bf4:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     bf8:	80 93 2c 01 	sts	0x012C, r24
					
				}while(digit1==notpassed);
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	d1 f3       	breq	.-12     	; 0xbf4 <main+0xc6>
				LCD_SEND_CHAR(digit1);
     c00:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     c04:	8f e7       	ldi	r24, 0x7F	; 127
     c06:	99 ea       	ldi	r25, 0xA9	; 169
     c08:	a3 e0       	ldi	r26, 0x03	; 3
     c0a:	81 50       	subi	r24, 0x01	; 1
     c0c:	90 40       	sbci	r25, 0x00	; 0
     c0e:	a0 40       	sbci	r26, 0x00	; 0
     c10:	e1 f7       	brne	.-8      	; 0xc0a <main+0xdc>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <main+0xe6>
     c14:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit2=keybad_u8read_press();
     c16:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     c1a:	80 93 2a 01 	sts	0x012A, r24
					
				}while(digit2==notpassed);
     c1e:	8f 3f       	cpi	r24, 0xFF	; 255
     c20:	d1 f3       	breq	.-12     	; 0xc16 <main+0xe8>
				LCD_SEND_CHAR(digit2);
     c22:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     c26:	8f e7       	ldi	r24, 0x7F	; 127
     c28:	99 ea       	ldi	r25, 0xA9	; 169
     c2a:	a3 e0       	ldi	r26, 0x03	; 3
     c2c:	81 50       	subi	r24, 0x01	; 1
     c2e:	90 40       	sbci	r25, 0x00	; 0
     c30:	a0 40       	sbci	r26, 0x00	; 0
     c32:	e1 f7       	brne	.-8      	; 0xc2c <main+0xfe>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <main+0x108>
     c36:	00 00       	nop
				_delay_ms(150);
				hours=(digit2-48)+10*(digit1-48);
     c38:	40 91 2a 01 	lds	r20, 0x012A
     c3c:	80 91 2c 01 	lds	r24, 0x012C
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	9c 01       	movw	r18, r24
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	22 0f       	add	r18, r18
     c4e:	33 1f       	adc	r19, r19
     c50:	82 0f       	add	r24, r18
     c52:	93 1f       	adc	r25, r19
     c54:	84 0f       	add	r24, r20
     c56:	91 1d       	adc	r25, r1
     c58:	80 51       	subi	r24, 0x10	; 16
     c5a:	92 40       	sbci	r25, 0x02	; 2
     c5c:	90 93 16 01 	sts	0x0116, r25
     c60:	80 93 15 01 	sts	0x0115, r24
				if(hours>24)
     c64:	89 31       	cpi	r24, 0x19	; 25
     c66:	91 05       	cpc	r25, r1
     c68:	b0 f0       	brcs	.+44     	; 0xc96 <main+0x168>
				{
					LCD_clear_screen();
     c6a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
					LCD_SEND_STRING("enter hour again");
     c6e:	c4 01       	movw	r24, r8
     c70:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,1);
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("between 01 to 24");
     c7c:	ce 01       	movw	r24, r28
     c7e:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	92 e5       	ldi	r25, 0x52	; 82
     c86:	a7 e0       	ldi	r26, 0x07	; 7
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	a0 40       	sbci	r26, 0x00	; 0
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <main+0x15a>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <main+0x164>
     c92:	00 00       	nop
     c94:	9d cf       	rjmp	.-198    	; 0xbd0 <main+0xa2>
					_delay_ms(300);
					goto L1;
				}
				L2:
				LCD_clear_screen();
     c96:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("MINUTES:--");
     c9a:	c6 01       	movw	r24, r12
     c9c:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,9);
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	69 e0       	ldi	r22, 0x09	; 9
     ca4:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     ca8:	8f e7       	ldi	r24, 0x7F	; 127
     caa:	99 ea       	ldi	r25, 0xA9	; 169
     cac:	a3 e0       	ldi	r26, 0x03	; 3
     cae:	81 50       	subi	r24, 0x01	; 1
     cb0:	90 40       	sbci	r25, 0x00	; 0
     cb2:	a0 40       	sbci	r26, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x180>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <main+0x18a>
     cb8:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit1=keybad_u8read_press();
     cba:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     cbe:	80 93 2c 01 	sts	0x012C, r24
					
				}while(digit1==notpassed);
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	d1 f3       	breq	.-12     	; 0xcba <main+0x18c>
				LCD_SEND_CHAR(digit1);
     cc6:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     cca:	8f e7       	ldi	r24, 0x7F	; 127
     ccc:	99 ea       	ldi	r25, 0xA9	; 169
     cce:	a3 e0       	ldi	r26, 0x03	; 3
     cd0:	81 50       	subi	r24, 0x01	; 1
     cd2:	90 40       	sbci	r25, 0x00	; 0
     cd4:	a0 40       	sbci	r26, 0x00	; 0
     cd6:	e1 f7       	brne	.-8      	; 0xcd0 <main+0x1a2>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <main+0x1ac>
     cda:	00 00       	nop
				_delay_ms(150);
				do
				{
					digit2=keybad_u8read_press();
     cdc:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     ce0:	80 93 2a 01 	sts	0x012A, r24
					
				}while(digit2==notpassed);
     ce4:	8f 3f       	cpi	r24, 0xFF	; 255
     ce6:	d1 f3       	breq	.-12     	; 0xcdc <main+0x1ae>
				LCD_SEND_CHAR(digit2);
     ce8:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     cec:	8f e7       	ldi	r24, 0x7F	; 127
     cee:	99 ea       	ldi	r25, 0xA9	; 169
     cf0:	a3 e0       	ldi	r26, 0x03	; 3
     cf2:	81 50       	subi	r24, 0x01	; 1
     cf4:	90 40       	sbci	r25, 0x00	; 0
     cf6:	a0 40       	sbci	r26, 0x00	; 0
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <main+0x1c4>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <main+0x1ce>
     cfc:	00 00       	nop
				_delay_ms(150);
				minutes=(digit2-48)+10*(digit1-48);
     cfe:	40 91 2a 01 	lds	r20, 0x012A
     d02:	80 91 2c 01 	lds	r24, 0x012C
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	9c 01       	movw	r18, r24
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	82 0f       	add	r24, r18
     d18:	93 1f       	adc	r25, r19
     d1a:	84 0f       	add	r24, r20
     d1c:	91 1d       	adc	r25, r1
     d1e:	80 51       	subi	r24, 0x10	; 16
     d20:	92 40       	sbci	r25, 0x02	; 2
     d22:	90 93 18 01 	sts	0x0118, r25
     d26:	80 93 17 01 	sts	0x0117, r24
				if(minutes>60)
     d2a:	8d 33       	cpi	r24, 0x3D	; 61
     d2c:	91 05       	cpc	r25, r1
     d2e:	b0 f0       	brcs	.+44     	; 0xd5c <main+0x22e>
				{
					LCD_clear_screen();
     d30:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
					LCD_SEND_STRING("enter minu again");
     d34:	c2 01       	movw	r24, r4
     d36:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,1);
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("between 01 to 60");
     d42:	c8 01       	movw	r24, r16
     d44:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	92 e5       	ldi	r25, 0x52	; 82
     d4c:	a7 e0       	ldi	r26, 0x07	; 7
     d4e:	81 50       	subi	r24, 0x01	; 1
     d50:	90 40       	sbci	r25, 0x00	; 0
     d52:	a0 40       	sbci	r26, 0x00	; 0
     d54:	e1 f7       	brne	.-8      	; 0xd4e <main+0x220>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <main+0x22a>
     d58:	00 00       	nop
     d5a:	9d cf       	rjmp	.-198    	; 0xc96 <main+0x168>
					_delay_ms(300);
					goto L2;
				}
				L3:
				LCD_clear_screen();
     d5c:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("SECONDS:--");
     d60:	c5 01       	movw	r24, r10
     d62:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,9);
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	69 e0       	ldi	r22, 0x09	; 9
     d6a:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
     d6e:	8f e7       	ldi	r24, 0x7F	; 127
     d70:	99 ea       	ldi	r25, 0xA9	; 169
     d72:	a3 e0       	ldi	r26, 0x03	; 3
     d74:	81 50       	subi	r24, 0x01	; 1
     d76:	90 40       	sbci	r25, 0x00	; 0
     d78:	a0 40       	sbci	r26, 0x00	; 0
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <main+0x246>
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <main+0x250>
     d7e:	00 00       	nop
				_delay_ms(150);
				
				do
				{
					digit1=keybad_u8read_press();
     d80:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     d84:	80 93 2c 01 	sts	0x012C, r24
					
				}while(digit1==notpassed);
     d88:	8f 3f       	cpi	r24, 0xFF	; 255
     d8a:	d1 f3       	breq	.-12     	; 0xd80 <main+0x252>
				LCD_SEND_CHAR(digit1);
     d8c:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	91 ee       	ldi	r25, 0xE1	; 225
     d94:	a4 e0       	ldi	r26, 0x04	; 4
     d96:	81 50       	subi	r24, 0x01	; 1
     d98:	90 40       	sbci	r25, 0x00	; 0
     d9a:	a0 40       	sbci	r26, 0x00	; 0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <main+0x268>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <main+0x272>
     da0:	00 00       	nop
				_delay_ms(200);
				do
				{
					digit2=keybad_u8read_press();
     da2:	0e 94 4f 04 	call	0x89e	; 0x89e <keybad_u8read_press>
     da6:	80 93 2a 01 	sts	0x012A, r24
					
				}while(digit2==notpassed);
     daa:	8f 3f       	cpi	r24, 0xFF	; 255
     dac:	d1 f3       	breq	.-12     	; 0xda2 <main+0x274>
				LCD_SEND_CHAR(digit2);
     dae:	0e 94 bd 04 	call	0x97a	; 0x97a <LCD_SEND_CHAR>
     db2:	8f e7       	ldi	r24, 0x7F	; 127
     db4:	99 ea       	ldi	r25, 0xA9	; 169
     db6:	a3 e0       	ldi	r26, 0x03	; 3
     db8:	81 50       	subi	r24, 0x01	; 1
     dba:	90 40       	sbci	r25, 0x00	; 0
     dbc:	a0 40       	sbci	r26, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <main+0x28a>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <main+0x294>
     dc2:	00 00       	nop
				_delay_ms(150);
				seconds=(digit2-48)+10*(digit1-48);
     dc4:	90 91 2a 01 	lds	r25, 0x012A
     dc8:	90 51       	subi	r25, 0x10	; 16
     dca:	80 91 2c 01 	lds	r24, 0x012C
     dce:	88 0f       	add	r24, r24
     dd0:	28 2f       	mov	r18, r24
     dd2:	22 0f       	add	r18, r18
     dd4:	22 0f       	add	r18, r18
     dd6:	82 0f       	add	r24, r18
     dd8:	98 0f       	add	r25, r24
     dda:	90 93 27 01 	sts	0x0127, r25
				if(seconds>60)
     dde:	80 91 27 01 	lds	r24, 0x0127
     de2:	8d 33       	cpi	r24, 0x3D	; 61
     de4:	b0 f0       	brcs	.+44     	; 0xe12 <main+0x2e4>
				{
					LCD_clear_screen();
     de6:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
					LCD_SEND_STRING("enter sec again");
     dea:	c3 01       	movw	r24, r6
     dec:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,1);
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("between 01 to 60");
     df8:	c8 01       	movw	r24, r16
     dfa:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	92 e5       	ldi	r25, 0x52	; 82
     e02:	a7 e0       	ldi	r26, 0x07	; 7
     e04:	81 50       	subi	r24, 0x01	; 1
     e06:	90 40       	sbci	r25, 0x00	; 0
     e08:	a0 40       	sbci	r26, 0x00	; 0
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <main+0x2d6>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <main+0x2e0>
     e0e:	00 00       	nop
     e10:	a5 cf       	rjmp	.-182    	; 0xd5c <main+0x22e>
					_delay_ms(300);
					goto L3;
				}
				flag=1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	90 93 20 01 	sts	0x0120, r25
     e1a:	80 93 1f 01 	sts	0x011F, r24
				LCD_clear_screen();
				LCD_SEND_STRING("WRONG NUMBER");
				_delay_ms(300);
				goto L7;
			}
			LCD_clear_screen();
     e1e:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
			 LCD_SEND_STRING("(1)set time");
     e22:	8a ef       	ldi	r24, 0xFA	; 250
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     e2a:	10 c0       	rjmp	.+32     	; 0xe4c <main+0x31e>
// 				LCD_clear_screen();
// 				
/*    	}*/
			else
			{
				LCD_clear_screen();
     e2c:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_clear_screen>
				LCD_SEND_STRING("WRONG NUMBER");
     e30:	86 e0       	ldi	r24, 0x06	; 6
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 67 05 	call	0xace	; 0xace <LCD_SEND_STRING>
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	92 e5       	ldi	r25, 0x52	; 82
     e3c:	a7 e0       	ldi	r26, 0x07	; 7
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	90 40       	sbci	r25, 0x00	; 0
     e42:	a0 40       	sbci	r26, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <main+0x310>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <main+0x31a>
     e48:	00 00       	nop
     e4a:	b6 ce       	rjmp	.-660    	; 0xbb8 <main+0x8a>
			 
		
		}	
		
		
		SET_BIT(PORTC,0);
     e4c:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,1);
     e4e:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,2);
     e50:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,3);
     e52:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,4);
     e54:	ac 9a       	sbi	0x15, 4	; 21
		CLEAR_BIT(PORTC,5);
     e56:	ad 98       	cbi	0x15, 5	; 21
		seven_seg_write('B',seconds%10);
     e58:	80 91 27 01 	lds	r24, 0x0127
     e5c:	ca e0       	ldi	r28, 0x0A	; 10
     e5e:	6c 2f       	mov	r22, r28
     e60:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__udivmodqi4>
     e64:	82 e4       	ldi	r24, 0x42	; 66
     e66:	69 2f       	mov	r22, r25
     e68:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
     e6c:	af e0       	ldi	r26, 0x0F	; 15
     e6e:	b7 e2       	ldi	r27, 0x27	; 39
     e70:	11 97       	sbiw	r26, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <main+0x342>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <main+0x348>
     e76:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTC,0);
     e78:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,1);
     e7a:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,2);
     e7c:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,3);
     e7e:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,5);
     e80:	ad 9a       	sbi	0x15, 5	; 21
		CLEAR_BIT(PORTC,4);
     e82:	ac 98       	cbi	0x15, 4	; 21
		seven_seg_write('B',seconds/10);
     e84:	80 91 27 01 	lds	r24, 0x0127
     e88:	6c 2f       	mov	r22, r28
     e8a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__udivmodqi4>
     e8e:	68 2f       	mov	r22, r24
     e90:	82 e4       	ldi	r24, 0x42	; 66
     e92:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
     e96:	8f e0       	ldi	r24, 0x0F	; 15
     e98:	97 e2       	ldi	r25, 0x27	; 39
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <main+0x36c>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <main+0x372>
     ea0:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTC,0);
     ea2:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,1);
     ea4:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,2);
     ea6:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,4);
     ea8:	ac 9a       	sbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
     eaa:	ad 9a       	sbi	0x15, 5	; 21
		CLEAR_BIT(PORTC,3);
     eac:	ab 98       	cbi	0x15, 3	; 21
		seven_seg_write('B',minutes%10);
     eae:	80 91 17 01 	lds	r24, 0x0117
     eb2:	90 91 18 01 	lds	r25, 0x0118
     eb6:	ca e0       	ldi	r28, 0x0A	; 10
     eb8:	d0 e0       	ldi	r29, 0x00	; 0
     eba:	be 01       	movw	r22, r28
     ebc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodhi4>
     ec0:	68 2f       	mov	r22, r24
     ec2:	82 e4       	ldi	r24, 0x42	; 66
     ec4:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
     ec8:	af e0       	ldi	r26, 0x0F	; 15
     eca:	b7 e2       	ldi	r27, 0x27	; 39
     ecc:	11 97       	sbiw	r26, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <main+0x39e>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <main+0x3a4>
     ed2:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTC,0);
     ed4:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,1);
     ed6:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,3);
     ed8:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,4);
     eda:	ac 9a       	sbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
     edc:	ad 9a       	sbi	0x15, 5	; 21
		CLEAR_BIT(PORTC,2);
     ede:	aa 98       	cbi	0x15, 2	; 21
		seven_seg_write('B',minutes/10);
     ee0:	80 91 17 01 	lds	r24, 0x0117
     ee4:	90 91 18 01 	lds	r25, 0x0118
     ee8:	be 01       	movw	r22, r28
     eea:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodhi4>
     eee:	82 e4       	ldi	r24, 0x42	; 66
     ef0:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
     ef4:	8f e0       	ldi	r24, 0x0F	; 15
     ef6:	97 e2       	ldi	r25, 0x27	; 39
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <main+0x3ca>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <main+0x3d0>
     efe:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTC,0);
     f00:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,2);
     f02:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,3);
     f04:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,4);
     f06:	ac 9a       	sbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
     f08:	ad 9a       	sbi	0x15, 5	; 21
		CLEAR_BIT(PORTC,1);
     f0a:	a9 98       	cbi	0x15, 1	; 21
		seven_seg_write('B',hours%10);
     f0c:	80 91 15 01 	lds	r24, 0x0115
     f10:	90 91 16 01 	lds	r25, 0x0116
     f14:	be 01       	movw	r22, r28
     f16:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodhi4>
     f1a:	68 2f       	mov	r22, r24
     f1c:	82 e4       	ldi	r24, 0x42	; 66
     f1e:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
     f22:	af e0       	ldi	r26, 0x0F	; 15
     f24:	b7 e2       	ldi	r27, 0x27	; 39
     f26:	11 97       	sbiw	r26, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <main+0x3f8>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <main+0x3fe>
     f2c:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTC,1);
     f2e:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,2);
     f30:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,3);
     f32:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,4);
     f34:	ac 9a       	sbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
     f36:	ad 9a       	sbi	0x15, 5	; 21
		CLEAR_BIT(PORTC,0);
     f38:	a8 98       	cbi	0x15, 0	; 21
		seven_seg_write('B',hours/10);
     f3a:	80 91 15 01 	lds	r24, 0x0115
     f3e:	90 91 16 01 	lds	r25, 0x0116
     f42:	be 01       	movw	r22, r28
     f44:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodhi4>
     f48:	82 e4       	ldi	r24, 0x42	; 66
     f4a:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
     f4e:	8f e0       	ldi	r24, 0x0F	; 15
     f50:	97 e2       	ldi	r25, 0x27	; 39
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <main+0x424>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <main+0x42a>
     f58:	00 00       	nop
// 		LCD_SEND_STRING("/");
// 		LCD_SEND_CHAR((year/1000) +48);
// 		LCD_SEND_CHAR(((year/100) % 10)+48);
// 		LCD_SEND_CHAR(((year/10) % 10)+48);
// 		LCD_SEND_CHAR((year%10) +48);
		if(seconds>=60)
     f5a:	80 91 27 01 	lds	r24, 0x0127
     f5e:	8c 33       	cpi	r24, 0x3C	; 60
     f60:	58 f0       	brcs	.+22     	; 0xf78 <main+0x44a>
		{
			seconds=0;
     f62:	10 92 27 01 	sts	0x0127, r1
			minutes++;
     f66:	80 91 17 01 	lds	r24, 0x0117
     f6a:	90 91 18 01 	lds	r25, 0x0118
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	90 93 18 01 	sts	0x0118, r25
     f74:	80 93 17 01 	sts	0x0117, r24
		}
		if (minutes>=60)
     f78:	80 91 17 01 	lds	r24, 0x0117
     f7c:	90 91 18 01 	lds	r25, 0x0118
     f80:	8c 33       	cpi	r24, 0x3C	; 60
     f82:	91 05       	cpc	r25, r1
     f84:	68 f0       	brcs	.+26     	; 0xfa0 <main+0x472>
		{
			minutes=0;
     f86:	10 92 18 01 	sts	0x0118, r1
     f8a:	10 92 17 01 	sts	0x0117, r1
			hours++;
     f8e:	80 91 15 01 	lds	r24, 0x0115
     f92:	90 91 16 01 	lds	r25, 0x0116
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	90 93 16 01 	sts	0x0116, r25
     f9c:	80 93 15 01 	sts	0x0115, r24
// 			LCD_SEND_STRING("PM");
// 			hours=hours-12;
// 			flag=0;
// 		}
		
		if (day>=31)
     fa0:	80 91 25 01 	lds	r24, 0x0125
     fa4:	90 91 26 01 	lds	r25, 0x0126
     fa8:	8f 31       	cpi	r24, 0x1F	; 31
     faa:	91 05       	cpc	r25, r1
     fac:	78 f0       	brcs	.+30     	; 0xfcc <main+0x49e>
		{
			day=1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	90 93 26 01 	sts	0x0126, r25
     fb6:	80 93 25 01 	sts	0x0125, r24
			month++;
     fba:	80 91 23 01 	lds	r24, 0x0123
     fbe:	90 91 24 01 	lds	r25, 0x0124
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	90 93 24 01 	sts	0x0124, r25
     fc8:	80 93 23 01 	sts	0x0123, r24
		}
		if (month>=13)
     fcc:	80 91 23 01 	lds	r24, 0x0123
     fd0:	90 91 24 01 	lds	r25, 0x0124
     fd4:	8d 30       	cpi	r24, 0x0D	; 13
     fd6:	91 05       	cpc	r25, r1
     fd8:	08 f4       	brcc	.+2      	; 0xfdc <main+0x4ae>
     fda:	ee cd       	rjmp	.-1060   	; 0xbb8 <main+0x8a>
		{
			month=1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	90 93 24 01 	sts	0x0124, r25
     fe4:	80 93 23 01 	sts	0x0123, r24
			year++;		
     fe8:	80 91 21 01 	lds	r24, 0x0121
     fec:	90 91 22 01 	lds	r25, 0x0122
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	90 93 22 01 	sts	0x0122, r25
     ff6:	80 93 21 01 	sts	0x0121, r24
     ffa:	de cd       	rjmp	.-1092   	; 0xbb8 <main+0x8a>

00000ffc <__vector_5>:
							 														
    }
}

ISR(TIMER2_OVF_vect)
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	8f 93       	push	r24
	seconds++;
    1008:	80 91 27 01 	lds	r24, 0x0127
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	80 93 27 01 	sts	0x0127, r24
	sec++;
    1012:	80 91 14 01 	lds	r24, 0x0114
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	80 93 14 01 	sts	0x0114, r24
    101c:	8f 91       	pop	r24
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <TIMER_CTC_INIT>:
#include "std_macros.h"
#define  F_CPU 8000000UL
	#include <util/delay.h>
void TIMER_CTC_INIT(void)
{
	sei();
    1028:	78 94       	sei
	SET_BIT(TCCR0,CS00);//clock
    102a:	83 b7       	in	r24, 0x33	; 51
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);//clock
    1030:	83 b7       	in	r24, 0x33	; 51
    1032:	84 60       	ori	r24, 0x04	; 4
    1034:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);//mode
    1036:	83 b7       	in	r24, 0x33	; 51
    1038:	88 60       	ori	r24, 0x08	; 8
    103a:	83 bf       	out	0x33, r24	; 51
	OCR0=80;
    103c:	80 e5       	ldi	r24, 0x50	; 80
    103e:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TIMSK,OCIE0);//enable
    1040:	89 b7       	in	r24, 0x39	; 57
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	89 bf       	out	0x39, r24	; 57
}
    1046:	08 95       	ret

00001048 <TIMER_WAVA_NONPWM>:
void TIMER_WAVA_NONPWM(void)
{
	SET_BIT(DDRB,3);
    1048:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,WGM01);
    104a:	83 b7       	in	r24, 0x33	; 51
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM00);
    1050:	83 b7       	in	r24, 0x33	; 51
    1052:	80 64       	ori	r24, 0x40	; 64
    1054:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
    1056:	80 e4       	ldi	r24, 0x40	; 64
    1058:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
    105a:	83 b7       	in	r24, 0x33	; 51
    105c:	81 60       	ori	r24, 0x01	; 1
    105e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1060:	83 b7       	in	r24, 0x33	; 51
    1062:	84 60       	ori	r24, 0x04	; 4
    1064:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00);
    1066:	83 b7       	in	r24, 0x33	; 51
    1068:	80 61       	ori	r24, 0x10	; 16
    106a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    106c:	83 b7       	in	r24, 0x33	; 51
    106e:	80 62       	ori	r24, 0x20	; 32
    1070:	83 bf       	out	0x33, r24	; 51
}	
    1072:	08 95       	ret

00001074 <TIMER_PWM_phase_correct>:
void TIMER_PWM_phase_correct(void)
{
	SET_BIT(DDRB,3);
    1074:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,WGM00);
    1076:	83 b7       	in	r24, 0x33	; 51
    1078:	80 64       	ori	r24, 0x40	; 64
    107a:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
    107c:	80 e4       	ldi	r24, 0x40	; 64
    107e:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
    1080:	83 b7       	in	r24, 0x33	; 51
    1082:	81 60       	ori	r24, 0x01	; 1
    1084:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1086:	83 b7       	in	r24, 0x33	; 51
    1088:	84 60       	ori	r24, 0x04	; 4
    108a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00);
    108c:	83 b7       	in	r24, 0x33	; 51
    108e:	80 61       	ori	r24, 0x10	; 16
    1090:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1092:	83 b7       	in	r24, 0x33	; 51
    1094:	80 62       	ori	r24, 0x20	; 32
    1096:	83 bf       	out	0x33, r24	; 51
	
}
    1098:	08 95       	ret

0000109a <TIMER2_overflow_interrupt>:
void TIMER2_overflow_interrupt(void)
{
	SET_BIT(ASSR,AS2);
    109a:	82 b5       	in	r24, 0x22	; 34
    109c:	88 60       	ori	r24, 0x08	; 8
    109e:	82 bd       	out	0x22, r24	; 34
	//SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS22);
    10a0:	85 b5       	in	r24, 0x25	; 37
    10a2:	84 60       	ori	r24, 0x04	; 4
    10a4:	85 bd       	out	0x25, r24	; 37
	sei();
    10a6:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
    10a8:	89 b7       	in	r24, 0x39	; 57
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	89 bf       	out	0x39, r24	; 57
    10ae:	08 95       	ret

000010b0 <__udivmodqi4>:
    10b0:	99 1b       	sub	r25, r25
    10b2:	79 e0       	ldi	r23, 0x09	; 9
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <__udivmodqi4_ep>

000010b6 <__udivmodqi4_loop>:
    10b6:	99 1f       	adc	r25, r25
    10b8:	96 17       	cp	r25, r22
    10ba:	08 f0       	brcs	.+2      	; 0x10be <__udivmodqi4_ep>
    10bc:	96 1b       	sub	r25, r22

000010be <__udivmodqi4_ep>:
    10be:	88 1f       	adc	r24, r24
    10c0:	7a 95       	dec	r23
    10c2:	c9 f7       	brne	.-14     	; 0x10b6 <__udivmodqi4_loop>
    10c4:	80 95       	com	r24
    10c6:	08 95       	ret

000010c8 <__udivmodhi4>:
    10c8:	aa 1b       	sub	r26, r26
    10ca:	bb 1b       	sub	r27, r27
    10cc:	51 e1       	ldi	r21, 0x11	; 17
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <__udivmodhi4_ep>

000010d0 <__udivmodhi4_loop>:
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	a6 17       	cp	r26, r22
    10d6:	b7 07       	cpc	r27, r23
    10d8:	10 f0       	brcs	.+4      	; 0x10de <__udivmodhi4_ep>
    10da:	a6 1b       	sub	r26, r22
    10dc:	b7 0b       	sbc	r27, r23

000010de <__udivmodhi4_ep>:
    10de:	88 1f       	adc	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	5a 95       	dec	r21
    10e4:	a9 f7       	brne	.-22     	; 0x10d0 <__udivmodhi4_loop>
    10e6:	80 95       	com	r24
    10e8:	90 95       	com	r25
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	08 95       	ret

000010f0 <_exit>:
    10f0:	f8 94       	cli

000010f2 <__stop_program>:
    10f2:	ff cf       	rjmp	.-2      	; 0x10f2 <__stop_program>
